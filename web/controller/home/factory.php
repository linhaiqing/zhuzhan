<?phpnamespace home;use Move\db;use Move\ext\page;class factory extends home{	public function __construct()	{		parent::__construct();		$this->is_game('factory');	}	public function index()	{		if (!$this->userid) {			redirect("/factory/market");		}		$this->set_title('养殖工厂');		md('factory')->checkStatus($this->userid);		$arr = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 1, "status#!=" => 0])->count();		$PageObj = new page($arr, 15);		$show = $PageObj->show();		$list = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 1, "status#!=" => 0])->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		$pages['tool'] = ['show' => $show, 'list' => $list];		$arr2 = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 2, "status#!=" => 0])->count();		$PageObj2 = new page($arr2, 5);		$show2 = $PageObj2->show();		$list2 = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 2, "status#!=" => 0])->order("`id` desc")->limit($PageObj2->firstRow, $PageObj2->listRows)->select();		if ($list2) {			foreach ($list2 as $k => $v) {				$goods = db::table("factory_goods")->where(["goodsName" => $v["protertyName"]])->find();				if ($goods && $goods['id']) {					$list2[$k]["goodsId"] = $goods['id'];				}			}		}		$pages['food'] = ['show' => $show2, 'list' => $list2];		$this->assign('pages', $pages);		$this->display();	}	public function market()	{		$this->set_title('养殖工厂');		$goodsList = db::table("factory_goods")->where(["status" => 1])->order("`id` asc")->select();		$PageObj = new page(count($goodsList), 15);		$show = $PageObj->show();		$pages = ['show' => $show, 'list' => $goodsList];		$this->assign('pages', $pages);		$this->display();	}	public function buyLog()	{		$this->set_title('养殖工厂');		$arr = db::table("factory_buylog")->where(["userid" => session("userid")])->count();		$PageObj = new page($arr, 15);		$show = $PageObj->show();		$list = db::table("factory_buylog")->where(["userid" => session("userid")])->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		foreach ($list as $k => $v) {			$list[$k]['addtime'] = addtime($v['addtime']);		}		$pages = ['show' => $show, 'list' => $list];		$this->assign('pages', $pages);		$this->display();	}	public function order()	{		$this->set_title('养殖工厂');		$status = iv("status", 'd', '', 1);		if ($status == '') {			redirect("/factory/index");			exit();		}		$arr = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 1, "status" => $status])->count();		$PageObj = new page($arr, 15);		$show = $PageObj->show();		$list = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 1, "status" => $status])->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		$pages['tool'] = ['show' => $show, 'list' => $list];		$arr2 = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 2, "status#!=" => 0])->count();		$PageObj2 = new page($arr2, 5);		$show2 = $PageObj2->show();		$list2 = db::table("factory_proterty")->where(["userid" => session("userid"), "type" => 2, "status#!=" => 0])->order("`id` desc")->limit($PageObj2->firstRow, $PageObj2->listRows)->select();		$pages['food'] = ['show' => $show2, 'list' => $list2];		$this->assign('pages', $pages);		$this->display("index");	}	public function gainLog()	{		$this->set_title('养殖工厂');		$arr = db::table("factory_getproduct")->where(["userid" => session("userid"), "status" => 1])->count();		$PageObj = new page($arr, 15);		$show = $PageObj->show();		$list = db::table("factory_getproduct")->where(["userid" => session("userid"), "status" => 1])->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		$pages['list'] = ['show' => $show, 'list' => $list];		$typeList = [];		$typeNameArry = [];		$allProductList = db::table("factory_getproduct")->where(["userid" => session("userid"), "status" => 1])->order("`addtime` desc")->select();		if ($allProductList) {			foreach ($allProductList as $k => $v) {				if (!in_array($v['productName'], $typeNameArry)) {					$typeNameArry[] = $v['productName'];				}				$typeList[$v['productName']][] = $v;			}		}		$allType = [];		foreach ($typeList as $k => $v) {			$total = $v[0];			$num = 0;			foreach ($v as $k2 => $v2) {				$num += $v2["num"];			}			$total["num"] = $num;			$price = db::table('factory_goods')->where(["productName" => $total["productName"]])->find();			$total["price"] = $price["productPrice"] == null ? 0 : $price["productPrice"];			$total["totalMoney"] = $total["price"] * $total["num"];			$allType[] = $total;		}		$pages['total'] = ['list' => $allType];		$this->assign('pages', $pages);		$this->display();	}	public function feed()	{		$this->check_up('养殖工厂喂食');		$id = iv("post.id", "d", "参数错误");		$paypassword = iv("post.paypassword", "password", "交易密码格式错误");		if (!$this->userid) {			ajax("请先登录");		}		$res = md('factory')->feed($this->userid, $id, $paypassword);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function buy()	{		$this->check_up('养殖工厂购买');		$id = iv("post.id", "d", "参数错误");		$paypassword = iv("post.paypassword", "password", "交易密码格式错误");		$num = iv("post.num", "d", "数量错误");		if (!$this->userid) {			ajax("请先登录");		}		$res = md('factory')->buy($this->userid, $id, $paypassword, $num);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}}