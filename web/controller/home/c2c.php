<?phpnamespace home;use Move\db;use Move\ext\page;class c2c extends home{	public function __construct()	{		parent::__construct();	}	public function index()	{     		$this->set_title('C2C交易');		$qu = db::table('c2c_qu')->where(['status' => 1])->select();		     		$this->assign('qu', $qu);		$quID = iv('get.quid', 'd', '区ID错误', 1);		$typeID = iv('get.typeid', 'd', '买卖类型错误', 1);		$where['status'] = 1;		if ($quID) {			$where['quid'] = $quID;			$this->assign('quid', $quID);			$quName = db::table('c2c_qu')->where(['id' => $quID])->find('coin');		} else {			$where['quid'] = $qu[0]['id'];			$coinQu = db::table('c2c_qu')->where(['status' => 1])->order('id asc')->find();			$this->assign('quid', $coinQu['id']);			$quName = $coinQu['coin'];		}		$this->assign('quName', $quName);		if ($typeID) {			$where['type'] = $typeID;			$this->assign('typeid', $typeID);		} else {			$where['type'] = 1;			$this->assign('typeid', 1);		}		$count = db::table("c2c_pro")->where($where)->count();		$PageObj = new page($count, 10);		$show = $PageObj->show();		$lists = db::table("c2c_pro")->where($where)->order("sort asc ,addtime desc,id desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		foreach ($lists as $k => $v) {			$userName = db::table('user')->where(['id' => $v['userid']])->find('username');			$lists[$k]['username'] = substr($userName, 0, 3) . '*****' . substr($userName, -3);			$arr = explode(',', rtrim($v['paytype'], ','));			$str = '';			foreach ($arr as $kk => $vv) {				switch ($vv) {					case 1:						$pay = '支付宝/';						break;					case 2:						$pay = '微信/';						break;					case 3:						$pay = '网银/';				}				$str .= $pay;			}			$lists[$k]['paytype'] = rtrim($str, '/');		}		$bank = '';		if ($this->userid) {			$proLog = db::table("c2c_log")->where(['userid|peerid' => $this->userid])->limit(5)->order('addtime desc,id desc')->select();			$bank = db::table('user_bank')->where(['userid' => $this->userid, 'status' => 1])->select();			if ($proLog) {				foreach ($proLog as $k => $v) {					$pro = db::table("c2c_pro")->where(['id' => $v['proid']])->find();					$proLog[$k]['payinfo'] = json_decode($pro['payinfo'], true);					if (array_key_exists('bank', $proLog[$k]['payinfo'])) {						$proLog[$k]['payinfo']['bank'] = db::table('user_bank')->where(['id' => $proLog[$k]['payinfo']['bank'], 'status' => 1])->find();					}					if ($this->userid == $v['peerid']) {						$userInfo = db::table("user")->where(['id' => $v['userid']])->field('truename,moble')->find();						$proLog[$k]['partner'] = $userInfo['truename'];						$proLog[$k]['tel'] = $userInfo['moble'];						$proLog[$k]['lei'] = 1;						$proLog[$k]['uid'] = $v['userid'];					} elseif ($this->userid == $v['userid']) {						$userInfo = db::table("user")->where(['id' => $v['peerid']])->field('truename,moble')->find();						$proLog[$k]['partner'] = $userInfo['truename'];						$proLog[$k]['tel'] = $userInfo['moble'];						$proLog[$k]['lei'] = 2;						$proLog[$k]['uid'] = $v['peerid'];					}					if ($v['type'] == 1) {						$proLog[$k]['username'] = db::table("user")->where(['id' => $v['userid']])->find('truename');					} elseif ($v['type'] == 2) {						$proLog[$k]['username'] = db::table("user")->where(['id' => $v['peerid']])->find('truename');					}				}				$this->assign('proLog', $proLog);			}		}		$pages = ['lists' => $lists, 'show' => $show];		$this->assign('bank', $bank);		$this->assign('pages', $pages);		$this->display();	}	public function trade()	{		$id = iv('post.id', 'd', '参数错误');		$pro = db::table('c2c_pro')->where(['id' => $id, 'status' => 1])->find();		if (!$pro) {			ajax($this->ajax_lang('该挂单已失效'));		}		if ($pro == 1) {			$payInfo = json_decode($pro['payinfo'], true);			$payInfo['tel'] = $pro['tel'];		}		$payInfo['num'] = $pro['num'];		$payInfo['mum'] = $pro['mum'];		$payInfo['price'] = $pro['price'];		ajax($payInfo, 1);	}	public function tradeUp()	{		$id = iv('post.id', 'd', '参数错误');		$paypassword = iv("post.paypassword", "password", "密码格式格式错误");		$aliPay = iv('post.alipay', 'a', '支付宝错误', 1);		$weChat = iv('post.weChat', 'a', '微信错误', 1);		$bank = $this->cutstr_html(iv('post.bank', '', '银行卡错误', 1));		$type = iv('post.type', 'd', '类型错误');		if (!$this->userid) {			ajax($this->ajax_lang("请先登录"));		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (empty($user['paypassword'])) {			ajax($this->ajax_lang('交易密码非法'));		}		if (hashs($paypassword) != $user['paypassword']) {			ajax($this->ajax_lang('交易密码错误'));		}		if ($type == 2) {			$payInfo = [];			if ($aliPay) {				$payInfo['alipay'] = $aliPay;			}			if ($weChat) {				$payInfo['weChat'] = $weChat;			}			if ($bank) {				$payInfo['bank'] = $bank;			}			$re = md('c2c')->insertPay($id, $payInfo);		}		$res = md('c2c')->tradeUp($this->userid, $id);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function applyOrder()	{		$type = iv('post.type', 'd', '买卖类型错误');		$coin = iv('post.coin', 'w', '币种类型错误');		$price = iv('post.price', 'xnb', '价格错误');		$mum = iv('post.mum', 'xnb', '总价错误');		$aliPay = iv('post.alipay', 'a', '支付宝错误', 1);		$weChat = iv('post.weChat', 'a', '微信错误', 1);		$bank = iv('post.bank', 'd', '银行卡错误', 1);		$paypassword = iv("post.paypassword", "password", "密码格式格式错误");		if (!$this->userid) {			ajax($this->ajax_lang("请先登录"));		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (empty($user['paypassword'])) {			ajax($this->ajax_lang('交易密码非法'));		}		if (hashs($paypassword) != $user['paypassword']) {			ajax($this->ajax_lang('交易密码错误'));		}		if (empty($user['truename'])) {			ajax($this->ajax_lang('请先进行实名认证'));		}		if (empty($user['moble'])) {			ajax('请先进行手机绑定');		}		$payInfo = [];		$payType = [];		if ($aliPay) {			$payInfo['alipay'] = $aliPay;			$payType[] = 1;		}		if ($weChat) {			$payInfo['weChat'] = $weChat;			$payType[] = 2;		}		if ($bank) {			$payInfo['bank'] = $bank;			$payType[] = 3;		}		$res = md('c2c')->applyOrder($this->userid, $type, $coin, $price, $mum, $payType, $payInfo);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function statusTo()	{		$id = iv('post.id', 'd', 'id参数错误');		$status = iv('post.status', 'd', '状态参数错误');		$paypassword = iv("post.paypassword", "password", "密码格式格式错误");		if (!$this->userid) {			ajax("请先登录");		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (empty($user['paypassword'])) {			ajax('交易密码非法');		}		if (hashs($paypassword) != $user['paypassword']) {			ajax('交易密码错误');		}		$res = md('c2c')->statusTo($this->userid, $id, $status);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function log()	{		$this->set_title('C2C交易记录');		if ($this->userid) {			$count = db::table("c2c_log")->where(['userid|peerid' => $this->userid])->count();			$PageObj = new page($count, 10);			$show = $PageObj->show();			$lists = db::table("c2c_log")->where(['userid|peerid' => $this->userid])->order("sort asc ,addtime desc,id desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();			foreach ($lists as $k => $v) {				$pro = db::table("c2c_pro")->where(['id' => $v['proid']])->find();				$lists[$k]['payinfo'] = json_decode($pro['payinfo'], true);				if (array_key_exists('bank', $lists[$k]['payinfo'])) {					$lists[$k]['payinfo']['bank'] = db::table('user_bank')->where(['id' => $lists[$k]['payinfo']['bank'], 'status' => 1])->find();				}				if ($this->userid == $v['peerid']) {					$userInfo = db::table("user")->where(['id' => $v['userid']])->field('truename,moble')->find();					$lists[$k]['partner'] = $userInfo['truename'];					$lists[$k]['tel'] = $userInfo['moble'];					$lists[$k]['lei'] = 1;					$lists[$k]['uid'] = $v['userid'];				} elseif ($this->userid == $v['userid']) {					$userInfo = db::table("user")->where(['id' => $v['peerid']])->field('truename,moble')->find();					$lists[$k]['partner'] = $userInfo['truename'];					$lists[$k]['tel'] = $userInfo['moble'];					$lists[$k]['lei'] = 2;					$lists[$k]['uid'] = $v['peerid'];				}				if ($v['type'] == 1) {					$lists[$k]['username'] = db::table("user")->where(['id' => $v['userid']])->find('truename');				} elseif ($v['type'] == 2) {					$lists[$k]['username'] = db::table("user")->where(['id' => $v['peerid']])->find('truename');				}			}			$pages = ['lists' => $lists, 'show' => $show];			$this->assign('pages', $pages);		}		$this->display();	}	public function cancel()	{		$id = iv('post.id', 'd', '参数错误');		$paypassword = iv("post.paypassword", "password", "密码格式格式错误");		if (!$this->userid) {			ajax("请先登录");		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (empty($user['paypassword'])) {			ajax('交易密码非法');		}		if (hashs($paypassword) != $user['paypassword']) {			ajax('交易密码错误');		}		$res = md('c2c')->cancel($this->userid, $id);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function hangqing()	{		$coin = iv('get.coin', 'w', '币种错误');		$where['coin'] = $coin;		if (!mc('c2c_hangqing' . $coin)) {			$hangqing = db::table('c2c_hangqing')->where($where)->order('id desc')->limit(1000)->select();			asort($hangqing);			$tradeData = [];			foreach ($hangqing as $k => $v) {				$tradeData['time'][] = date('m-d H:i', $v['addtime']);				$tradeData['data'][] = $v['price'];			}			mc('c2c_hangqing' . $coin, $tradeData);		}		ajax(mc('c2c_hangqing' . $coin), 1);	}	public function top()	{		$coin = iv('get.coin', 'w', '币种错误');		if (!mc('c2c_topPrice' . $coin)) {			$topPrice = db::table('c2c_trade')->where(['coin' => $coin])->order('id desc')->find();			if ($topPrice) {				mc('c2c_topPrice' . $coin, $topPrice);			} else {				ajax($topPrice, 0);			}		}		ajax(mc('c2c_topPrice' . $coin), 1);	}	function cutstr_html($string, $length = 0, $ellipsis = '…')	{		$string = strip_tags($string);		$string = preg_replace('/\n/is', '', $string);		$string = preg_replace('/ |　/is', '', $string);		$string = preg_replace('/&nbsp;/is', '', $string);		preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/", $string, $string);		if (is_array($string) && !empty($string[0])) {			if (is_numeric($length) && $length) {				$string = join('', array_slice($string[0], 0, $length)) . $ellipsis;			} else {				$string = implode('', $string[0]);			}		} else {			$string = '';		}		return $string;	}	public function bank()	{		$this->set_title('银行卡管理');		$mymc_coin = new \mymc\coin();		$coins = $mymc_coin->all_rmb(1);		$coin_select = [];		if ($coins) {			foreach ($coins as $k => $v) {				$coin_select[$v['name']] = $v;			}		}		$user_bank = db::table('user_bank')->where(['userid' => $this->userid, 'status' => 1])->select();		foreach ($user_bank as $k => $v) {			$user_bank[$k]['bankcard'] = substr_replace($v['bankcard'], '****', 4, 4);		}		$bank_list = md('sys_config')->get('out_bank');		$bank_list = explode("|", $bank_list);		$this->assign('bank_list', $bank_list);		$this->assign('coin_select', $coin_select);		$this->assign('user_bank', $user_bank);		$this->display();	}	public function bank_up()	{		$this->check_up('添加银行卡');		$name = iv('post.name', 'a', $this->ajax_lang('备注名称格式错误'));		$bank = iv('post.bank', 'c', $this->ajax_lang('开户银行格式错误'));		$bankprov = iv('post.bankprov', 'c', $this->ajax_lang('开户省份格式错误'));		$bankcity = iv('post.bankcity', 'c', $this->ajax_lang('开户城市格式错误'), 1);		$bankaddr = iv('post.bankaddr', 'a', $this->ajax_lang('开户行地址格式错误'));		$bankcard = iv('post.bankcard', 'a', $this->ajax_lang('银行账号格式错误'));		$paypassword = iv('post.paypassword', 'password', $this->ajax_lang('交易密码格式错误'));		$user = db::table("user")->where(["id" => $this->userid])->find();		if ($user['paypassword'] != hashs($paypassword)) {			ajax($this->ajax_lang('交易密码错误'));		}		if (isset($user['truename']) && !$user['truename']) {			ajax($this->ajax_lang('请完善实名信息'));		}		$user_bank = db::table('user_bank')->where(['userid' => $this->userid])->select();		foreach ($user_bank as $k => $v) {			if ($v['name'] == $name) {				ajax($this->ajax_lang('请不要使用相同的备注名称'));			}			if ($v['bankcard'] == $bankcard) {				ajax($this->ajax_lang('银行卡号已存在'));			}		}		if (count($user_bank) >= 10) {			ajax($this->ajax_lang('每个用户每个币种最多只能添加10个地址'));		}		$res = db::table("user_bank")->add(['userid' => session('userid'), 'name' => $name, 'bank' => $bank, 'bankprov' => $bankprov, 'bankcity' => $bankcity, 'truename' => $user['truename'], 'bankaddr' => $bankaddr, 'bankcard' => $bankcard, 'addtime' => time(), 'status' => 1,]);		if ($res[0]) {			ajax($this->ajax_lang('操作成功'), 1);		} else {			ajax($this->ajax_lang($res[0]));		}	}	function luhm($no)	{		$arr_no = str_split($no);		$last_n = $arr_no[count($arr_no) - 1];		krsort($arr_no);		$i = 1;		$total = 0;		foreach ($arr_no as $n) {			if ($i % 2 == 0) {				$ix = $n * 2;				if ($ix >= 10) {					$nx = 1 + ($ix % 10);					$total += $nx;				} else {					$total += $ix;				}			} else {				$total += $n;			}			$i++;		}		$total -= $last_n;		$total *= 9;		if ($last_n == ($total % 10)) {			return 1;		} else {			return 0;		}	}	public function bank_del()	{		$this->check_up('删除银行卡');		$id = iv('post.id', 'd', $this->ajax_lang('参数错误'));		$paypassword = iv('post.paypassword', 'password', $this->ajax_lang('交易密码格式错误'));		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax($this->ajax_lang('用户异常'));		}		($user['paypassword'] != hashs($paypassword)) && ajax($this->ajax_lang('交易密码错误'));		$user_bank = db::table('user_bank')->where(["id" => $id])->find();		if (!$user_bank || $user_bank["userid"] != $user['id']) {			ajax($this->ajax_lang('非法访问'));		}		$res = db::table("user_bank")->where(["id" => $id])->delete();		if ($res) {			ajax($this->ajax_lang('操作成功'), 1);		} else {			ajax($this->ajax_lang('操作失败'));		}	}	public function homeCancel()	{		$id = iv('post.id', 'd', '参数错误');		$paypassword = iv("post.paypassword", "password", "密码格式格式错误");		if (!$this->userid) {			ajax("请先登录");		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (empty($user['paypassword'])) {			ajax('交易密码非法');		}		if (hashs($paypassword) != $user['paypassword']) {			ajax('交易密码错误');		}		$res = md('c2c')->homeCancel($this->userid, $id);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function guadan()	{		$this->set_title('C2C交易记录');		if ($this->userid) {			$count = db::table("c2c_pro")->where(['userid' => $this->userid])->count();			$PageObj = new page($count, 20);			$show = $PageObj->show();			$lists = db::table("c2c_pro")->where(['userid' => $this->userid])->order("sort asc ,addtime desc,id desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();			foreach ($lists as $k => $v) {				$lists[$k]['payinfo'] = json_decode($v['payinfo'], true);				if (array_key_exists('bank', $lists[$k]['payinfo'])) {					$lists[$k]['payinfo']['bank'] = db::table('user_bank')->where(['id' => $lists[$k]['payinfo']['bank'], 'status' => 1])->find();				}			}			$pages = ['lists' => $lists, 'show' => $show];			$this->assign('pages', $pages);		}		$this->display();	}} 