<?phpnamespace home;use Move\db;class email extends home{	public function __construct()	{		parent::__construct();		defined('MS_EMAIL') or define('MS_EMAIL', 0);	}	public function email_reg($userid)	{		if (MS_EMAIL == 1) {			return true;		}		$userinfo = db::table('user')->where(['id' => $userid])->find();		if (empty($userinfo)) {			return false;		}		if ($userinfo['status'] == 0) {			return false;		}		$sys_email = db::table('sys_email')->select();		$email_config = [];		foreach ($sys_email as $k => $v) {			$email_config[$v['name']] = $v['value'];		}		$code = hashs(rand(111111, 999999) . $userid);		$href = 'http://' . $_SERVER["HTTP_HOST"] . "/reg/active_up/code/" . $code;		$content = '<a href="' . $href . '">' . $email_config['reg'] . $code . '</a>';		db::table('user')->where(['id' => $userinfo['id']])->save(['email_token' => $code]);		db::exec("commit");		$addr = ['email' => $userinfo['email'], 'name' => $userinfo['email'], 'title' => $this->config['web_title'], 'content' => $content];		$email = new \ext\email();		$res = $email->sendemail($addr, $email_config);		if (isset($res[1]) && $res[1]) {			return true;		} else {			return false;		}	}	public function email_findpwd()	{		$email = iv("post.email", 'email', '邮箱格式错误');		$code = rand(111111, 999999);		if (MS_EMAIL == 1) {			session('verify_moble_findpwd', $code);			ajax($code, 1);			die;		}		$username = $email;		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (in_array('findpwd', $type_arr)) {		} else {			ajax('不支持的发送类型');		}		$content = str_replace("{code}", $code, $email_config['findpwd']);;		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('verify_moble_findpwd', $code);			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function moble_findpwd_pay()	{		$email = iv("post.email", 'email', '邮箱格式错误');		$verify = iv("post.verify", 'dw', '验证码格式错误');		if (!verify($verify, "1")) {			ajax('图形验证码错误');		}		$res = db::table('user')->where(['email' => $email])->find();		if (!$res) {			ajax($this->ajax_lang('邮箱不存在'));		}		$code = rand(111111, 999999);		if (MS_EMAIL == 1) {			session('verify_moble_findpwd_pay', $code);			ajax($code, 1);			die;		}		$username = $this->user['username'];		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (in_array('findpwd_pay', $type_arr)) {		} else {			ajax('不支持的发送类型');		}		$content = str_replace("{code}", $code, $email_config['findpwd_pay']);;		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('verify_moble_findpwd_pay', $code);			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function email_coinout()	{		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$email = $user['email'];		$code = rand(111111, 999999);		$time = session('email_verify_cnyout_time');		if (($time + 60 * 60) < time()) {			session('email_verify_coinout_ci', null);			session('email_verify_coinout_time', null);		}		$ci = session('email_verify_coinout_ci');		if ($ci > 3) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_EMAIL == 1) {			session('moble_verify_coinout', $code);			ajax($code, 1);			die;		}		$username = $this->user['username'];		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (!in_array('coinout', $type_arr)) {			ajax('不支持的发送类型');		}		$content = str_replace("{code}", $code, $email_config['coinout']);		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('moble_verify_coinout', $code);			session('email_verify_coinout_ci', ($ci + 1));			session('email_verify_coinout_time', time());			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function yidi()	{		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$email = $user['email'];		$code = rand(111111, 999999);		$time = session('email_verify_yidi_time');		if (($time + 60 * 60) < time()) {			session('email_verify_yidi_ci', null);			session('email_verify_yidi_time', null);		}		$ci = session('email_verify_yidi_ci');		if ($ci > 3) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_EMAIL == 1) {			session('moble_verify_yidi', $code);			session('email_verify_yidi_ci', ($ci + 1));			session('email_verify_yidi_time', time());			ajax($code, 1);			die;		}		$username = $this->user['username'];		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (!in_array('yidi', $type_arr)) {			ajax('不支持的发送类型');		}		$content = str_replace("{code}", $code, $email_config['yidi']);		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('moble_verify_yidi', $code);			session('email_verify_yidi_ci', ($ci + 1));			session('email_verify_yidi_time', time());			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function email_out()	{		if (!$this->userid) {			ajax($this->ajax_lang('请先登录'));		}		$code = rand(111111, 999999);		$verifyTime = session('email_out_verify_time');		if ($verifyTime) {			if (time() - $verifyTime > 600) {				session('email_out_verify_code', null);				session('email_out_verify_time', null);				session('email_out_verify_have', null);			}		}		$verifyHave = session('email_out_verify_have');		if ($verifyHave) {			ajax($this->ajax_lang('请勿频繁点击'));		}		$email = db::table('user')->where(['id' => $this->userid])->find('email');		$email_config = md('user')->email_config();		$content = str_replace("{code}", $code, $email_config['out']);		$username = $this->user['username'];		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (!in_array('coinout', $type_arr)) {			ajax('不支持的发送类型');		}		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('email_out_verify_code', $code);			session('email_out_verify_time', time());			session('email_out_verify_have', 1);			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}} 