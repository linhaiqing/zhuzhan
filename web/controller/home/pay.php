<?phpnamespace home;use Move\db;class pay extends home{	protected $pay_id;	protected $pay_data;	public function __construct()	{		parent::__construct();		if (config("action_name") != "movepay") {			$_GET['ajax'] = 1;			$orderno = "";			$pay_id = isset($_GET['id']) ? intval(trim($_GET['id'])) : (isset($_POST['id']) ? intval(trim($_POST['id'])) : "");			if (!$pay_id) {				if (empty($_POST)) {					$xml = file_get_contents('php://input');					$_POST = $this->parseXML($xml);				}				if (isset($_POST['BillNo'])) {					$orderno = trim($_POST['BillNo']);				}				if (isset($_POST['orderNo'])) {					$orderno = trim($_POST['orderNo']);				}				if (isset($_POST['order_no'])) {					$orderno = trim($_POST['order_no']);				}				if (isset($_POST['merOrderId'])) {					$orderno = trim($_POST['merOrderId']);				}				if (isset($_POST['r6_Order'])) {					$orderno = trim($_POST['r6_Order']);				}				if (isset($_POST['merchantOutOrderNo'])) {					$orderno = trim($_POST['merchantOutOrderNo']);				}				if (isset($_POST['out_trade_no'])) {					$orderno = trim($_POST['out_trade_no']);				}				if (isset($_POST['merOrderNum']) || isset($_GET['merOrderNum'])) {					if (isset($_POST['merOrderNum'])) {						$orderno = trim($_POST['merOrderNum']);					} else {						$_POST = $_GET;						$orderno = trim($_POST['merOrderNum']);					}				}				if (isset($_POST['encryptKey'])) {					$jifuzf = new \ext\pay\jifuzf();					$josn_comm = $_POST;					if (!empty($josn_comm)) {						$bacommand = base64_decode($josn_comm['encryptKey']);						$key = $jifuzf->rsa_decrypt($bacommand);						$body = json_decode($jifuzf->AEScode($josn_comm['body'], $key, "DE"), true);						$orderno = @$body['data']['customerid'];					}				}				if (!check($orderno, "dw")) {					show_msg("订单号码格式错误");				}			}			if ($pay_id || $orderno) {				$this->cnyin = "";				if ($pay_id) {					$this->cnyin = md('finan_pay')->get_info($pay_id);				}				if (!$this->cnyin) {					$this->cnyin = db::table("finan_pay")->where(['tradeno' => $orderno])->find();				}				if (!$this->cnyin) {					show_msg("pay_id or orderno err!");				}				if ($this->cnyin['tradeno'] != "系统") {					if ($orderno) {						$this->cnyin = db::table('finan_pay')->where(["tradeno" => $orderno])->find();					}					if (!$this->cnyin) {						show_msg('充值订单错误');					}					$this->cnyin_type = db::table('finan_type')->where(['name' => $this->cnyin['type']])->find();					if (!$this->cnyin_type) {						show_msg('充值方式错误');					}					$this->pay_data = ["pay_id" => $this->cnyin['id'], "name" => $this->cnyin_type['name'], "type" => $this->cnyin_type['type'], "title" => '平台充值,单号:' . $this->cnyin['tradeno'], "orderno" => $this->cnyin['tradeno'], "amount" => $this->cnyin['num'], "auth_data" => ["username" => $this->cnyin_type['username'], "password" => $this->cnyin_type['password'], "value" => $this->cnyin_type['value'],],];				} else {					$this->cnyin_type = [];				}			}		}	}	public function index()	{		$ty = iv('get.ty');		$this->assign('ty', $ty);		$this->assign('id', @intval($_GET['id']));		if (isset($this->cnyin_type['type']) && $this->cnyin_type['type'] == "online") {			$this->assign("pay_host", $this->pay_data['auth_data']['value']);			$type_map = ["aiyi", "ailong", "saoma", "huarong", "wftsaoma", 'yinqihulian', 'ipay', 'jifuzf'];			if (in_array(trim($this->pay_data['name']), $type_map)) {				$this->display($this->pay_data['name']);			} else {				$this->display("online");			}		} else {			$this->display();		}	}	public function movepay()	{		@file_put_contents(config("MS_CACHE") . "/log/movepay.txt", var_export($_POST, true) . PHP_EOL, FILE_APPEND);		if (!empty($_POST)) {			$arr = explode('--', $_POST['alipay']);			$tradeno = trim(str_replace(PHP_EOL, '', $arr[0]));			$num = trim(str_replace(PHP_EOL, '', $arr[1]));			$movepay = trim(str_replace(PHP_EOL, '', $arr[2]));			$hash = trim(str_replace(PHP_EOL, '', $arr[3]));			if (md5($tradeno . $num . $movepay . 'sd4fg5ds4fg54ds5g') != $hash) {			}			if (strstr($tradeno, '付款-')) {				$tradeno = str_replace('付款-', '', $tradeno);			}			@$arr = explode("--", $tradeno);			if (count($arr) == 3) {				if (check(strtoupper(trim($arr['0'])), "WD")) {					$tradeno = strtoupper(trim($arr['0']));					$num = trim($arr['1']);					$movepay = trim($arr['2']);				}			}			echo md("finan")->movepay($tradeno, $num, $movepay);			die();		}	}	public function online()	{		debug($this->pay_data, "pay_data");		$payObj = new \ext\pay($this->pay_data);		$payObj->sumbit();	}	public function check_orderno()	{		ajax($this->cnyin['status'], 1);	}	public function return_url()	{		$payObj = new \ext\pay($this->pay_data);		$payObj->return_url();		$this->PayReturn = config("PayReturn");		if (!$_POST || !$this->PayReturn['orderno']) {			ajax("error");		}		$this->display();	}	public function notify_url()	{		$payObj = new \ext\pay($this->pay_data);		$payObj->notify_url();	}	public function parseXML($xmlSrc)	{		if (empty($xmlSrc)) {			return false;		}		$array = array();		$xml = simplexml_load_string($xmlSrc);		$encode = $this->getXmlEncode($xmlSrc);		if ($xml && $xml->children()) {			foreach ($xml->children() as $node) {				if ($node->children()) {					$k = $node->getName();					$nodeXml = $node->asXML();					$v = substr($nodeXml, strlen($k) + 2, strlen($nodeXml) - 2 * strlen($k) - 5);				} else {					$k = $node->getName();					$v = (string)$node;				}				if ($encode != "" && $encode != "UTF-8") {					$k = iconv("UTF-8", $encode, $k);					$v = iconv("UTF-8", $encode, $v);				}				$array[$k] = $v;			}		}		return $array;	}	public function getXmlEncode($xml)	{		$ret = preg_match("/<?xml[^>]* encoding=\"(.*)\"[^>]* ?>/i", $xml, $arr);		if ($ret) {			return strtoupper($arr[1]);		} else {			return "";		}	}}