<?phpnamespace home;use Move\db;use Move\ext\page;class exchange1 extends home{	public function __construct()	{		parent::__construct();	}	public function index()	{		$this->set_title('交易首页');		$trade_url = "/trade/index";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';			$this->coin = $this->coin_list[$this->xnb];		}		$goole = 0;		if ($this->userid) {			if ($this->user['google']) {				$arr = explode('|', $this->user['google']);				if ($arr[3]) {					$goole = 1;				} else {					$goole = 0;				}			}		} else {			$goole = '';		}		$this->assign('goole', $goole);		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		if (!$trade_qu = mc('index_trade_qu')) {			$trade_qu = db::table('trade_qu')->where(['status' => 1])->order('sort asc ,id asc')->select();			mc('index_trade_qu', $trade_qu);		}		$this->assign('trade_qu', $trade_qu);		$this->display();	}	public function index_json()	{		$market = iv('get.market', 'w_', '', 1);		if (empty($market) || !$this->market_list[$market]) {			exit();		}		$market_arr = explode("_", $market);		if (!is_array($market_arr)) {			exit();		}		$xnb = $market_arr[0];		$rmb = $market_arr[1];		$round = $this->coin_list[$xnb]['round'];		$data = [];		foreach ($this->market_list as $k => $v) {			$tmp_xnb = explode("_", $k)[0];			$data['menu'][$k]['price'] = num($v['new_price'], $this->coin_list[$tmp_xnb]['round']);		}		$mymz_trade = new \mymc\trade();		$market_data = $mymz_trade->market_find($market);		if ($market_data) {			$data['top'] = [num($market_data['new_price'], $round), num($market_data['buy_price'], $round), num($market_data['sell_price'], $round), num($market_data['min_price'], $round), num($market_data['max_price'], $round), num($market_data['volume'], (8 - $round)), num($market_data['change'], 2)];		} else {			$data['top'] = [];		}		$buy = $mymz_trade->buy_list($market);		$sell = array_reverse($mymz_trade->sell_list($market));		while (true) {			if (empty($buy) || empty($sell)) {				break;			}			$b_top = array_shift($buy);			$a_buttom = array_pop($sell);			if ($a_buttom["price"] > $b_top["price"]) {				if (abs(floatval($a_buttom["price"]) - floatval($b_top["price"])) > floatval(1 / pow(10, 7))) {					$sell[] = $a_buttom;					array_unshift($buy, $b_top);					break;				}			}		}		if ($buy) {			foreach ($buy as $k => $v) {				$data['depth']['b'][$k] = [num($v['price'], $round), num($v['nums'], (8 - $round))];			}		} else {			$data['depth']['b'] = 'no';		}		if ($sell) {			foreach ($sell as $k => $v) {				$data['depth']['s'][$k] = [num($v['price'], $round), num($v['nums'], (8 - $round))];			}		} else {			$data['depth']['s'] = 'no';		}		if (session('userid')) {			$trade = db::table("trade")->where(["market" => $market, "userid" => session('userid'), "status" => 0])->order("`id` DESC")->limit(10)->select();			if ($trade) {				foreach ($trade as $k => $v) {					$data['order'][$k] = [addtime($v['addtime']), $v['type'], num($v['price'], $round), num($v['num'], (8 - $round)), num($v['deal'], (8 - $round)), $v['id'],];				}			}		}		$trade_trade_log = $mymz_trade->log_list($market);		$trade_log = $trade_trade_log;		if (is_array($trade_log) && $trade_log) {			foreach ($trade_log as $k => $v) {				$data['trades'][$k] = [addtime($v['addtime']), $v['type'], num($v['price'], $round), num($v['num'], (8 - $round)), num($v['mum'], (8)),];			}		}		if (session('userid')) {			$user_coin = db::table("user_coin")->where(['userid' => $this->userid])->find();			if ($user_coin) {				$data['finance'] = [$user_coin[$rmb] * 1, $user_coin[$rmb . 'd'] * 1, $user_coin[$xnb] * 1, $user_coin[$xnb . 'd'] * 1,];			}		}		exit(json_encode($data));	}	public function up()	{		$this->check_up('交易');		$paypassword = iv('post.paypassword', 'password', $this->ajax_lang('交易密码格式错误'), 1);		$market = iv('post.market', 'w_', $this->ajax_lang('交易市场格式错误'));		$price = iv('post.price', 'double', $this->ajax_lang('交易价格格式错误'));		$num = iv('post.num', 'double', $this->ajax_lang('交易数量格式错误'));		$type = iv('post.type', 'd', $this->ajax_lang('交易方式格式错误'));		$goole = iv('post.goole', 'd', $this->ajax_lang('谷歌验证码格式错误'), 1);		$user = db::table("user")->where(["id" => $this->userid])->find();		if (defined('Domain') && (Domain == 1)) {			$checkNum = $num * 10;			if (floor($checkNum) != $checkNum) {				$this->ajax('数量小数点位数不能超过一位');			}		}		if (isset($user['trade_sh']) && $user['trade_sh'] == 1) {			ajax($this->ajax_lang('您的账户没有通过审核暂时不能交易'));		}		if ($this->config['mr_index'] != 'd') {			if ($user['tpwdsetting'] == 3) {			}			if ($user['tpwdsetting'] == 2) {				if (!check($paypassword, 'password')) {					ajax($this->ajax_lang('交易密码格式错误'));				}				if (hashs($paypassword) != $user['paypassword']) {					ajax($this->ajax_lang('交易密码错误'));				}			}			if ($user['tpwdsetting'] == 1) {				if (!session($user['id'] . 'tpwdsetting')) {					if (!check($paypassword, 'password')) {						ajax($this->ajax_lang('交易密码格式错误'));					}					if (hashs($paypassword) != $user['paypassword']) {						ajax($this->ajax_lang('交易密码错误'));					} else {						session($user['id'] . 'tpwdsetting', 1);					}				}			}		}		if ($user['google']) {			$arr = explode('|', $user['google']);			if ($arr[3]) {				$ga = md('user')->google();				if (!$ga->verifyCode($arr[0], $goole, 1)) {					ajax($this->ajax_lang('谷歌验证失败'));				}			}		}		$res = md('trade')->guadan($this->userid, $market, $price, $num, $type);		if (isset($res[1])) {			$mymz_trade = new \mymc\trade();			$mymz_trade->clear_mr($market);			mc('ajax_index_b_trends', null);			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function depth()	{		$this->set_title('交易行情');		$trade_url = "/trade/depth";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$this->display();	}	public function depth_json()	{		$market = iv('get.market', 'w_', '', 1);		if ($market) {			$mymz_trade = new \mymc\trade();			$depth_data = $mymz_trade->depth_data($market);			if (isset($depth_data['buy']) && $depth_data['buy']) {				$maxNums = $this->maxArrayKey($depth_data['buy'], 'nums') / 2;				$tmp = '';				foreach ($depth_data['buy'] as $k => $v) {					$tmp .= '<tr><td class="buy"  width="50">买' . ($k + 1) . '</td><td class="buy"  width="80">' . floatval($v['price']) . '</td><td class="buy"  width="120">' . floatval($v['nums']) . '</td><td  width="100"><span class="buySpan" style="width: ' . ((($v['nums'] > $maxNums) ? $maxNums : $v['nums']) / $maxNums * 100) . 'px;" ></span></td></tr>';				}				$data[0] = $tmp;			} else {				$data[0] = [];			}			if (isset($depth_data['sell']) && $depth_data['sell']) {				$maxNums = $this->maxArrayKey($depth_data['sell'], 'nums') / 2;				$tmp = '';				foreach ($depth_data['sell'] as $k => $v) {					$tmp .= '<tr><td class="sell"  width="50">卖' . ($k + 1) . '</td><td class="sell"  width="80">' . floatval($v['price']) . '</td><td class="sell"  width="120">' . floatval($v['nums']) . '</td><td style="width: 100px;"><span class="sellSpan" style="width: ' . ((($v['nums'] > $maxNums) ? $maxNums : $v['nums']) / $maxNums * 100) . 'px;" ></span></td></tr>';				}				$data[1] = $tmp;			} else {				$data[1] = [];			}			if (isset($depth_data['log']) && $depth_data['log']) {				$tmp = '';				foreach ($depth_data['log'] as $k => $v) {					if ($v['type'] == 1) {						$type = 'buy';					} else {						$type = 'sell';					}					$tmp .= '<tr><td class="' . $type . '"  width="70">' . (date('H:i:s', $v['addtime'])) . '</td><td class="' . $type . '"  width="70">' . floatval($v['price']) . '</td><td class="' . $type . '"  width="100">' . floatval($v['num']) . '</td><td class="' . $type . '">' . floatval($v['mum']) . '</td></tr>';				}				$data[2] = $tmp;			} else {				$data[2] = [];			}			exit(json_encode($data));		}	}	public function info()	{		$this->set_title('了解币种');		$trade_url = "/trade/info";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		if ($this->xnb) {			$js_sm = $this->coin_list[$this->xnb]['js_sm'];		} else {			$js_sm = '';		}		$this->assign('js_sm', $js_sm);		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$coinlink_list = db::table('coin_link')->where(['status' => 1, 'name' => $this->xnb])->order('sort asc ,id desc')->select();		$this->assign('coinlink_list', $coinlink_list);		$this->display();	}	public function discu()	{		$this->set_title('评价币种');		$trade_url = "/trade/discu";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		$aaa = 0;		if ($this->xnb) {			if ($this->coin_list[$this->xnb]['tp_zs']) {				$aaa = ($this->coin_list[$this->xnb]['tp_js'] / $this->coin_list[$this->xnb]['tp_zs'] + $this->coin_list[$this->xnb]['tp_yy'] / $this->coin_list[$this->xnb]['tp_zs'] + $this->coin_list[$this->xnb]['tp_qj'] / $this->coin_list[$this->xnb]['tp_zs']) / 3;			} else {				$aaa = 0;			}		}		$bba = $aaa - 0;		$bbb = $aaa - 1;		$bbc = $aaa - 2;		$bbd = $aaa - 3;		$bbe = $aaa - 4;		$this->assign('aaa', $aaa);		$this->assign('bba', $bba);		$this->assign('bbb', $bbb);		$this->assign('bbc', $bbc);		$this->assign('bbd', $bbd);		$this->assign('bbe', $bbe);		if ($this->xnb && $this->coin_list[$this->xnb]['tp_zs']) {			$jishu = num($this->coin_list[$this->xnb]['tp_js'] / $this->coin_list[$this->xnb]['tp_zs'], 2);			$yingyong = num($this->coin_list[$this->xnb]['tp_yy'] / $this->coin_list[$this->xnb]['tp_zs'], 2);			$qianjing = num($this->coin_list[$this->xnb]['tp_qj'] / $this->coin_list[$this->xnb]['tp_zs'], 2);		} else {			$jishu = 0;			$yingyong = 0;			$qianjing = 0;		}		$this->assign('jishu', $jishu);		$this->assign('yingyong', $yingyong);		$this->assign('qianjing', $qianjing);		$wheres['coinname'] = $this->xnb;		$count = db::table("coin_discu")->where($wheres)->count();		$PageObj = new page($count, 12);		$show = $PageObj->show();		$list = db::table("coin_discu")->where($wheres)->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		$pages = ['show' => $show, 'list' => $list];		$trade_discu_page = $pages;		$this->assign('pages', $trade_discu_page);		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$this->display();	}	public function chart()	{		$this->set_title('全屏交易');		$trade_url = "/trade/chart";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$this->display();	}	protected function maxArrayKey($arr, $key)	{		$a = 0;		foreach ($arr as $k => $v) {			$a = max($v[$key], $a);		}		return $a;	}	public function new_json()	{		$limit = iv('get.limit', 'd', '', 1);		if (!$limit) {			$limit = 6;		}		$market = iv('get.market', 'w_', '', 1);;		if (!$market) {			die();		}		$market_arr = explode("_", $market);		if (!is_array($market_arr)) {			exit();		}		$xnb = $market_arr[0];		$rmb = $market_arr[1];		$buy = md('trade')->buy_list($market, $limit);		if ($buy) {			foreach ($buy as $k => $v) {				$data['b'][$k] = [num($v['price'], 5), num($v['nums'], 3)];			}		} else {			$data['b'] = 'no';		}		$sell = array_reverse(md('trade')->sell_list($market, $limit));		if ($sell) {			foreach ($sell as $k => $v) {				$data['s'][$k] = [num($v['price'], 5), num($v['nums'], 3)];			}		} else {			$data['s'] = 'no';		}		$log = md('trade')->log_list($market, 200);		if ($log) {			foreach ($log as $k => $v) {				$data['l'][$k] = [addtime($v['addtime'], 'H:i:s'), $v['type'], num($v['price'], 5), num($v['num'], 3), num($v['mum'], 6)];			}		} else {			$data['l'] = 'no';		}		if (session('userid') > 0) {			$myw = md('trade')->my_list($market, session('userid'), 100);			if ($myw) {				foreach ($myw as $k => $v) {					$data['w'][$k] = [addtime($v['addtime'], 'H:i:s'), $v['type'], num($v['price'], 5), num($v['num'], 3), num($v['deal'], 3), $v['id'], num($v['fee'], 5)];				}			} else {				$data['w'] = 'no';			}			$user = db::table("user")->where(["id" => session('userid')])->find();			$user_coin = db::table("user_coin")->where(['userid' => $this->userid])->find();			if ($user_coin) {				$data['f'] = [num($user_coin[$rmb], $this->coin_list[$rmb]['round']), num($user_coin[$rmb . 'd'], $this->coin_list[$rmb]['round']), num($user_coin[$xnb], $this->coin_list[$xnb]['round']), num($user_coin[$xnb . 'd'], $this->coin_list[$xnb]['round']), num($user['zzc'], 2),];			}		}		$data['t'] = [num($this->market_list[$market]['new_price'], 5), num($this->market_list[$market]['buy_price'], 5), num($this->market_list[$market]['sell_price'], 5), num($this->market_list[$market]['min_price'], 5), num($this->market_list[$market]['max_price'], 5), num($this->market_list[$market]['volume'], 3), num($this->market_list[$market]['change'], 2)];		exit(json_encode($data));	}	public function tpwdsetting()	{		if ($this->userid) {			$user = db::table("user")->where(["id" => $this->userid])->find();			echo $user['tpwdsetting'];			die;		}	}	public function uptpwdsetting()	{		$paypassword = iv('post.paypassword', 'password', $this->ajax_lang('交易密码格式错误'));		$tpwdsetting = iv('post.tpwdsetting', 'd', $this->ajax_lang('设置参数格式错误'));		($tpwdsetting != 1 && $tpwdsetting != 2 && $tpwdsetting != 3) && ajax($this->ajax_lang('请选择方式'));		$user = db::table("user")->where(["id" => $this->userid])->find();		if (hashs($paypassword) != $user['paypassword']) {			ajax($this->ajax_lang('交易密码错误'));		}		$res = md('user')->set_tpwdsetting($user['id'], $paypassword, $tpwdsetting);		if (isset($res[1])) {			ajax($this->ajax_lang($res[0]), 1);		} else {			ajax($this->ajax_lang($res[0]));		}	}	public function library()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function ordinary()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function ordinary_json()	{		$market = iv('get.market', 'w_', '', 1);		$time = iv('get.time', 'd', '', 1);		$timearr = [1, 3, 10, 15, 30, 60, 120, 240, 360, 720, 1440, 10080];		if (!in_array($time, $timearr)) {			$time = 5;		}		$json_data = mc('trade_ordinary_json' . $market . $time);		if (!$json_data) {			$tradeJson = db::table("trade_json")->where(["market" => $market, "type" => $time, "data#!=" => ""])->order("addtime desc")->limit(100)->select();			krsort($tradeJson);			$json_data = [];			if ($tradeJson) {				foreach ($tradeJson as $k => $v) {					$json_data[] = json_decode($v['data'], true);				}				mc('trade_ordinary_json' . $market . $time, $json_data);			}		}		if ($json_data) {			exit(json_encode($json_data));		}	}	public function depthlink()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function get_depth_json()	{		$market = iv('get.market', 'w_', '', 1);		$trade_moshi = iv('get.trade_moshi', 'd', '', 1);		$data = [];		if ($trade_moshi == 3) {			$buy = db::query('select id,price,sum(num-deal)as nums from move_trade  where status=0 and type=1 and market =\'' . $market . '\' group by price order by price desc limit 100;');			if ($buy) {				foreach ($buy as $k => $v) {					$data['depth']['buy'][] = [floatval($v['price']), floatval($v['nums'])];				}			}		} else {			$sell = db::query('select id,price,sum(num-deal)as nums from move_trade where status=0 and type=2 and market =\'' . $market . '\' group by price order by price asc limit 100;');			if ($sell) {				foreach ($sell as $k => $v) {					$data['depth']['sell'][] = [floatval($v['price']), floatval($v['nums'])];				}			}		}		echo json_encode($data);		die;	}	public function chart_json()	{		$market = iv('get.market', 'w_', '', 1);		if (empty($market) || !$this->market_list[$market]) {			exit();		}		$market_arr = explode("_", $market);		if (!is_array($market_arr)) {			exit();		}		$xnb = $market_arr[0];		$rmb = $market_arr[1];		$round = $this->coin_list[$xnb]['round'];		$data = [];		foreach ($this->market_list as $k => $v) {			$tmp_xnb = explode("_", $k)[0];			$data['menu'][$k]['price'] = num($v['new_price'], $this->coin_list[$tmp_xnb]['round']);		}		$mymz_trade = new \mymc\trade();		$market_data = $mymz_trade->market_find($market);		$data['top'] = [num($market_data['new_price'], $round), num($market_data['buy_price'], $round), num($market_data['sell_price'], $round), num($market_data['min_price'], $round), num($market_data['max_price'], $round), num($market_data['volume'], (8 - $round)), num($market_data['change'], 2)];		$buy = $mymz_trade->buy_list($market, 20);		$sell = array_reverse($mymz_trade->sell_list($market, 20));		while (true) {			if (empty($buy) || empty($sell)) {				break;			}			$b_top = array_shift($buy);			$a_buttom = array_pop($sell);			if ($a_buttom["price"] > $b_top["price"]) {				if (abs(floatval($a_buttom["price"]) - floatval($b_top["price"])) > floatval(1 / pow(10, 7))) {					$sell[] = $a_buttom;					array_unshift($buy, $b_top);					break;				}			}		}		foreach ($buy as $k => $v) {			$data['buy'][$k] = [num($v['price'], $round), num($v['nums'], (8 - $round))];		}		foreach ($sell as $k => $v) {			$data['sell'][$k] = [num($v['price'], $round), num($v['nums'], (8 - $round))];		}		if (session('userid')) {			$trade = db::table("trade")->where(["market" => $market, "userid" => session('userid'), "status" => 0])->order("`id` DESC")->limit(10)->select();			if ($trade) {				foreach ($trade as $k => $v) {					$data['order'][$k] = [addtime($v['addtime']), $v['type'], num($v['price'], $round), num($v['num'], (8 - $round)), num($v['deal'], (8 - $round)), $v['id'],];				}			}			$user = db::table("user")->where(["id" => session('userid')])->find();			$user_coin = db::table("user_coin")->where(['userid' => $this->userid])->find();			if ($user_coin) {				$data['finance'] = [$user_coin[$rmb] * 1, $user_coin[$rmb . 'd'] * 1, $user_coin[$xnb] * 1, $user_coin[$xnb . 'd'] * 1, $user['zzc'] * 1,];			}		}		$trade_log = $mymz_trade->log_list($market);		if ($trade_log) {			foreach ($trade_log as $k => $v) {				$data['log'][$k] = [$v['addtime'] * 1000, $v['type'], num($v['price'], $round), num($v['num'], (8 - $round)), num($v['mum'], (8)),];			}		}		exit(json_encode($data));	}	public function specialty()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function getMarketSpecialtyJson()	{		$market = iv('get.market', 'w_', '', 1);		$step = iv('get.step', 'd', '', 1);		$timearr = [1, 3, 5, 10, 15, 30, 60, 120, 240, 360, 720, 1440, 10080];		if (in_array($step / 60, $timearr)) {			$time = $step / 60;		} else {			$time = 5;		}		$tradeJson = md('trade')->json_list($market, $time, 500);;		$json_data = [];		foreach ($tradeJson as $k => $v) {			$json_data[] = json_decode($v['data'], true);		}		$data = [];		foreach ($json_data as $k => $v) {			$data[$k][0] = $v[0];			$data[$k][1] = 0;			$data[$k][2] = 0;			$data[$k][3] = $v[2];			$data[$k][4] = $v[5];			$data[$k][5] = $v[3];			$data[$k][6] = $v[4];			$data[$k][7] = $v[1];		}		ksort($data);		foreach ($data as $key => $value) {			$id[$key] = $value[0];		}		array_multisort($id, SORT_STRING, SORT_ASC, $data);		exit(json_encode($data));	}	public function getSpecialtyTrades()	{		$market = iv('get.market', 'w_', '', 1);		$since = iv('get.since', 'd', '', 1);		$json_data = [];		if (!$since) {			$tradeLog = db::table('trade_log')->where(['market' => $market])->order('id desc')->find();			$json_data[] = ['tid' => $tradeLog['id'], 'date' => $tradeLog['addtime'], 'price' => $tradeLog['price'], 'amount' => $tradeLog['num'], 'trade_type' => $tradeLog['type'] == 1 ? 'bid' : 'ask'];			exit(json_encode($json_data));		} else {			$tradeLog = db::table('trade_log')->where(['market' => $market, 'id#>' => $since])->order('id desc')->select();			foreach ($tradeLog as $k => $v) {				$json_data[] = ['tid' => $v['id'], 'date' => $v['addtime'], 'price' => $v['price'], 'amount' => $v['num'], 'trade_type' => $v['type'] == 1 ? 'bid' : 'ask'];			}			if ($json_data) {				exit(json_encode($json_data));			}		}	}	public function info_json()	{		$market = iv('get.market', 'w_', '', 1);		if (empty($market) || !$this->market_list[$market]) {			exit();		}		$market_arr = explode("_", $market);		if (!is_array($market_arr)) {			exit();		}		$xnb = $market_arr[0];		$rmb = $market_arr[1];		$round = $this->coin_list[$xnb]['round'];		$data = [];		foreach ($this->market_list as $k => $v) {			$tmp_xnb = explode("_", $k)[0];			$data['menu'][$k]['price'] = num($v['new_price'], $this->coin_list[$tmp_xnb]['round']);		}		$data['top'] = [num($this->market_list[$market]['new_price'], $round), num($this->market_list[$market]['buy_price'], $round), num($this->market_list[$market]['sell_price'], $round), num($this->market_list[$market]['min_price'], $round), num($this->market_list[$market]['max_price'], $round), num($this->market_list[$market]['volume'], (8 - $round)), num($this->market_list[$market]['change'], 2)];		exit(json_encode($data));	}	public function upcomment()	{		$msgaaa = iv('post.msgaaa', 'a', $this->ajax_lang('评价内容格式错误'));		$s1 = iv('post.s1', 'd', $this->ajax_lang('技术评分格式错误'));		$s2 = iv('post.s2', 'd', $this->ajax_lang('应用评分格式错误'));		$s3 = iv('post.s3', 'd', $this->ajax_lang('前景评分格式错误'));		$xnb = iv('post.xnb', 'w', $this->ajax_lang('币种格式错误'));		if (empty($msgaaa)) {			ajax($this->ajax_lang('提交内容错误'));		}		if (!check($s1, 'd')) {			ajax($this->ajax_lang('技术评分错误'));		}		if (!check($s2, 'd')) {			ajax($this->ajax_lang('应用评分错误'));		}		if (!check($s3, 'd')) {			ajax($this->ajax_lang('前景评分错误'));		}		if (!$this->userid) {			ajax($this->ajax_lang('请先登录'));		}		if (db::table('coin_discu')->where(['userid' => $this->userid, 'coinname' => $xnb, 'addtime#>' => (time() - 60)])->find()) {			ajax($this->ajax_lang('请不要频繁提交'));		}		if (db::table('coin')->where(['name' => $xnb])->set(['tp_zs#+' => 1, 'tp_js#+' => $s1, 'tp_yy#+' => $s2, 'tp_qj#+' => $s3])) {			if (db::table('coin_discu')->add(['userid' => $this->userid, 'coinname' => $xnb, 'content' => $msgaaa, 'addtime' => time(), 'status' => 1,])) {				ajax($this->ajax_lang('操作成功'), 1);			} else {				ajax($this->ajax_lang('操作失败'));			}		} else {			ajax($this->ajax_lang('操作失败'));		}	}	public function subcomment()	{		$id = iv('post.id', 'd', '', 1);		$type = iv('post.type', 'd', '', 1);		if ($type != 1) {			if ($type != 2) {				if ($type != 3) {					ajax($this->ajax_lang('参数错误'));				} else {					$type = 'xcd';				}			} else {				$type = 'tzy';			}		} else {			$type = 'cjz';		}		if (!check($id, 'd')) {			ajax('参数错误1');		}		if (!$this->userid) {			ajax($this->ajax_lang('请先登录'));		}		if (db::table('coin_discu')->where(['id' => $id])->setInc($type, 1)) {			ajax($this->ajax_lang('操作成功'), 1);		} else {			ajax($this->ajax_lang('操作失败'));		}	}	public function chexiao()	{		if (!$this->userid) {			ajax('请先登录');		}		$id = iv('post.id', 'd', $this->ajax_lang('请选择要撤销的委托'));		$trade = db::table('trade')->where(['id' => $id])->find();		if (!$trade) {			ajax($this->ajax_lang('撤销委托参数错误'));		}		if ($trade['userid'] != $this->userid) {			ajax($this->ajax_lang('参数操作'));		}		if ($trade['status'] != 0) {			ajax($this->ajax_lang('当前订单不能撤销'));		}		$res = md('trade')->chexiao($id);		if (isset($res[1])) {			mc('mymc_trade_buy_list' . $trade['market'] . '10', null);			mc('mymc_trade_sell_list' . $trade['market'] . '10', null);			mc('mymc_trade_buy_list' . $trade['market'] . '20', null);			mc('mymc_trade_sell_list' . $trade['market'] . '20', null);			mc('mymc_trade_buy_list' . $trade['market'] . '100', null);			mc('mymc_trade_sell_list' . $trade['market'] . '100', null);			ajax($this->ajax_lang('操作成功'), 1);		} else {			ajax($this->ajax_lang('操作失败'));		}	}	public function trades()	{		$this->set_title('委托管理');		$trade_url = "/trade/trades";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		if ($this->xnb) {			$js_sm = $this->coin_list[$this->xnb]['js_sm'];		} else {			$js_sm = '';		}		$this->assign('js_sm', $js_sm);		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$coinlink_list = db::table('coin_link')->where(['status' => 1, 'name' => $this->xnb])->order('sort asc ,id desc')->select();		$this->assign('coinlink_list', $coinlink_list);		$this->type = mrz(iv('get.type', 'd', $this->ajax_lang('类型错误'), true), null);		$this->status = mrz(iv('get.status', 'd', $this->ajax_lang('状态错误'), true), null);		if (session('userid')) {			$where['userid'] = $this->userid;			if ($this->market) {				$where['market'] = $this->market;			}			if ($this->type > 0) {				$where['type'] = $this->type;			}			if ($this->status > 0) {				$where['status'] = $this->status - 1;			}			$count = db::table('trade')->where($where)->count();			$page_obj = new page($count, 20);			$show = $page_obj->show();			$list = db::table('trade')->where($where)->order('`sort` asc ,id desc')->limit($page_obj->firstRow, $page_obj->listRows)->select();		} else {			$show = [];			$list = [];		}		$this->pages = ["list" => $list, "show" => $show];		$this->display();	}	public function order()	{		$this->set_title('成交记录');		$trade_url = "/trade/order";		$this->assign('trade_url', $trade_url);		$this->market = iv('get.market', 'w_', '', 1);		if (empty($this->market) || !$this->market_list[$this->market]) {			$this->market = $this->config['mr_market'];		}		if (!$this->market && $this->market_list) {			$this->market = reset($this->market_list)['name'];		}		if ($this->market) {			if (!$this->market_list[$this->market]['status']) {				ajax($this->ajax_lang('交易市场禁止访问') . $this->market);			}		}		$market_arr = explode("_", $this->market);		if (!is_array($market_arr)) {			ajax($this->ajax_lang('交易市场设置错误') . $this->market);		}		if ($market_arr) {			$this->xnb = isset($market_arr[0]) ? $market_arr[0] : '';			$this->rmb = isset($market_arr[1]) ? $market_arr[1] : '';		}		if ($this->xnb) {			$js_sm = $this->coin_list[$this->xnb]['js_sm'];		} else {			$js_sm = '';		}		$this->assign('js_sm', $js_sm);		$mymz_trade = new \mymc\trade();		$this->assign('menu', $mymz_trade->daohang());		$coinlink_list = db::table('coin_link')->where(['status' => 1, 'name' => $this->xnb])->order('sort asc ,id desc')->select();		$this->assign('coinlink_list', $coinlink_list);		$this->type = mrz(iv('get.type', 'd', $this->ajax_lang('类型错误'), true), null);		$this->status = mrz(iv('get.status', 'd', $this->ajax_lang('状态错误'), true), null);		if ($this->market) {			$where['market'] = $this->market;		}		if ($this->type == 1) {			$where['userid'] = $this->userid;		} elseif ($this->type == 2) {			$where['peerid'] = $this->userid;		} else {			$where['userid|peerid'] = $this->userid;		}		if ($this->type > 0) {			$where['type'] = $this->type;		}		$count = db::table('trade_log')->where($where)->count();		$page_obj = new page($count, 20);		$show = $page_obj->show();		$list = db::table('trade_log')->where($where)->order('`sort` asc ,id desc')->limit($page_obj->firstRow, $page_obj->listRows)->select();		$this->pages = ["list" => $list, "show" => $show];		$this->display();	}	public function fenshi()	{		$this->set_title('分时图');		$market['name'] = iv('get.market', 'w_', '', 1);		if (!$market['name']) {			$market = db::table('trade_market')->where(["status" => 1])->find();		} else {			$market = db::table('trade_market')->where(["name" => $market['name']])->find();		}		$this->assign('market', $market);		$this->display();	}	public function config()	{		$market['name'] = iv('get.market', 'w_', '', 1);		if (!$market['name']) {			$market = db::table('trade_market')->where(["status" => 1])->find();		} else {			$market = db::table('trade_market')->where(["name" => $market['name']])->find();		}		$data = ['exchanges' => ['value' => $market['name'], 'name' => $market['name'], 'desc' => $market['title'],], 'symbols_types' => ['name' => $market['name'], 'value' => $market['name']], 'supported_resolutions' => ["1", "3", "5", "15", "30", "60", "120", "180", "240", "360", "720", "1D", "3D", "1W", "2W", "1M"], 'supports_group_request' => false, 'supports_marks' => false, 'supports_timescale_marks' => false, 'supports_search' => true, 'has_daily' => true, 'supports_time' => true, 'max_bars' => 10080];		exit(json_encode($data));	}	public function symbols()	{		$market['name'] = iv('get.market', 'w_', '', 1);		if (!$market['name']) {			$market = db::table('trade_market')->where(["status" => 1])->find();		} else {			$market = db::table('trade_market')->where(["name" => $market['name']])->find();		}		$data = ['name' => $market['title'], 'full_name' => $market['name'], 'symbol' => $market['name'], 'exchange' => "MOVESAY", 'exchange-traded' => "MOVESAY", 'exchange-listed' => "MOVESAY", 'timezone' => "UTC", 'pricescale' => 100, 'minmov' => 1, 'minmove2' => 0, 'has_intraday' => true, 'intraday_multipliers' => ["1", "5", "60", "1440"], 'has_daily' => true, 'has_weekly_and_monthly' => false, 'has_empty_bars' => false, 'force_session_rebuild' => false, 'has_no_volume' => false, 'has_fractional_volume' => false, 'ticker' => $market['name'], 'description' => "", 'session' => "24x7", 'data_status' => "streaming", 'supported_resolutions' => ["1", "3", "5", "15", "30", "60", "120", "180", "240", "360", "720", "1D", "3D", "1W", "2W", "1M"], 'type' => "bitcoin"];		exit(json_encode($data));	}	public function search()	{		$data[] = ['name' => ".XMRXBT", 'full_name' => ".XMRXBT", 'symbol' => ".XMRXBT", 'exchange' => "BITMEX", 'exchange-traded' => "BITMEX", 'exchange-listed' => "BITMEX", 'timezone' => "UTC", 'pricescale' => 10000000, 'minmov' => 1, 'minmove2' => 0, 'has_intraday' => true, 'intraday_multipliers' => ["1", "5", "60", "1440"], 'has_daily' => true, 'has_weekly_and_monthly' => false, 'has_empty_bars' => false, 'force_session_rebuild' => false, 'has_no_volume' => false, 'has_fractional_volume' => false, 'ticker' => ".XMRXBT", 'description' => ".XMRXBT=> Monero / Bitcoin index", 'session' => "24x7", 'data_status' => "streaming", 'supported_resolutions' => ["1", "3", "5", "15", "30", "60", "120", "180", "240", "360", "720", "1D", "3D", "1W", "2W", "1M"], 'type' => "bitcoin"];		exit(json_encode($data));	}	public function history()	{		$type = iv('get.resolution');		$str_time = iv('get.from');		$end_time = iv('get.to');		$market = iv('get.market');		$trade_json = db::table("trade_json")->where(["market" => $market, "type" => $type, "data#!=" => ""])->order("addtime desc")->select();		$data = [];		krsort($trade_json);		if ($trade_json) {			foreach ($trade_json as $k => $v) {				$tmp = json_decode($v['data'], true);				$data['c'][] = $tmp[5];				$data['h'][] = $tmp[3];				$data['l'][] = $tmp[4];				$data['o'][] = $tmp[2];				$data['v'][] = $tmp[1];				$data['t'][] = $tmp[0];			}			$data['s'] = 'ok';		}		exit(json_encode($data, JSON_NUMERIC_CHECK));	}	public function librarys()	{		$market['name'] = iv('get.market', 'w_', '', 1);		if (!$market['name']) {			$market = db::table('trade_market')->where(["status" => 1])->find();		} else {			$market = db::table('trade_market')->where(["name" => $market['name']])->find();		}		$trade_qu = db::table('trade_qu')->where(['status' => 1])->order('sort asc ,id asc')->select();		$layer = '';		if ($trade_qu) {			foreach ($trade_qu as $k => $v) {				$trade_market = db::table('trade_market')->where(['id#in' => explode(',', $v['data'])])->select();				if ($trade_market) {					foreach ($trade_market as $kk => $vv) {						$trade_qu[$k]['market_list'][$kk] = $vv;					}				}			}			foreach ($trade_qu as $k => $v) {				$layer .= '{title: "' . $v['title'] . '",content: \'';				foreach ($v['market_list'] as $kk => $vv) {					$layer .= '<a href="javascript:;" onclick="movesay_url(this)" data="/trade/fenshi/market/' . $vv['name'] . '"><img src="/upload/' . $vv['img'] . '" style="width: 18px;vertical-align: -4px;margin-right: 5px;">' . $vv['title'] . '</a>';				}				$layer .= '\'},';			}		}		$this->assign('trade_qu', $trade_qu);		$this->assign('layer', $layer);		$this->assign('market', $market);		$this->display();	}	public function statics()	{		$market['name'] = iv('get.market', 'w_', '', 1);		if (!$market['name']) {			$market = db::table('trade_market')->where(["status" => 1])->find();		} else {			$market = db::table('trade_market')->where(["name" => $market['name']])->find();		}		if (isset($_GET['tv']) && $_GET['tv'] == 'chart') {			echo file_get_contents("http://" . $_SERVER['HTTP_HOST'] . "/trade/librarys?market=" . $market['name']);		}		if (isset($_GET['s']) && strstr($_GET['s'], 'en.json')) {			echo file_get_contents(APP_PATH . '/static/default/home/js/trade/zh.json');		}		if (isset($_GET['s']) && strstr($_GET['s'], 'zh.json')) {			echo file_get_contents(APP_PATH . '/static/default/home/js/trade/zh.json');		}	}	public function kline_h()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function kline_h_depths()	{		header('Content-type: application/json;charset=utf-8');		$market = iv('get.depth', 'w_', '', 1);		$this->assign('market', $market);		$mymz_trade = new \mymc\trade();		$buy = $mymz_trade->buy_list($market, 100);		if ($buy) {			foreach ($buy as $k => $v) {				$data['bids'][] = [floatval($v['price']), floatval($v['nums'])];			}		} else {			$data['bids'] = [];		}		$sell = array_reverse($mymz_trade->sell_list($market, 100));		if ($sell) {			foreach ($sell as $k => $v) {				$data['asks'][] = [floatval($v['price']), floatval($v['nums'])];			}			if ($data['asks']) {				rsort($data['asks']);			}		} else {			$data['asks'] = [];		}		$data['date'] = time();		echo json_encode($data);		die;	}	public function kline_h_kline()	{		header('Content-type: application/json;charset=utf-8');		$type = iv('post.type', 'dw', '', 1);		if ($type == '1min') {			$type = 1;		} elseif ($type == '5min') {			$type = 5;		} elseif ($type == '15min') {			$type = 15;		} elseif ($type == '30min') {			$type = 30;		} elseif ($type == '1hour') {			$type = 60;		} elseif ($type == '1day') {			$type = 60 * 24;		} elseif ($type == '1week') {			$type = 60 * 24 * 7;		} elseif ($type == '3min') {			$type = 3;		} elseif ($type == '2hour') {			$type = 60 * 2;		} elseif ($type == '4hour') {			$type = 60 * 4;		} elseif ($type == '6hour') {			$type = 60 * 6;		} elseif ($type == '12hour') {			$type = 60 * 12;		} elseif ($type == '3day') {			$type = 60 * 24 * 3;		}		if (!$type) {			$type = 15;		}		$market = iv('post.symbol', 'w_', '', 1);		$this->assign('market', $market);		$data['datas']['DSCCNY'] = 6.5746;		$data['datas']['contractUnit'] = 'DSC';		$trade_json = mc('trade_kline_h_kline_json' . $market . $type);		if (!$trade_json) {			$trade_json = db::table("trade_json")->where(["market" => $market, "type" => $type, "data#!=" => ""])->order("addtime desc")->limit(1000)->select();			krsort($trade_json);			mc('trade_kline_h_kline_json' . $market . $type, $trade_json);		}		foreach ($trade_json as $k => $v) {			$tmp = json_decode($v['data'], true);			$data['datas']['data'][] = [$tmp[0] * 1000, floatval($tmp[2]), floatval($tmp[3]), floatval($tmp[4]), floatval($tmp[5]), floatval($tmp[1])];		}		$data['des'] = "";		$data['isSuc'] = true;		$data['marketName'] = 'MOVESAY';		$data['moneyType'] = 'cny';		$data['symbol'] = $market;		$data['url'] = "http://" . $_SERVER['HTTP_HOST'];		exit(json_encode($data));	}}