<?phpnamespace home;use Move\db;class verify extends home{	public function __construct()	{		parent::__construct();		defined('MS_SMS') or define('MS_SMS', 0);	}	public function code()	{		verify();	}	public function moble_reg()	{		$moble = iv("post.moble", 'd', '手机号码格式错误');		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax('国家编号错误');		}		$verify = iv("post.verify", 'dw', '验证码格式错误');		$type = iv("post.type", 'w', '发送方式错误');		if (!verify($verify, "1")) {			ajax('图形验证码错误');		} else {		}		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (isset($res[1])) {			ajax('手机号码已存在');		}		$code = rand(111111, 999999);		if (MS_SMS == 1) {			session('verify_moble_reg', $code);			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'reg');		if (isset($rs[1])) {			session('verify_moble_reg', $code);			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_findpwd()	{		$moble = iv("post.moble", 'd', '手机号码格式错误');		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax('国家编号错误');		}		$verify = iv("post.verify", 'dw', '验证码格式错误');		$type = iv("post.type", 'w', '发送方式错误');		if (!verify($verify, "1")) {			ajax('图形验证码错误');		}		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (!isset($res[1])) {			ajax('手机号码不存在');		}		$code = rand(111111, 999999);		if (MS_SMS == 1) {			session('verify_moble_findpwd', $code);			session('verify_moble_findpwd_moble', $moble);			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'findpwd');		if (isset($rs[1])) {			session('verify_moble_findpwd', $code);			session('verify_moble_findpwd_moble', $moble);			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_findpwd_pay()	{		$moble = iv("post.moble", 'd', '手机号码格式错误');		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax('国家编号错误');		}		$verify = iv("post.verify", 'dw', '验证码格式错误');		$type = iv("post.type", 'w', '发送方式错误');		if (!verify($verify, "1")) {			ajax('图形验证码错误');		}		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (!isset($res[1])) {			ajax('手机号码不存在');		}		$code = rand(111111, 999999);		if (MS_SMS == 1) {			session('verify_moble_findpwd_pay', $code);			session('verify_moble_findpwd_pay_moble', $moble);			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'findpwd_pay');		if (isset($rs[1])) {			session('verify_moble_findpwd_pay', $code);			session('verify_moble_findpwd_pay_moble', $moble);			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_set()	{		$moble = iv("post.moble", 'd', '手机号码格式错误');		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax('国家编号错误');		}		$verify = iv("post.verify", 'dw');		$type = iv("post.type", 'w');		(!verify($verify, "1")) && ajax('图形验证码错误');		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (isset($res[1])) {			ajax('手机号码已存在');		}		$code = rand(111111, 999999);		if (MS_SMS == 1) {			session('moble_verify', $code);			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'setmoble');		if (isset($rs[1])) {			session('moble_verify', $code);			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_new()	{		$moble = iv("post.moble", 'a', '旧手机号码格式错误');		$moble_new = iv("post.moble_new", 'd', '新手机号码格式错误');		$mobles_new = iv("post.mobles_new");		if (!check($mobles_new, 'd', '+')) {			ajax('国家编号错误');		}		$type = iv("post.type", 'w');		$moble_new = $mobles_new . '|' . $moble_new;		$res = md('user')->cha_moble($moble_new);		if (isset($res[1])) {			ajax('手机号码已存在');		}		$code = rand(111111, 999999);		if (MS_SMS == 1) {			session('moble_verify_new', $code);			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'newmoble');		if (isset($rs[1])) {			session('moble_verify_new', $code);			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_out()	{		$type = iv("post.type", 'w');		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$code = rand(111111, 999999);		$time = session('moble_verify_cnyout_time');		if (($time + 60 * 60) < time()) {			session('moble_verify_cnyout_ci', null);			session('moble_verify_cnyout_time', null);		}		$ci = session('moble_verify_cnyout_ci');		if ($ci > 3) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_SMS == 1) {			session('moble_verify_cnyout', $code);			session('moble_verify_cnyout_ci', ($ci + 1));			session('moble_verify_cnyout_time', time());			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'out');		if (isset($rs[1])) {			session('moble_verify_cnyout', $code);			session('moble_verify_cnyout_ci', ($ci + 1));			session('moble_verify_cnyout_time', time());			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_coinout()	{		$type = iv("post.type");		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$code = rand(111111, 999999);		$time = session('moble_verify_coinout_time');		if (($time + 60 * 60) < time()) {			session('moble_verify_coinout_ci', null);			session('moble_verify_coinout_time', null);		}		$ci = session('moble_verify_coinout_ci');		if ($ci > 10) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_SMS == 1) {			session('moble_verify_coinout', $code);			session('moble_verify_coinout_ci', ($ci + 1));			session('moble_verify_coinout_time', time());			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'coinout');		if (isset($rs[1])) {			session('moble_verify_coinout', $code);			session('moble_verify_coinout_ci', ($ci + 1));			session('moble_verify_coinout_time', time());			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function yidi()	{		$type = iv("post.type");		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$code = rand(111111, 999999);		$time = session('moble_verify_yidi_time');		if (($time + 60 * 60) < time()) {			session('moble_verify_yidi_ci', null);			session('moble_verify_yidi_time', null);		}		$ci = session('moble_verify_yidi_ci');		if ($ci > 3) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_SMS == 1) {			session('moble_verify_yidi', $code);			session('moble_verify_yidi_ci', ($ci + 1));			session('moble_verify_yidi_time', time());			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'yidi');		if (isset($rs[1])) {			session('moble_verify_yidi', $code);			session('moble_verify_yidi_ci', ($ci + 1));			session('moble_verify_yidi_time', time());			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function moble_push()	{		$type = iv("post.type");		$verify = iv("post.verify", 'dw', '验证码格式错误');		if (!verify($verify, "1")) {			ajax('图形验证码错误');		}		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$code = rand(111111, 999999);		$time = session('moble_verify_push_time');		if (($time + 60 * 60) < time()) {			session('moble_verify_push_ci', null);			session('moble_verify_push_time', null);		}		$ci = session('moble_verify_push_ci');		if ($ci > 10) {			ajax("频繁发送验证码，请稍后再试");		}		if (MS_SMS == 1) {			session('moble_verify_push', $code);			session('moble_verify_push_ci', ($ci + 1));			session('moble_verify_push_time', time());			ajax($code, 1);			die;		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'push');		if (isset($rs[1])) {			session('moble_verify_push', $code);			session('moble_verify_push_ci', ($ci + 1));			session('moble_verify_push_time', time());			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function whitelist()	{		$type = iv("post.type");		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$code = rand(111111, 999999);		$time = session('moble_verify_yidi_time');		if (($time + 60 * 60) < time()) {			session('moble_verify_whitelist_ci', null);			session('moble_verify_whitelist_time', null);		}		$ci = session('moble_verify_whitelist_ci');		if ($ci > 3) {			ajax("频繁发送验证码，请稍后再试");		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, $type, 'whitelist');		if (isset($rs[1])) {			session('moble_verify_whitelist', $code);			session('moble_verify_whitelist_ci', ($ci + 1));			session('moble_verify_whitelist_time', time());			ajax($rs[0], 1);		} else {			ajax($rs[0]);		}	}	public function outnote($userid, $coin, $num)	{		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			ajax('请先登录');		}		$moble = $user['moble'];		$sms_config = db::table("sys_sms")->where(["status" => 1])->find();		if (!$sms_config) {			return ["短信服务商配置错误"];		}		if (!isset($sms_config["username"]) || !$sms_config["username"]) {			return ["短信接口账户配置错误"];		}		if (!isset($sms_config["password"]) || !$sms_config["password"]) {			return ["短信接口密匙配置错误"];		}		if (!$sms_config["sms"]) {			return ["短信服务商暂时没有开通文本短信"];		}		if (stripos($moble, "|") == false) {			$moble_arr[1] = $moble;		} else {			$moble_arr = explode("|", $moble);			if ($moble_arr[0] != "+86" && $sms_config["guoji"] != 1) {				return ["国际短信暂时没有开通"];			}		}		$content = str_replace("{moble}", $moble, $sms_config['outnote']);		$content = str_replace("{time}", addtime(), $content);		$content = str_replace("{num}", $num, $content);		$content = str_replace("{coin}", $coin, $content);		$sms = new \ext\sms();		if ($sms_config["name"] == "smschinese") {			$res = $sms->smschinese($sms_config["username"], $sms_config["password"], $moble_arr[1], $content);		}		if ($sms_config["name"] == "smsbao") {			$res = $sms->smsbao($sms_config["username"], md5($sms_config["password"]), $moble_arr[1], $content);		}		if ($sms_config["name"] == "yunsms") {			$res = $sms->yunsms($sms_config["username"], $sms_config["password"], $moble_arr[1], $content);		}		if ($sms_config["name"] == "meilian") {			$res = $sms->meilian($sms_config["username"], md5($sms_config["password"]), $moble_arr[1], $content);		}		if ($sms_config["name"] == "ihuyi") {			if ($moble_arr[0] == "+86") {				$res = $sms->ihuyi($sms_config["username"], $sms_config["password"], $moble_arr[1], $content, 'sms');			} else {			}		}		return $res;	}	public function email()	{		$email = iv("post.email", 'email', '邮箱格式错误');		$type = iv("post.type", 'w', '发送方式错误');		$code = rand(111111, 999999);		if (MS_SMS == 0) {			session('verify_email_' . $type, $code);			ajax($code, 1);			die;		}		if ($this->user) {			$username = $this->user['username'];		} else {			$username = '新注册用户';		}		$title = md('sys_config')->lists()['web_title'];		$email_config = md('user')->email_config();		$type_arr = [];		foreach ($email_config as $k => $v) {			$type_arr[] = $k;		}		if (in_array($type, $type_arr)) {		} else {			ajax('不支持的发送类型');		}		$content = str_replace("{code}", $code, $email_config[$type]);		$addr = ['email' => $email, 'name' => $username, "title" => $title, "content" => $content];		$payObj = new \ext\email();		$res = $payObj->sendemail($addr, $email_config);		if (isset($res[1])) {			session('verify_email_' . $type, $code);			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}} 