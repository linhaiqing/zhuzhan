<?phpnamespace home;use Move\db;class reg extends home{	public $token = [];	public function __construct()	{		parent::__construct();	}	public function index()	{		$invit = iv('get.invit', 'dw', $this->ajax_lang('推荐码格式错误'), 1);		if ($invit) {			session("invit", $invit);		} else {			$invit = session("invit");		}		if (isset($this->config['invit_bx']) && $this->config['invit_bx'] == 1) {			$invit_bx = '必须填写';		} else {			$invit_bx = '没有可不填';		}		$this->assign('invit_bx', $invit_bx);		$sys_sms = mc('reg_index_sys_sms');		if (!$sys_sms) {			$sys_sms = db::table('sys_sms')->where(['status' => 1])->find();			mc('reg_index_sys_sms', $sys_sms);		}		if (!$sys_sms) {			$sys_sms['sms'] = 0;			$sys_sms['tel'] = 0;		}		$this->assign('sys_sms', $sys_sms);		$this->assign('invit', $invit);		$this->display();	}	public function email_reg()	{		$invit = iv('get.invit', 'dw', $this->ajax_lang('推荐码格式错误'), 1);		if ($invit) {			session("invit", $invit);		} else {			$invit = session("invit");		}		if (isset($this->config['invit_bx']) && $this->config['invit_bx'] == 1) {			$invit_bx = '必须填写';		} else {			$invit_bx = '没有可不填';		}		$this->assign('invit_bx', $invit_bx);		$this->assign('invit', $invit);		$this->display();	}	public function webreg()	{		$this->display();	}	public function check_moble()	{		$moble = iv('post.moble', 'd', $this->ajax_lang('手机号码格式错误'));		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax($this->ajax_lang('国家编号错误'));		}		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (isset($res[1])) {			ajax($this->ajax_lang('手机号码已存在'));		} else {			ajax($this->ajax_lang('不存在'), 1);		}	}	public function check_email()	{		$email = iv('post.email', 'email', $this->ajax_lang('邮箱格式错误'));		$res = db::table('user')->where(['email' => $email])->find();		if ($res) {			ajax($this->ajax_lang('邮箱已存在'));		} else {			ajax($this->ajax_lang('邮箱不存在'), 1);		}	}	public function reg_up()	{		$this->check_up('用户注册');		$moble = iv('post.moble', 'd', $this->ajax_lang('手机号码格式错误'));		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax($this->ajax_lang('国家编号错误'));		}		$moble_verify = iv("post.moble_verify", 'dw', $this->ajax_lang('验证码格式错误'));		$password = iv("post.password", 'password', $this->ajax_lang('密码格式错误'));		$invit = iv("post.invit", 'dw', $this->ajax_lang('推荐码格式错误'), 1);		if (!$moble_verify || $moble_verify != session('verify_moble_reg')) {			ajax($this->ajax_lang('验证码错误'));		}		if (!$this->config['reg_close']) {			ajax($this->ajax_lang('系统禁止注册'));		}		if (isset($this->config['reg_ip']) && $this->config['reg_ip']) {			if (in_array(get_ip(), explode("|", $this->config['reg_ip']))) {				ajax($this->ajax_lang('您的ip禁止注册'));			}		}		if (!$invit) {			$invit = session('invit');		}		if (!$invit) {			if (isset($this->config['invit_bx']) && $this->config['invit_bx'] == 1) {				ajax($this->ajax_lang('推荐码必须填写'));			}		}		if ($invit) {			if (!db::table("user")->where(["invit" => $invit])->find()) {				ajax($this->ajax_lang('推荐码错误'));			}		}		$moble = $mobles . '|' . $moble;		$res = md('user')->reg($moble, $password, $invit);		if (isset($res[1])) {			session('reg_userid', $res[1]);		}		show($res);	}	public function email_up()	{		$this->check_up('用户注册');		$email = iv('post.email', 'email', $this->ajax_lang('邮箱格式错误'));		$verify = iv("post.verify", 'dw', $this->ajax_lang('验证码格式错误'));		$password = iv("post.password", 'password', $this->ajax_lang('密码格式错误'));		$invit = iv("post.invit", 'dw', $this->ajax_lang('推荐码格式错误'), 1);		if (!verify($verify, "1")) {			ajax($this->ajax_lang('图形验证码错误'));		}		if (!$this->config['reg_close']) {			ajax($this->ajax_lang('系统禁止注册'));		}		if (isset($this->config['reg_ip']) && $this->config['reg_ip']) {			if (in_array(get_ip(), explode("|", $this->config['reg_ip']))) {				ajax($this->ajax_lang('您的ip禁止注册'));			}		}		if (!$invit) {			$invit = session('invit');		}		if (!$invit) {			if (isset($this->config['invit_bx']) && $this->config['invit_bx'] == 1) {				ajax($this->ajax_lang('推荐码必须填写'));			}		}		if ($invit) {			if (!db::table("user")->where(["invit" => $invit])->find()) {				ajax($this->ajax_lang('推荐码错误'));			}		}		if (db::table("user")->where(["email" => $email])->find()) {			db::exec("unlock tables");			ajax($this->ajax_lang('邮箱已存在'));		}		$invit_1 = 0;		$invit_2 = 0;		$invit_3 = 0;		if ($invit) {			$user_invit = db::table("user")->where(["invit" => $invit])->find();			if ($user_invit) {				$invit_1 = $user_invit["id"];				$invit_2 = $user_invit["invit_1"];				$invit_3 = $user_invit["invit_2"];			}		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write,#pre#user_coin write,#pre#user_wallet write");		$userid = db::table("user")->add(["email" => $email, "password" => hashs($password), "addip" => get_ip(), "addr" => get_city(), "invit" => md('user')->tradeno(), "invit_1" => $invit_1, "invit_2" => $invit_2, "invit_3" => $invit_3, "tpwdsetting" => 2, "addtime" => time(), "status" => 2]);		if (!$userid) {			db::exec("rollback");			db::exec("unlock tables");			ajax($this->ajax_lang('注册失败'));		}		$rs = [];		$rs[] = db::table("user_coin")->add(["userid" => $userid]);		$rs[] = db::table("user_wallet")->add(["userid" => $userid]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "添加", "remark" => "注册账号，成功id " . $userid, "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			session('reg_userid', $userid);			$send_email = new email();			$send_email->email_reg($userid);			ajax($this->ajax_lang('注册成功'), 1);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax($this->ajax_lang('注册失败'));		}	}	public function paypassword()	{		if (!session('reg_userid')) {			redirect('/reg');		}		$this->display();	}	public function info()	{		$this->display();	}	public function paypassword_up()	{		$username = iv("post.username", 'username', $this->ajax_lang('用户名格式错误(字母+数字且不少于6位)'));		$paypassword = iv("post.paypassword", 'password', $this->ajax_lang('交易密码格式错误'));		if (!session('reg_userid')) {			ajax($this->ajax_lang('非法访问'));		}		$users = db::table('user')->where(['id' => session('reg_userid')])->find();		if (!$users) {			ajax($this->ajax_lang('用户不存在'));		}		if ($users['paypassword']) {			ajax($this->ajax_lang('交易密码已经设置'));		}		if (isset($this->config['reg_username']) && $this->config['reg_username']) {			if (in_array($username, explode("|", $this->config['reg_username']))) {				ajax($this->ajax_lang('您的用户名禁止注册'));			}		}		$res = md('user')->reg_paypassword2(session('reg_userid'), $username, $paypassword);		if (isset($res[1])) {			ajax($this->ajax_lang("注册成功"), 1, "/reg/info");		} else {			ajax($res[0]);		}	}	public function active_up()	{		$code = iv('code', 'dw', $this->ajax_lang('激活码格式错误'));		$user_info = db::table('user')->where(['email_token' => $code])->find();		if (empty($user_info)) {			$this->info = $this->ajax_lang('激活码无效');			$this->display();			die;		}		if ($user_info['status'] == 1) {			$this->info = $this->ajax_lang('您的账号已激活');			$this->display();			die;		}		$res = db::table('user')->where(['email_token' => $code])->save(['status' => 1]);		if ($res) {			$this->info = $this->ajax_lang('激活成功');		} else {			$this->info = $this->ajax_lang('激活失败,请重试');		}		$this->display();	}} 