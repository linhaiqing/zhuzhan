<?phpnamespace home;use admin\dingcan;use Move\db;use Move\ext\page;class shake extends home{	public function __construct()	{		parent::__construct();		$data = mc('shake_config');		if (!$data) {			$res = db::table('shake_config')->order('id desc')->select();			if ($res) {				foreach ($res as $k => $v) {					$data[$v['name']] = $v;				}				mc('shake_config', $data, 864000);			}		}		$this->shake_config = $data;	}	public function coindata()	{		if (!$this->shake_config || !$this->shake_config['open_coindata']['value']) {			ajax('该接口关闭', 0);		}		$_POST = json_decode(file_get_contents('php://input'), TRUE);		$data = isset($_POST['data']) ? $_POST['data'] : 0;		$this->remark('coindata', $_POST);		if ($data) {			$mymc_coin = new \mymc\coin();			foreach ($data as $k => $v) {				$coin = $mymc_coin->find($k);				if ($coin) {					$log['coinid'] = $coin['id'];					$log['coinname'] = $coin['name'];					$log['create'] = $v['create'];					$log['left'] = $v['left'];					$log['total'] = $v['create'] + $v['left'];					$log['addtime'] = time();					db::table('shake_mine_count')->add($log);				}			}		}		$resData = $this->sendcoinData();		ajax($resData, $resData ? 1 : 2);	}	private function sendcoinData()	{		$coinNumData = mc('shake_send_coin_' . date('d'));		if ($coinNumData) {			return $coinNumData;		}		$sendCoinList = db::table('shake')->where(['status' => 1])->select();		$resData = [];		foreach ($sendCoinList as $k => $v) {			if (time() > $v['addtime'] && time() < $v['endtime']) {				$resData[$v['coinname']] = isset($resData[$v['coinname']]) ? $resData[$v['coinname']] + $v['sendnum'] : $v['sendnum'];			}		}		return $resData;	}	public function binduser()	{		if (!$this->shake_config || !$this->shake_config['open_binduser']['value']) {			ajax('该接口关闭', 0);		}		$_POST = json_decode(file_get_contents('php://input'), TRUE);		$phone = isset($_POST['phone']) ? $_POST['phone'] : 0;		$weixin = isset($_POST['weixin']) ? $_POST['weixin'] : 0;		$this->remark('binduser', $_POST);		if (!$phone || !$weixin) {			ajax('缺少参数', 9);		}		$shake_user = db::table('shake_user')->where(['phone' => $phone])->find();		if ($shake_user) {			ajax('该用户已经绑定过了', 3);		}		$user = db::table('user')->where(['moble' => '+86|' . $phone])->find();		if (!$user) {			ajax('用户不存在，需要前往平台注册', 2);		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#shake_user write");		$rs[] = db::table('shake_user')->add(['userid' => $user['id'], 'username' => $user['username'], 'shakeid' => $weixin, 'phone' => $phone, 'addtime' => time(), 'sort' => 0, 'status' => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			ajax('绑定成功', 1);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax("绑定失败" . implode("|", $rs), 4);		}	}	public function minecoin()	{		if (!$this->shake_config || !$this->shake_config['open_minecoin']['value']) {			ajax('该接口关闭', 0);		}		$_POST = json_decode(file_get_contents('php://input'), TRUE);		$phone = isset($_POST['phone']) ? $_POST['phone'] : 0;		$weixin = isset($_POST['weixin']) ? $_POST['weixin'] : 0;		$coin = isset($_POST['coin']) ? $_POST['coin'] : 0;		$num = isset($_POST['num']) ? $_POST['num'] : 0;		$coinNumData = $this->sendcoinData();		if (!isset($coinNumData[$coin])) {			ajax('该币种的发币数量为0', 5);		}		$sql = " select SUM(num) AS mum from move_shake_mine_log where  				TO_DAYS( FROM_UNIXTIME(addtime) ) = TO_DAYS(NOW()) and  				 coinname = '" . $coin . "' ";		$countResult = db::query($sql);		$givenCoinNum = $countResult[0]['mum'];		if ($givenCoinNum + $num > $coinNumData[$coin]) {			ajax('发币数量超出或即将超出限制', 5);		}		$this->remark('minecoin', $_POST);		if (!$phone || !$weixin || !$coin || !$num) {			ajax('缺少必要参数', 3);		}		$shake_user = db::table('shake_user')->where(['phone' => $phone])->find();		if (!$shake_user) {			ajax('用户不存在或未绑定', 4);		}		if ($shake_user['status'] != 1) {			ajax('用户被禁用,请联系管理员', 4);		}		$user = db::table('user')->where(['id' => $shake_user['userid']])->find();		if (!$user) {			ajax('查询绑定的用户失败', 4);		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write, #pre#shake_mine_log write");		$rs[] = db::table('user_coin')->where(['userid' => $user['id']])->setInc($coin, round($num, 6));		$log = ["userid" => $user['id'], "coinname" => $coin, "num" => round($num, 6), "addtime" => time()];		$rs[] = db::table("shake_mine_log")->add($log);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			ajax('挖矿成功', 1);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax("挖矿失败" . implode("|", $rs), 2);		}	}	private function remark($api_name = '异常', $params = null)	{		$headers = getallheaders();		$author = @$headers['author'];		if ($author != @$this->shake_config['auth']['value']) {			die;		};		$ip = get_ip();		$addr = get_city();		db::table('shake_api_log')->add(['name' => $api_name, 'params' => json_encode($params), 'ip' => $ip, 'addr' => $addr, 'addtime' => time()]);	}}