<?phpnamespace home;use Move\db;class login extends home{	public function __construct()	{		parent::__construct();	}	public function index()	{		if (session('userid')) {			redirect('/');		}		$this->display();	}	public function register()	{		redirect('/reg');	}	public function up_login()	{		$verify = iv("post.verify", 'dw', $this->ajax_lang('验证码格式错误'));		if (!verify($verify, "1")) {			ajax($this->ajax_lang('图形验证码错误'));		}		$moble = iv("post.moble", 'a', $this->ajax_lang('账户格式错误'));		$mobles = iv("post.mobles");		if (!check($mobles, 'd', '+')) {			ajax($this->ajax_lang('国家编号错误'));		}		$password = iv("post.password", 'password', $this->ajax_lang('密码格式错误'));		if (isset($this->config['login_ip']) && $this->config['login_ip']) {			if (in_array(get_ip(), explode("|", $this->config['login_ip']))) {				ajax($this->ajax_lang('您的ip禁止登录'));			}		}		$users = db::table("user")->where(["username" => $moble])->find();		if (!$users) {			$users = db::table("user")->where(["email" => $moble])->find();			if (!$users) {				$users = db::table("user")->where(["moble" => $mobles . '|' . $moble])->find();				if (!$users) {					ajax($this->ajax_lang('用户不存在'));				} else {					if (db::table("user")->where(["moble" => $mobles . '|' . $moble])->count() > 1) {						ajax($this->ajax_lang('您的手机号存在重复，禁止登录'));					}					$remark = '通过手机号登录';				}			} else {				if (db::table("user")->where(["email" => $moble])->count() > 1) {					ajax($this->ajax_lang('您的邮箱存在重复，禁止用户名登录'));				}				$remark = '通过邮箱登录';			}		} else {			if (db::table("user")->where(["username" => $moble])->count() > 1) {				ajax($this->ajax_lang('您的用户名存在重复，禁止用户名登录'));			}			$remark = '通过用户名登录';		}		if ($users["status"] == 2) {			ajax($this->ajax_lang('您的账户未激活'));		}		if ($users["status"] != 1) {			ajax($this->ajax_lang('您的账户已禁止登录'));		}		if ($users["password"] != hashs($password)) {			ajax($this->ajax_lang('登录账户或密码错误'));		}		$user_coin = db::table('user_coin')->where(['userid' => $users["id"]])->find();		if (!$user_coin) {			if (!db::table('user_coin')->add(['userid' => $users["id"]])) {				ajax($this->ajax_lang('账户财产出现异常'));			}		}		$user_wallet = db::table('user_wallet')->where(['userid' => $users["id"]])->find();		if (!$user_wallet) {			if (!db::table('user_wallet')->add(['userid' => $users["id"]])) {				ajax($this->ajax_lang('账户钱包出现异常'));			}		}		$addip = get_ip();		$addr = get_city();		if (isset($users['yidi']) && $users['yidi'] == 1) {			$user_login_log = db::table('user_log')->where(['type' => '登录'])->order('id desc')->find();			if ($user_login_log) {				if ($user_login_log['addip'] != $addip) {					session('userid_yidi', 1);				}			}		}		$res = md("user")->login($users, $remark, $addip, $addr);		if (isset($res[1]) && $res[1]) {			session('userid', $users["id"]);			session('home_login_username', null);			cookie("moble", $moble);			cookie("move_moble", $moble);			ajax($this->ajax_lang('登录成功'), 1);		} else {			ajax($this->ajax_lang($res[0]));		}	}	public function loginout()	{		session(null);		redirect('/');	}	public function goole()	{		$goole = iv("post.password", 'd', $this->ajax_lang('密码格式错误'));		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax($this->ajax_lang('请先登录'));		}		$arr = explode('|', $user['google']);		$ga = md('user')->google();		if ($ga->verifyCode($arr[0], $goole, 1)) {			session('login_google', 1);			ajax($this->ajax_lang('验证成功'), 1);		} else {			ajax($this->ajax_lang('验证失败'));		}	}	public function yidi()	{		$yidi = iv("post.password", 'd', $this->ajax_lang('密码格式错误'));		$user = db::table("user")->where(["id" => $this->userid])->find();		if (!$user) {			ajax($this->ajax_lang('请先登录'));		}		if (session('moble_verify_yidi') && session('moble_verify_yidi') == $yidi) {			session('userid_yidi', null);			ajax($this->ajax_lang('验证成功'), 1);		} else {			ajax($this->ajax_lang('验证失败'));		}	}} 