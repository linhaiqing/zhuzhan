<?phpnamespace home;use Move\ext\client;use Move\db;use Move\ext\speal;use Move\ext\page;class qukuai extends home{	protected $getinfo = "";	protected $handel = "";	public function __construct()	{		parent::__construct();		$this->lang_base();		$this->footer();	}	public function index()	{		$this->display();	}	public function footer()	{		$res = mcs("exploer_footer_data");		if (!$res) {			$client = $this->getClient();			$getinfo = $client->getinfo();			$res['status'] = qklang('ok');			if ($getinfo['blocks'] !== @$getinfo['headers']) {				$res['status'] = qklang('not synced');			} elseif ($getinfo['testnet'] === true) {				$res['status'] = qklang('using testnet');			} elseif (!empty($getinfo['errors'])) {				if (strpos($getinfo['errors'], 'Warning:') === false) {					$res['status'] = qklang('rpc error');				}			}			$res['concount'] = $getinfo['connections'];			mcs("exploer_footer_data", $res);		}		$this->footer_status = $res['status'];		$this->footer_concount = $res['concount'];	}	private function getClient()	{		if (!$this->handel) {			include APP_PATH . "/controller/ext/rpcclient.lib.php";			$client = new \RPCclient("username", "LKJKLWSJHLHEJWKHEDKJWHDEDKLERWJD", "47.91.151.121", "36362");			$this->getinfo = $client->getinfo();			is_array($this->getinfo) && $this->getinfo || $this->error("钱包链接失败");			$this->handel = $client;		}		return $this->handel;	}	private function error($msg)	{		$this->msg = $msg;		$this->display("error");	}	private function getCurCoin()	{		return "DSC";	}	public function getInfo()	{		$show_cbtxs = true;		$curr_code = $this->getCurCoin();		$client = $this->getClient();		$getinfo = $this->getinfo;		$newest_hash = $client->getblockhash($getinfo['blocks']);		$newest_block = $client->getblock($newest_hash);		$block[0] = $newest_block;		$txs = [];		echo '<h2>' . qklang('Latest Blocks') . '</h2>						<table class="table table-striped">						<tr>						  <th>' . qklang('Number') . '</th>						  <th>' . qklang('Time') . '</th>						  <th>' . qklang('Difficulty') . '</th>						  <th>' . qklang('Nonce') . '</th>						  <th>' . qklang('Transactions') . '</th>						  <th>' . qklang('Size') . ' (kB)</th>						</tr>';		echo "<tr><td><a href='/qukuai/getBlock?block=" . $newest_block['hash'] . "'>" . $newest_block['height'] . "</a></td><td>" . date("Y-m-d H:i:s", $newest_block['time']) . "</td><td>" . $newest_block['difficulty'] . "</td><td>" . $newest_block['nonce'] . "</td><td>" . count($newest_block['tx']) . "</td><td>" . round($newest_block['size'] / 1024, 2) . "</td></tr>";		foreach ($newest_block['tx'] as $key => $value) {			$txs[] = $value;		}		for ($i = 1; $i < 10; $i++) {			$block[$i] = $client->getblock($block[$i - 1]['previousblockhash']);			echo "<tr><td><a href='/qukuai/getBlock?block=" . $block[$i]['hash'] . "'>" . $block[$i]['height'] . "</a></td><td>" . date("Y-m-d H:i:s", $block[$i]['time']) . "</td><td>" . $block[$i]['difficulty'] . "</td><td>" . $block[$i]['nonce'] . "</td><td>" . count($block[$i]['tx']) . "</td><td>" . round($block[$i]['size'] / 1024, 2) . "</td></tr>";			foreach ($block[$i]['tx'] as $key => $value) {				$txs[] = $value;			}		}		echo '</table>';		$tx = [];		$count = 0;		echo '<h2>' . qklang('Latest Transactions') . '</h2>					<table class="table table-striped table-condensed">					<tr>					  <th>' . qklang('Transaction ID') . '</th>					  <th>' . qklang('Age') . '</th>					  <th>' . qklang('Amount Sent') . '</th>					</tr>';		foreach ($txs as $key => $value) {			if ($count > 9) {				break;			}			$tx[$key] = $client->getrawtransaction($value, 1);			if (!$show_cbtxs && $tx[$key]['vin'][0]['coinbase'] === true) {				continue;			}			$total = '';			foreach ($tx[$key]['vout'] as $k => $value) {				if (!isset($tx[$k]['limit'])) {					$total = bcadd($total, str_replace('ep', '', $value['value']));				}			}			$tx_time = date("Y-m-d H:i:s", $tx[$key]['time']);			$tx_age = $this->get_time_difference($tx_time, date("Y-m-d H:i:s"));			$count++;			if (!isset($tx_age['seconds'])) {				$tx_age['seconds'] = 0;			}			if ($tx_age['seconds'] < 1) {				$tx_age = '< 1 ' . " " . qklang('seconds');			} elseif ($tx_age['minutes'] < 1) {				$tx_age = $tx_age['seconds'] . " " . qklang('seconds');			} else {				$tx_age = $tx_age['minutes'] . " " . qklang('minutes');			}			echo "<tr><td><a href='/qukuai/getTx?tx=" . $tx[$key]['txid'] . "'>" . $tx[$key]['txid'] . "</a></td><td> < " . $tx_age . " </td><td>" . $total . ' ' . $curr_code . "</td></tr>";		}		echo '</table>';	}	public function getTx()	{		$curr_code = $this->getCurCoin();		$client = $this->getClient();		$tx_id = preg_replace("/[^a-f0-9]/", '', strtolower(@$_GET['tx']));		if (!$tx_id) {			$this->error("tx_id 不能为空!");		}		$tx = $client->getrawtransaction($tx_id, 1);		$this->assign("tx", $tx);		if ($tx) {			$input_str = '';			$output_str = '';			$total_in = 0;			$total_out = 0;			if (count($tx['vin']) > 0) {				foreach ($tx['vin'] as $key => $value) {					$clean_val = str_replace('ep', '', @$value['value']);					$total_in = bcadd($total_in, $clean_val);					if ($value['coinbase'] == true) {						$input_str .= "heCoinbaseAccount" . "&rarr; <span class='sad_txt'>$clean_val</span> $curr_code (block reward)<br />";					} else {						$input_str .= @$value['address'] . "&rarr; <span class='sad_txt'>$clean_val</span> $curr_code<br />";					}				}			} else {				$total_in = 0;				$input_str = 'No Inputs (coinbase genesis transaction)<br />';			}			$this->assign("input_str", $input_str);			foreach ($tx['vout'] as $key => $value) {				$clean_val = str_replace('ep', '', $value['value']);				$total_out = bcadd($total_out, $clean_val);				if (isset($tx['limit'])) {					$output_str .= "Withdrawal limit of input address updated to: <span class='happy_txt'>" . remove_ep($tx['limit']) . "</span> $curr_code<br />";				} else {					$output_str .= @$value['address'] . "&larr; <span class='happy_txt'>$clean_val</span> $curr_code<br />";				}			}			$this->assign("output_str", $output_str);			$this->tx_time = isset($tx['time']) ? date("Y-m-d H:i:s", $tx['time']) : 'unknown';			$this->confirmations = isset($tx['confirmations']) ? $tx['confirmations'] : '0';			$tx_message = empty($tx['msg']) ? 'none' : safe_str($tx['msg']);			$tx_fee = ($total_in === 0) ? '0' : bcsub($total_in, $total_out);			$this->total_in = $total_in;			$this->curr_code = $curr_code;			$this->total_out = $total_out;			$this->tx_fee = $tx_fee;			$this->tx_message = $tx_message;		}		$this->display();	}	public function getBlock()	{		$show_html = "";		$curr_code = $this->getCurCoin();		$client = $this->getClient();		if (isset($_GET['b'])) {			$bnumb = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['b']));			$bhash = $client->getblockhash(abs($bnumb));			if (!empty($bhash)) {				$block = $client->getblock($bhash);				$chain_info = "<sup class='main_info'>[" . qklang('main chain') . "]</sup>";			} else {				$break = true;			}		} elseif (isset($_GET['block'])) {			$bhash = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['block']));			$block = $client->getblock($bhash);			if (!empty($block)) {				$chash = $client->getblockhash($block['height']);				if ($bhash === $chash) {					$chain_info = "<sup class='main_info'>[" . qklang('main chain') . "]</sup>";				} else {					$chain_info = "<sup class='orphan_info'>[" . qklang('orphan chain') . "]</sup>";				}			} else {				$break = true;			}		}		if (!isset($break)) {			$show_html .= "<h1><a href='./?b=" . $block['height'] . "'>" . qklang('Block') . " #" . $block['height'] . "</a> $chain_info</h1>";			$show_html .= "<div class='row-fluid'><div class='span5'>";			$show_html .= "<h3>" . qklang('Summary') . ":</h3><table class='table table-striped table-condensed'>";			$show_html .= "<tr><td><b>" . qklang('Version') . ":</b></td><td>" . $block['version'] . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Size') . ":</b></td><td>" . round($block['size'] / 1024, 2) . " kB</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Transactions') . ":</b></td><td>" . count($block['tx']) . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Confirmations') . ":</b></td><td>" . $block['confirmations'] . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Difficulty') . ":</b></td><td>" . $block['difficulty'] . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Nonce') . ":</b></td><td>" . $block['nonce'] . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Timestamp') . ":</b></td><td>" . date("Y-m-d H:i:s", $block['time']) . "</td></tr>";			$show_html .= "</table>";			$show_html .= '</div><div class="span7">';			$show_html .= '<h3>' . qklang('Hashes') . ':</h3><table class="table table-striped">';			if (isset($block['previousblockhash'])) {				$show_html .= "<tr><td><b>" . qklang('Previous Block') . ":</b></td><td><a href='/qukuai/getBlock?block=" . $block['previousblockhash'] . "'>" . $block['previousblockhash'] . "</a></td></tr>";			}			if (isset($block['nextblockhash'])) {				$show_html .= "<tr><td><b>" . qklang('Next Block') . ":</b></td><td><a href='/qukuai/getBlock?block=" . $block['nextblockhash'] . "'>" . $block['nextblockhash'] . "</a></td></tr>";			}			$show_html .= "<tr><td><b>" . qklang('Block Hash') . ":</b></td><td><a href='./?rawblock=" . $block['hash'] . "'>" . $block['hash'] . "</a></td></tr>";			$show_html .= "<tr><td><b>" . qklang('Master Hash') . ":</b></td><td>" . @$block['accountroot'] . "</td></tr>";			$show_html .= "<tr><td><b>" . qklang('Merkle Root') . ":</b></td><td>" . $block['merkleroot'] . "</td></tr>";			$show_html .= '</table></div></div>';			$show_html .= "<h3>" . qklang('Transactions') . ":</h3>	<table class='table table-striped'>";			foreach ($block['tx'] as $key => $txid) {				$tx = $client->getrawtransaction($txid, 1);				if (!empty($tx)) {					$in_total = 0;					$out_total = 0;					$show_html .= "<tr><td colspan='2'><a href='/qukuai/getTx?tx=$txid'>$txid</a></td><td colspan='2' style='text-align:right'>" . date("Y-m-d H:i:s", $tx['time']) . "</td></tr><tr><td style='vertical-align:middle'>";					if (count($tx['vin']) > 0) {						foreach ($tx['vin'] as $key => $value) {							$clean_val = @str_replace('ep', '', $value['value']);							$in_total = bcadd($in_total, $clean_val);							if (@$value['coinbase'] == true) {								$show_html .= "TheCoinbaseAccount" . "&nbsp;<span class='sad_txt'>$clean_val</span>&nbsp;$curr_code&nbsp;(block&nbsp;reward)<br />";							} else {								$show_html .= @$value['address'] . ":&nbsp;<span class='sad_txt'>$clean_val</span>&nbsp;$curr_code<br />";							}						}					} else {						$in_total = 0;						$show_html .= 'No Inputs (coinbase genesis transaction)<br />';					}					$show_html .= "<br /></td><td style='vertical-align:middle'>		<i class='icon-arrow-right'></i><br /><br />		</td><td style='vertical-align:middle'>";					foreach ($tx['vout'] as $key => $value) {						$clean_val = @str_replace('ep', '', $value['value']);						$out_total = bcadd($out_total, $clean_val);						if (isset($tx['limit'])) {							$show_html .= "Withdrawal limit of input address updated to: <span class='happy_txt'>" . remove_ep($tx['limit']) . "</span>&nbsp;$curr_code<br />";						} elseif ($in_total === 0) {							$show_html .= "TheCoinbaseAccount" . ":&nbsp;<span class='sad_txt'>$clean_val</span>&nbsp;$curr_code<br />";						} else {							$show_html .= @$value['address'] . ":&nbsp;<span class='happy_txt'>$clean_val</span>&nbsp;$curr_code<br />";						}					}					$show_html .= "<br /></td><td style='vertical-align:middle'>		<b>" . qklang('Total') . ":</b>&nbsp;$out_total&nbsp;$curr_code<br />		<b>" . qklang('Fee') . ":</b>&nbsp;" . (($in_total === 0) ? '0' : bcsub($in_total, $out_total)) . "&nbsp;$curr_code<br /><br /></td></tr>";				}			}			$show_html .= "</table>";		} else {			$show_html = "";		}		$this->show_html = $show_html;		$this->display();	}	public function stats()	{		$this->curr_code = $this->getCurCoin();		$client = $this->getClient();		$cb_address = [];		$launch_time = 1406509200;		$total_coin = '1844674407';		$first_reward = '243.1';		$balance = $client->listbalances(1, [$cb_address]);		$mining_info = $client->getmininginfo();		$tx_stats = $client->gettxoutsetinfo();		$mining_info['difficulty'] = $this->float_format($mining_info['difficulty'], 6);		$mining_info['networkhashps'] = $this->float_format(bcdiv($mining_info['networkhashps'], '1000000000'), 4);		$now_time = date("Y-m-d H:i:s");		$start_time = addtime($launch_time);		$time_diff = $this->get_time_difference($start_time, $now_time);		$time_diff['minutes'] = round(($time_diff['seconds'] / $mining_info['blocks']) / 60, 4);		$time_diff['days'] = round($time_diff['seconds'] / 60 / 60 / 24, 2);		$this->coin_supply = @$this->float_format(str_replace('ep', '', $tx_stats['total_amount']), 6);		$this->cb_balance = @$this->float_format(str_replace('ep', '', $balance[0]['balance']), 4);		$frac_reman = bcdiv($this->cb_balance, $total_coin);		$this->block_rwrd = bcmul($first_reward, $frac_reman);		$this->l_dat = @explode(':', file_get_contents("./db/last_dat"));		$s_dat = @explode(':', file_get_contents("./db/stat_dat"));		$s_dat[2] = @$this->float_format($s_dat[2], 6);		$s_dat[3] = @$this->float_format($s_dat[3], 6);		$this->s_dat = $s_dat;		$this->tx_stats = $tx_stats;		$this->mining_info = $mining_info;		$this->time_diff = $time_diff;		$this->display();	}	public function peers()	{		$this->curr_code = $this->getCurCoin();		$client = $this->getClient();		$this->peers = $client->getpeerinfo();		$this->display();	}	public function search()	{		if (isset($_GET['key'])) {			$key = preg_replace("/[^a-f0-9]/", '', strtolower(@$_GET['key']));			if (!$key) {				header("Location:/");			}			if (mb_strlen($key) < 12) {				header("Location:/qukuai/getBlock?b=" . $key);				exit();			}			$this->curr_code = $this->getCurCoin();			$client = $this->getClient();			$tx = $client->getrawtransaction($key, 1);			if ($tx) {				header("Location:/qukuai/getTx?tx=" . $key);				exit();			}			header("Location:/qukuai/getBlock?block=" . $key);		}		$this->display();	}	public function api()	{		if (isset($_GET['q'])) {			$this->curr_code = $this->getCurCoin();			$client = $this->getClient();			$cb_address = '';			$total_coin = '1844674407';			$first_reward = '243.1';			$launch_time = 1406509200;			$q = preg_replace("/[^a-z]/", '', strtolower($_GET['q']));			switch ($q) {				case 'getdifficulty':					$mining_info = $client->getmininginfo();					$result = $mining_info['difficulty'];					break;				case 'gethashrate':					$mining_info = $client->getmininginfo();					$result = $mining_info['networkhashps'];					break;				case 'getblockcount':					$mining_info = $client->getmininginfo();					$result = $mining_info['blocks'];					break;				case 'getlasthash':					$result = $client->getbestblockhash();					break;				case 'blockreward':					$balance = $client->listbalances(1, [$cb_address]);					$cb_balance = str_replace('ep', '', $balance[0]['balance']);					$frac_reman = bcdiv($cb_balance, $total_coin);					$result = bcmul($first_reward, $frac_reman);					break;				case 'coinsupply':					$tx_stats = $client->gettxoutsetinfo();					$result = str_replace('ep', '', $tx_stats['total_amount']);					break;				case 'unminedcoins':					$balance = $client->listbalances(1, [$cb_address]);					$result = str_replace('ep', '', $balance[0]['balance']);					break;				case 'runtime':					$now_time = date("Y-m-d H:i:s");					$start_time = addtime($launch_time);					$time_diff = $this->get_time_difference($start_time, $now_time);					$result = $time_diff['seconds'];					break;				case 'txinput':					if (empty($_GET['arg1'])) {						die('tx hash not specified');					} else {						$tx_id = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['arg1']));						$tx = $client->getrawtransaction($tx_id, 1);						$total_in = '0';						if (count($tx['vin']) > 0) {							foreach ($tx['vin'] as $key => $value) {								$clean_val = str_replace('ep', '', $value['value']);								$total_in = bcadd($total_in, $clean_val);							}						} else {							$total_in = '0';						}						$result = $total_in;						break;					}				case 'txoutput':					$tx_id = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['arg1']));					$tx = $client->getrawtransaction($tx_id, 1);					$total_out = '0';					foreach ($tx['vout'] as $key => $value) {						$clean_val = str_replace('ep', '', $value['value']);						$total_out = bcadd($total_out, $clean_val);					}					$result = $total_out;					break;				case 'txfee':					$tx_id = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['arg1']));					$tx = $client->getrawtransaction($tx_id, 1);					$total_in = '0';					$total_out = '0';					if (count($tx['vin']) > 0) {						foreach ($tx['vin'] as $key => $value) {							$clean_val = str_replace('ep', '', $value['value']);							$total_in = bcadd($total_in, $clean_val);						}					} else {						$total_in = '0';					}					foreach ($tx['vout'] as $key => $value) {						$clean_val = str_replace('ep', '', $value['value']);						$total_out = bcadd($total_out, $clean_val);					}					$result = bcsub($total_in, $total_out);					break;				case 'txcount':					$l_dat = explode(':', file_get_contents("./db/last_dat"));					$result = $l_dat[1];					break;				case 'addressbalance':					if (empty($_GET['arg1'])) {						die('address was not specified');					} else {						$address = preg_replace("/[^a-z0-9]/i", '', $_GET['arg1']);						$confs = empty($_GET['arg2']) ? 1 : (int)$_GET['arg2'];						$ainfo = $client->listbalances($confs, [$address]);						$result = str_replace('ep', '', $ainfo[0]['balance']);						break;					}				case 'addresslimit':					if (empty($_GET['arg1'])) {						die('address was not specified');					} else {						$address = preg_replace("/[^a-z0-9]/i", '', $_GET['arg1']);						$confs = empty($_GET['arg2']) ? 1 : (int)$_GET['arg2'];						$ainfo = $client->listbalances($confs, [$address]);						$result = str_replace('ep', '', $ainfo[0]['limit']);						break;					}				case 'addresslastseen':					if (empty($_GET['arg1'])) {						die('address was not specified');					} else {						$address = preg_replace("/[^a-z0-9]/i", '', $_GET['arg1']);						$confs = empty($_GET['arg2']) ? 1 : (int)$_GET['arg2'];						$ainfo = $client->listbalances($confs, [$address]);						$balance = str_replace('ep', '', $ainfo[0]['balance']);						if (clean_number($balance) === '0') {							$last_used = 'unknown';						} else {							$last_used = $ainfo[0]['age'];						}						$result = $last_used;						break;					}				case 'addresscount':					$tx_stats = $client->gettxoutsetinfo();					$result = $tx_stats['accounts'];					break;				case 'getinfo':					$ginfo = $client->getinfo();					unset($ginfo['balance']);					unset($ginfo['proxy']);					unset($ginfo['keypoololdest']);					unset($ginfo['keypoolsize']);					unset($ginfo['paytxfee']);					header('Content-Type: application/json');					echo json_encode($ginfo);					exit;				case 'txinfo':					if (empty($_GET['arg1'])) {						die('tx hash not specified');					} else {						$tx_id = preg_replace("/[^a-f0-9]/", '', strtolower($_GET['arg1']));						$tinfo = $client->getrawtransaction($tx_id, 1);						header('Content-Type: application/json');						echo json_encode($tinfo);						exit;					}				case 'addressinfo':					if (empty($_GET['arg1'])) {						die('address not specified');					} else {						$address = preg_replace("/[^a-z0-9]/i", '', $_GET['arg1']);						$confs = empty($_GET['arg2']) ? 1 : (int)$_GET['arg2'];						$ainfo = $client->listbalances($confs, [$address]);						unset($ainfo[0]['ours']);						unset($ainfo[0]['account']);						header('Content-Type: application/json');						echo json_encode($ainfo[0]);						exit;					}				case 'blockinfo':					if (empty($_GET['arg1'])) {						die('block hash not specified');					} else {						$block = $client->getblock($_GET['arg1']);						header('Content-Type: application/json');						echo json_encode($block);						exit;					}				default:					die('unknown command');			}			echo json_encode([$result]);			exit();		} else {			$this->display();		}	}	private function float_format($num, $dec = 10, $pow = 0, $sep = '.', $ths = '')	{		return number_format(bcmul(str_replace('ep', '', $num), bcpow(10, $pow)), $dec - $pow, $sep, $ths);	}	private function get_time_difference($start, $end)	{		$uts['start'] = strtotime($start);		$uts['end'] = strtotime($end);		if ($uts['start'] != false && $uts['end'] != false) {			if ($uts['end'] >= $uts['start']) {				$diff = $uts['end'] - $uts['start'];				$days = intval((floor($diff / 60 / 60 / 24)));				$hours = intval((floor($diff / 60 / 60)));				$minutes = intval((floor($diff / 60)));				$seconds = intval($diff);				return (['days' => $days, 'hours' => $hours, 'minutes' => $minutes, 'seconds' => $seconds]);			} else {				return [];			}		} else {			return [];		}	}	private function lang_base()	{		$lang_name_map = ["cn" => "简体中文", "en" => "English", "hk" => "繁体中文", "jp" => "日本語", "spanish" => "Español", "german" => "Deutsche"];		$lang_name = cookie('lang');		if ($lang_name) {			$this->lang_show = isset($lang_name_map[$lang_name]) ? $lang_name_map[$lang_name] : $lang_name_map['cn'];		} else {			$this->lang_show = $lang_name_map['cn'];		}		function qklang($key)		{			$base_key = $key;			$lang_map = [];			$cn = ["Block Explorer" => "区块浏览器", "Home" => "主页", "Stats" => "统计", "Search" => "搜索", "API" => "API文档", "Search for block, tx or address" => "搜索交易ID、地址、区块高度", "Latest Blocks" => "最新区块", "Number" => "高度", "Time" => "时间", "Difficulty" => "难度系数", "Nonce" => "随机数", "Transactions" => "交易记录", "Size" => "大小", "Latest Transactions" => "最新交易记录", "Transaction ID" => "交易ID", "Age" => "时间", "Amount Sent" => "数量", "Other Pages" => "其他页面", "Orphaned Blocks" => "孤立区块", "list of valid blocks not in the main chain" => "不在主链中的有效块的列表", "Memory Pool" => "矿池", "list of transactions currently in our memory pool" => "矿池中交易列表", "Connected Peers" => "连接池", "list of nodes currently connected to our node" => "当前节点列表", "Status" => "状态", "Connections" => "连接数", "offline" => "离线", "ok" => "正常", "not synced" => "未同步", "using testnet" => "测试网络", "rpc error" => "RPC 错误", "main chain" => "主链", "orphan chain" => "孤链", "Block" => "块", "Summary" => "概览", "Version" => "版本", "Confirmations" => "确认", "Timestamp" => "时间戳", "Hashes" => "哈希值", "Previous Block" => "上一区块", "Next Block" => "下一区块", "Block Hash" => "当前", "Master Hash" => "主哈希", "Merkle Root" => "二进制哈希树根", "Fee" => "交易费 ", "Total" => "总计", "block reward" => "区块奖励", "IP Address" => "IP 地址", "Port" => "端口", "conntime" => "连接时间", "Coin supply" => "币供应", "Unmined coins" => "待挖出", "Block Count" => "区块总计", "Avg. Block Time" => "平均出块时间", "minutes" => "分钟", "days" => "天", "Hash Rate" => "哈希率", "Run Time" => "总时间", "Search Blockchain" => "搜索区块链", "Find Address" => "查找地址", "input a valid address" => "输入一个有效地址", "Find Transaction" => "查找交易", "input a valid txid" => "输入一个有效交易ID", "Find Block" => "查找块", "input valid block hash" => "输入一个有效的块哈希", "Query API" => "查询 API", "Network Data" => "网络数据", "current mining difficulty" => "当前采矿困难系数", "estimated hash rate" => "估计哈希率", "current block height" => "当前区块高度", "hash of latest block" => "最后区块哈希", "Coin Data" => "币数据", "current block reward" => "当前区块奖励", "total coins mined" => "总共挖矿币量", "total unmined coins" => "未挖出币量", "time since first block (secs)" => "区块链累计运行时间", "Transaction Data" => "交易数据", "total tx input value" => "总tx输入值", "total tx output value" => "总tx输出值", "tx fee value (inputs - outputs)" => "tx费用值（输入 - 输出）", "number of tx,s in blockchain" => "块中的tx，s的数量", "Address Data" => "地址数据", "balance of address" => "对应地址资产", "withdrawal limit of address" => "提现地址限制", "block when address last used" => "上次使用区块", "number of non-empty addresses" => "非空地址数", "seconds" => "秒", "JSON Data" => "JSON 数据", "general information" => "常规信息", "transaction information" => "交易信息", "address information" => "地址信息", "block information" => "区块信息", "Usage" => "用法", "Find Height" => "查找高度", "input a valid height" => "输入一个有效高度", "The specified block could not be found." => "区块未找到", "The following example shows a correct URL for checking the balance of an address, disregarding transactions with less than 3 confirmations (the confirmation argument is always optional, the default value is 1). All other queries which take 1 or more arguments use the same arg1 and arg2 parameter names as shown below." => "以下示例显示了用于检查地址余额的正确URL，忽略少于3个确认的事务（确认参数始终是可选的，默认值为1）。 使用1个或更多参数的所有其他查询使用相同的arg1和arg2参数名称，如下所示。", "Or if URL rewriting is active you can use this more friendly format" => "或者如果URL重写是活动的，您可以使用这种更友好的格式", "not found" => "数据未找到", "Statistics" => "统计", "Transaction Details" => "交易详情", "Inputs" => "输入", "Outputs" => "输出", "list Stats" => "输出各项统计数据", "list API" => "输出各项API 接口",];			$hk = ['Block Explorer' => '區塊瀏覽器', 'Home' => '主頁', 'Stats' => '統計', 'Search' => '搜索', 'API' => 'API文檔', 'Search for block, tx or address' => '搜索交易ID，地址，區塊高度', 'Latest Blocks' => '最新區塊', 'Number' => '高度', 'Time' => '時間', 'Difficulty' => '難度係數', 'Nonce' => '隨機數', 'Transactions' => '交易記錄', 'Size' => '大小', 'Latest Transactions' => '最新交易記錄', 'Transaction ID' => '交易ID', 'Age' => '時間', 'Amount Sent' => '數量', 'Other Pages' => '其他頁面', 'Orphaned Blocks' => '孤立區塊', 'list of valid blocks not in the main chain' => '不在主鏈中的有效塊的列表', 'Memory Pool' => '礦池', 'list of transactions currently in our memory pool' => '礦池中交易列表', 'Connected Peers' => '連接池', 'list of nodes currently connected to our node' => '當前節點列表', 'Status' => '狀態', 'Connections' => '連接數', 'offline' => '離線', 'ok' => '正常', 'not synced' => '未同步', 'using testnet' => '測試網絡', 'rpc error' => 'RPC錯誤', 'main chain' => '主鏈', 'orphan chain' => '孤鏈', 'Block' => '塊', 'Summary' => '概覽', 'Version' => '版本', 'Confirmations' => '確認', 'Timestamp' => '時間戳', 'Hashes' => '哈希值', 'Previous Block' => '上一區塊', 'Next Block' => '下一區塊', 'Block Hash' => '當前', 'Master Hash' => '主哈希', 'Merkle Root' => '二進制哈希樹根', 'Fee' => '交易費', 'Total' => '總計', 'block reward' => '區塊獎勵', 'IP Address' => 'IP地址', 'Port' => '端口', 'conntime' => '連接時間', 'Coin supply' => '幣供應', 'Unmined coins' => '待挖出', 'Block Count' => '區塊總計', 'Avg. Block Time' => '平均出塊時間', 'minutes' => '分鐘', 'days' => '天', 'Hash Rate' => '哈希率', 'Run Time' => '總時間', 'Search Blockchain' => '搜索區塊鏈', 'Find Address' => '查找地址', 'input a valid address' => '輸入一個有效地址', 'Find Transaction' => '查找交易', 'input a valid txid' => '輸入一個有效交易ID', 'Find Block' => '查找塊', 'input valid block hash' => '輸入一個有效的塊哈希', 'Query API' => '查詢API', 'Network Data' => '網絡數據', 'current mining difficulty' => '當前採礦困難係數', 'estimated hash rate' => '估計哈希率', 'current block height' => '當前區塊高度', 'hash of latest block' => '最後區塊哈希', 'Coin Data' => '幣數據', 'current block reward' => '當前區塊獎勵', 'total coins mined' => '總共挖礦幣量', 'total unmined coins' => '未挖出幣量', 'time since first block (secs)' => '區塊鏈累計運行時間', 'Transaction Data' => '交易數據', 'total tx input value' => '總TX輸入值', 'total tx output value' => '總TX輸出值', 'tx fee value (inputs - outputs)' => 'tx費用值（輸入 - 輸出）', 'number of tx,s in blockchain' => '塊中的TX，S的數量', 'Address Data' => '地址數據', 'balance of address' => '對應地址資產', 'withdrawal limit of address' => '提現地址限制', 'block when address last used' => '上次使用區塊', 'number of non-empty addresses' => '非空地址數', 'JSON Data' => 'JSON數據', 'general information' => '常規信息', 'transaction information' => '交易信息', 'address information' => '地址信息', 'block information' => '區塊信息', 'Usage' => '用法', 'Find Height' => '查找高度', 'input a valid height' => '輸入一個有效高度', 'The specified block could not be found.' => '區塊未找到', 'The following example shows a correct URL for checking the balance of an address, disregarding transactions with less than 3 confirmations (the confirmation argument is always optional, the default value is 1). All other queries which take 1 or more arguments use the same arg1 and arg2 parameter names as shown below.' => '以下示例顯示了用於檢查地址餘額的正確URL，忽略少於3個確認的事務（確認參數始終是可選的，默認值為1）。使用1個或更多參數的所有其他查詢使用相同的ARG1和ARG2參數名稱，如下所示。', 'Or if URL rewriting is active you can use this more friendly format' => '或者如果URL重寫是活動的，您可以使用這種更友好的格式', 'not found' => '數據未找到', 'Statistics' => '統計', 'Transaction Details' => '交易詳情', 'Inputs' => '輸入', 'Outputs' => '輸出', 'list Stats' => '輸出各項統計數據', 'list API' => '輸出各項API接口',];			$jp = ['Block Explorer' => 'ブロックブラウザ', 'Home' => '家', 'Stats' => '統計', 'Search' => '検索', 'API' => 'APIドキュメント', 'Search for block, tx or address' => '検索トランザクションID、アドレス、ブロックの高さ', 'Latest Blocks' => '最新のブロック', 'Number' => '高さ', 'Time' => '時間', 'Difficulty' => '難易度係数', 'Nonce' => '乱数', 'Transactions' => '取引記録', 'Size' => 'サイズ', 'Latest Transactions' => '最新の取引', 'Transaction ID' => 'トランザクションID', 'Age' => '時間', 'Amount Sent' => '数量', 'Other Pages' => 'その他のページ', 'Orphaned Blocks' => '孤立ブロック', 'list of valid blocks not in the main chain' => '主鎖に有効なブロックではないのリスト', 'Memory Pool' => '鉱山プール', 'list of transactions currently in our memory pool' => 'トランザクションリスト鉱業プール', 'Connected Peers' => '接続プーリング', 'list of nodes currently connected to our node' => '現在のノードリスト', 'Status' => '状態', 'Connections' => '接続', 'offline' => 'オフライン', 'ok' => 'ノーマル', 'not synced' => '同期していません', 'using testnet' => 'テストネットワーク', 'rpc error' => 'RPCエラー', 'main chain' => 'バックボーン', 'orphan chain' => '孤独チェーン', 'Block' => 'ブロック', 'Summary' => '概要', 'Version' => '版', 'Confirmations' => '確かめます', 'Timestamp' => 'タイムスタンプ', 'Hashes' => 'ハッシュ値', 'Previous Block' => 'ブロックオン', 'Next Block' => '次のブロック', 'Block Hash' => '現在', 'Master Hash' => '主なハッシュ', 'Merkle Root' => 'バイナリハッシュ根', 'Fee' => '取引手数料', 'Total' => 'トータル', 'block reward' => 'ブロック賞', 'IP Address' => 'IPアドレス', 'Port' => 'ポート', 'conntime' => '接続時間', 'Coin supply' => 'マネーサプライ', 'Unmined coins' => '掘ったこと', 'Block Count' => '総ブロック', 'Avg. Block Time' => 'ブロックの平均時間', 'minutes' => '分', 'days' => '日', 'Hash Rate' => 'ハッシュ率', 'Run Time' => '合計時間', 'Search Blockchain' => '検索ブロックチェーン', 'Find Address' => '住所を検索', 'input a valid address' => '有効なアドレスを入力します。', 'Find Transaction' => '取り引きを探します', 'input a valid txid' => '有効なトランザクションIDを入力します。', 'Find Block' => 'ブロックを探します', 'input valid block hash' => '有効なブロックハッシュを入力します。', 'Query API' => 'クエリAPI', 'Network Data' => 'ネットワークデータ', 'current mining difficulty' => '現在の採掘難易度係数', 'estimated hash rate' => '推定率をハッシュ', 'current block height' => '現在のブロックの高さ', 'hash of latest block' => 'ハッシュの最後のブロック', 'Coin Data' => '通貨データ', 'current block reward' => '現在のブロックの報酬', 'total coins mined' => '金採掘の総量', 'total unmined coins' => 'いくら金を掘り起こしません', 'time since first block (secs)' => 'ブロック鎖の総走行時間', 'Transaction Data' => '取引データ', 'total tx input value' => '合計値TXを入力します。', 'total tx output value' => '総出力値TX', 'tx fee value (inputs - outputs)' => 'TXコスト値（入力 - 出力）', 'number of tx,s in blockchain' => 'ブロックTXの数は、sがあります', 'Address Data' => 'アドレスデータ', 'balance of address' => 'アドレス対応資産', 'withdrawal limit of address' => 'アドレス制限の引き出し', 'block when address last used' => '最後に使用されるブロック', 'number of non-empty addresses' => 'null以外のアドレスの数', 'JSON Data' => 'JSONデータ', 'general information' => '一般情報', 'transaction information' => '取引情報', 'address information' => 'アドレス情報', 'block information' => 'ブロック情報', 'Usage' => '使い方', 'Find Height' => '高さを探します', 'input a valid height' => '有効な高さを入力します。', 'The specified block could not be found.' => 'ブロックが見つかりません', 'The following example shows a correct URL for checking the balance of an address, disregarding transactions with less than 3 confirmations (the confirmation argument is always optional, the default value is 1). All other queries which take 1 or more arguments use the same arg1 and arg2 parameter names as shown below.' => '次の例は、以下の3つの確認のトランザクションを（確認パラメータは常にオプションで、デフォルトは1である）を無視し、残高をチェックするための正しいURLアドレスを示します。すべては、次のように同じ名前が、一つ以上のクエリパラメータを使用して他のパラメータをarg1がarg2で指定して使用します。', 'Or if URL rewriting is active you can use this more friendly format' => 'またはURLの書き換えが有効になっている場合は、このもっとフレンドリーなフォーマットを使用することができます', 'not found' => 'データが見つかりません', 'Statistics' => '統計', 'Transaction Details' => '取引の詳細', 'Inputs' => 'エントリー', 'Outputs' => '輸出', 'list Stats' => '統計データの出力', 'list API' => 'APIインターフェイスの出力',];			$spanish = ['Block Explorer' => 'Bloquear navegador', 'Home' => 'casa', 'Stats' => 'estadística', 'Search' => 'búsqueda', 'API' => 'documentación de la API', 'Search for block, tx or address' => 'Buscar ID de transacción, dirección, altura del bloque', 'Latest Blocks' => 'El último bloque', 'Number' => 'altura', 'Time' => 'tiempo', 'Difficulty' => 'factor de dificultad', 'Nonce' => 'Números Aleatorios', 'Transactions' => 'Registro de transacciones', 'Size' => 'tamaño', 'Latest Transactions' => 'Las últimas transacciones', 'Transaction ID' => 'ID de transacción', 'Age' => 'tiempo', 'Amount Sent' => 'cantidad', 'Other Pages' => 'otras páginas', 'Orphaned Blocks' => 'bloques aislados', 'list of valid blocks not in the main chain' => 'Lista de bloques válidos que no están en la cadena principal', 'Memory Pool' => 'Las piscinas de la mina', 'list of transactions currently in our memory pool' => 'Transacción piscina minera Lista', 'Connected Peers' => 'La agrupación de conexiones', 'list of nodes currently connected to our node' => 'La lista de nodos actual', 'Status' => 'estado', 'Connections' => 'conexiones', 'offline' => 'desconectado', 'ok' => 'normal', 'not synced' => 'no sincronizado', 'using testnet' => 'prueba de red', 'rpc error' => 'error de RPC', 'main chain' => 'columna vertebral', 'orphan chain' => 'cadena Solitary', 'Block' => 'bloque', 'Summary' => 'visión de conjunto', 'Version' => 'edición', 'Confirmations' => 'confirmar', 'Timestamp' => 'Marca de tiempo', 'Hashes' => 'valor hash', 'Previous Block' => 'En un bloque', 'Next Block' => 'El siguiente bloque', 'Block Hash' => 'actual', 'Master Hash' => 'picadillo principal', 'Merkle Root' => 'raíces binarios de hash', 'Fee' => 'Cuota de transacción', 'Total' => 'total', 'block reward' => 'Bloquear premio', 'IP Address' => 'direcciones IP', 'Port' => 'puerto', 'conntime' => 'tiempo de conexión', 'Coin supply' => 'La oferta de dinero', 'Unmined coins' => 'Ser desenterrado', 'Block Count' => 'Bloquear total', 'Avg. Block Time' => 'El tiempo medio del bloque', 'minutes' => 'minuto', 'days' => 'día', 'Hash Rate' => 'tasa de hash', 'Run Time' => 'El tiempo total', 'Search Blockchain' => 'cadena de búsqueda de bloque', 'Find Address' => 'Buscar dirección', 'input a valid address' => 'Ingrese una dirección válida', 'Find Transaction' => 'Encontrar un acuerdo', 'input a valid txid' => 'Introduzca un ID de transacción válida', 'Find Block' => 'Encuentra bloque', 'input valid block hash' => 'Introduzca un hash de bloque válido', 'Query API' => 'consulta de la API', 'Network Data' => 'datos de la red', 'current mining difficulty' => 'El factor de dificultad actual de minería', 'estimated hash rate' => 'Hash tasa estimada', 'current block height' => 'La altura del bloque actual', 'hash of latest block' => 'El último bloque de hachís', 'Coin Data' => 'datos moneda', 'current block reward' => 'La recompensa bloque actual', 'total coins mined' => 'Una cantidad total de dinero minero', 'total unmined coins' => 'Ninguna cantidad de dinero desenterrado', 'time since first block (secs)' => 'cadena de bloque de tiempo total de ejecución', 'Transaction Data' => 'Los datos de comercio', 'total tx input value' => 'Introduzca el valor total TX', 'total tx output value' => 'El tx total de valor de salida', 'tx fee value (inputs - outputs)' => 'valor de coste tx (entrada - salida)', 'number of tx,s in blockchain' => 'El número de bloques TX, s es', 'Address Data' => 'datos de direcciones', 'balance of address' => 'activos dirección de correspondencia', 'withdrawal limit of address' => 'retiros límite de direcciones', 'block when address last used' => 'Última bloque utilizado', 'number of non-empty addresses' => 'El número de dirección no nulo', 'JSON Data' => 'los datos JSON', 'general information' => 'Información general', 'transaction information' => 'Información sobre la Operativa', 'address information' => 'información de la dirección', 'block information' => 'información de bloques', 'Usage' => 'uso', 'Find Height' => 'Encuentra altura', 'input a valid height' => 'Introduzca una altura válida', 'The specified block could not be found.' => 'Bloque no encontrado', 'The following example shows a correct URL for checking the balance of an address, disregarding transactions with less than 3 confirmations (the confirmation argument is always optional, the default value is 1). All other queries which take 1 or more arguments use the same arg1 and arg2 parameter names as shown below.' => 'El siguiente ejemplo muestra la dirección URL correcta para comprobar saldos, haciendo caso omiso de menos de tres transacción confirmada (parámetro de confirmación es siempre opcional, por defecto es 1). Todos utilizan los mismos nombres arg1 y arg2 otros parámetros utilizando uno o más parámetros de consulta, de la siguiente manera.', 'Or if URL rewriting is active you can use this more friendly format' => 'O si la reescritura de URL está activo, puede utilizar este formato más amigable', 'not found' => 'No se encontraron datos', 'Statistics' => 'estadística', 'Transaction Details' => 'Detalles de la transacción', 'Inputs' => 'entrada', 'Outputs' => 'exportación', 'list Stats' => 'Salida de datos estadísticos', 'list API' => 'La salida de la interfaz API',];			$german = ['Block Explorer' => 'Block-Browser', 'Home' => 'Zuhause', 'Stats' => 'Statistik', 'Search' => 'Suche', 'API' => 'API-Dokumentation', 'Search for block, tx or address' => 'Suchen Transaktions-ID, Adresse, Blockhöhe', 'Latest Blocks' => 'Der neueste Block', 'Number' => 'Höhe', 'Time' => 'Zeit', 'Difficulty' => 'Schwierigkeitsfaktor', 'Nonce' => 'Random Number', 'Transactions' => 'Transaktionsaufzeichnung', 'Size' => 'Größe', 'Latest Transactions' => 'neuesten Transaktionen', 'Transaction ID' => 'Transaktions-ID', 'Age' => 'Zeit', 'Amount Sent' => 'Menge', 'Other Pages' => 'Weitere Seiten', 'Orphaned Blocks' => 'isolierte Blöcke', 'list of valid blocks not in the main chain' => 'Liste der gültigen Blöcke nicht in der Hauptkette', 'Memory Pool' => 'Mine Pools', 'list of transactions currently in our memory pool' => 'Transaktionsliste Bergbau Pool', 'Connected Peers' => 'Connection Pooling', 'list of nodes currently connected to our node' => 'Die aktuelle Knotenliste', 'Status' => 'Zustand', 'Connections' => 'Verbindungen', 'offline' => 'offline', 'ok' => 'normal', 'not synced' => 'nicht synchronisiert', 'using testnet' => 'Test-Netzwerk', 'rpc error' => 'RPC-Fehler', 'main chain' => 'Rückgrat', 'orphan chain' => 'Solitary Kette', 'Block' => 'Block', 'Summary' => 'Überblick', 'Version' => 'Ausgabe', 'Confirmations' => 'bestätigen', 'Timestamp' => 'Zeitstempel', 'Hashes' => 'Hash-Wert', 'Previous Block' => 'Auf einem Block', 'Next Block' => 'Der nächste Block', 'Block Hash' => 'Strom', 'Master Hash' => 'Haupt Hash', 'Merkle Root' => 'Binäre Hash-Wurzeln', 'Fee' => 'Transaktionsgebühr', 'Total' => 'gesamt', 'block reward' => 'Block Auszeichnung', 'IP Address' => 'IP-Adressen', 'Port' => 'Port', 'conntime' => 'Verknüpfzeit', 'Coin supply' => 'Geldvolumen', 'Unmined coins' => 'Werden ausgegraben', 'Block Count' => 'Total Block', 'Avg. Block Time' => 'Die durchschnittliche Zeit des Blockes', 'minutes' => 'Minute', 'days' => 'Tag', 'Hash Rate' => 'Hash-Rate', 'Run Time' => 'Gesamtzeit', 'Search Blockchain' => 'Suchen Blockkette', 'Find Address' => 'Adresse suchen', 'input a valid address' => 'Geben Sie eine gültige Adresse', 'Find Transaction' => 'Finden Sie einen Deal', 'input a valid txid' => 'Geben Sie eine gültige Transaktionsnummer', 'Find Block' => 'finden Block', 'input valid block hash' => 'Geben Sie eine gültige Blockhashes', 'Query API' => 'Query-API', 'Network Data' => 'Network Data', 'current mining difficulty' => 'Der aktuelle Bergbau Schwierigkeitsfaktor', 'estimated hash rate' => 'Hash geschätzte Rate', 'current block height' => 'Die Höhe des aktuellen Blocks', 'hash of latest block' => 'Der letzte Block von Hash', 'Coin Data' => 'Währungsdaten', 'current block reward' => 'Die aktuelle Block Belohnung', 'total coins mined' => 'Ein Gesamtgeldbetrag Bergbau', 'total unmined coins' => 'Kein Geld der Welt ausgegraben', 'time since first block (secs)' => 'Blockkette Gesamtlaufzeit', 'Transaction Data' => 'Handelsdaten', 'total tx input value' => 'Geben Sie den Gesamtwert tx', 'total tx output value' => 'Der Gesamtausgabewert tx', 'tx fee value (inputs - outputs)' => 'tx Kostenwert (input - output)', 'number of tx,s in blockchain' => 'Die Anzahl der Blöcke tx, s ist', 'Address Data' => 'Adressdaten', 'balance of address' => 'Adressen-Korrespondenz Vermögenswerte', 'withdrawal limit of address' => 'Adreßgrenzdetektor Entnahmen', 'block when address last used' => 'Zuletzt verwendete Block-', 'number of non-empty addresses' => 'Die Anzahl der Nicht-Null-Adresse', 'JSON Data' => 'JSON-Daten', 'general information' => 'Allgemeine Informationen', 'transaction information' => 'Handelsinformationen', 'address information' => 'Adressinformationen', 'block information' => 'Blockinformation', 'Usage' => 'Verwendung', 'Find Height' => 'finden Höhe', 'input a valid height' => 'Geben Sie eine gültige Höhe', 'The specified block could not be found.' => 'Blockieren Sie nicht gefunden', 'The following example shows a correct URL for checking the balance of an address, disregarding transactions with less than 3 confirmations (the confirmation argument is always optional, the default value is 1). All other queries which take 1 or more arguments use the same arg1 and arg2 parameter names as shown below.' => 'Das folgende Beispiel zeigt die korrekte URL-Adresse für Waagen überprüft und ignoriert weniger als drei bestätigte Transaktion (Bestätigung Parameter ist immer optional, Standard ist 1). Alle nutzen die gleichen Namen arg1 und arg2 andere Parameter eines oder mehr Abfrageparameter wie folgt verwendet.', 'Or if URL rewriting is active you can use this more friendly format' => 'Oder wenn URL-Rewriting aktiv ist, können Sie dieses Freundliche Format verwenden', 'not found' => 'Keine Daten gefunden', 'Statistics' => 'Statistik', 'Transaction Details' => 'Details der Transaktion', 'Inputs' => 'Eintrag', 'Outputs' => 'Export', 'list Stats' => 'Ausgabe von statistischen Daten', 'list API' => 'Der Ausgang der API-Schnittstelle',];			switch (trim(cookie("lang"))) {				case "en":					$lang_map = [];					break;				case "hk":					$lang_map = $hk;					break;				case "jp":					$lang_map = $jp;					break;				case "spanish":					$lang_map = $spanish;					break;				case "german":					$lang_map = $german;					break;				case "cn":				default:					$lang_map = $cn;					break;			}			$lang_map_arr = [];			foreach ($lang_map as $k => $val) {				$k = strtolower(str_replace([" ", "　", "\t", "\n", "\r"], '', $k));				$lang_map_arr[$k] = $val;			}			$key = strtolower(str_replace([" ", "　", "\t", "\n", "\r"], '', $key));			if (isset($lang_map_arr[$key])) {				return $lang_map_arr[$key];			} else {				return $base_key;			}		}		eval("function qklang(){return call_user_func_array(\"\\home\\qklang\",func_get_args());}");	}} 