<?phpnamespace admin;use Move\db;use Move\ext\page;class builder extends admin{	private $_url = "/admin";	private $_title = [];	private $_button = [];	private $_search = [];	private $_keylist = [];	private $_data = [];	private $_pre_data = [];	private $_pages = [];	private $_display = '';	public function __construct($table = null, $where = null, $type = "list")	{		parent::__construct();		if ($table && $type == "list") {			$this->list_data($table, $where);		}		if ($table && $type == "edit") {			$res = db::table($table)->where($where)->find();			if ($res) {				$this->_pre_data = $res;				$this->_data = $res;			}		}	}	public function get_data()	{		return $this->_data;	}	public function add_data($name = null, $data = null)	{		if ($name) {			$this->_data[$name] = $data;			$this->_pre_data = $this->_data;		} else {			$this->_data = $data;			$this->_pre_data = $this->_data;		}		return $this;	}	public function list_data($table = null, $where = null, $ext_field = '')	{		if ($table) {			$gets = $_GET;			foreach ($gets as $k => $v) {				$gets[$k] = trim($v);			}			if (isset($gets["status"]) && $gets["status"] > 0) {				$where["status"] = $gets["status"] - 1;			}			if (isset($gets["type"]) && $gets["type"]) {				$where["type"] = $gets["type"];			}			if (isset($gets["coinname"]) && $gets["coinname"]) {				$where["coinname"] = $gets["coinname"];			}			if (isset($gets["market"]) && $gets["market"]) {				$where["market"] = $gets["market"];			}			if (isset($gets["idcard_rz"]) && $gets["idcard_rz"] > 0) {				$where["idcard_rz"] = $gets["idcard_rz"] - 1;			}			if (isset($gets["addtime_str"]) && $gets["addtime_str"]) {				$where["addtime#>="] = strtotime($gets["addtime_str"]);			}			if (isset($gets["addtime_end"]) && $gets["addtime_end"]) {				$where["addtime#<="] = strtotime($gets["addtime_end"]);			}			if (isset($gets["field"]) && $gets["field"] && isset($gets["name"]) && $gets["name"]) {				if (strpos($gets["field"], "_c_") !== false) {					$arr = explode("_c_", $gets["field"]);					if ($arr[3] == "id") {						$res = db::table($arr[1])->where([$arr[3] => $gets["name"]])->select();					} else {						$res = db::table($arr[1])->where([$arr[3] . "#like" => "%" . $gets["name"] . "%"])->select();					}					if ($res) {						foreach ($res as $k => $v) {							$res_ids[] = $v[$arr[2]];						}						if ($table == "trade_log" && $arr[0] == "userid") {							$where[$arr[0] . "|peerid"] = $res_ids;						} else {							$where[$arr[0] . "#in"] = $res_ids;						}					} else {						$where[$arr[0]] = "-1";					}				} else {					if ($gets["field"] == "id") {						$where[$gets["field"]] = $gets["name"];					} else {						$where[$gets["field"] . "#like"] = "%" . $gets["name"] . "%";					}				}			} else {			}			if (isset($where['cn' . "#like"])) {				$where['name' . "#like"] = $where['cn' . "#like"];				unset($where['cn' . "#like"]);			}			$order = isset($gets["order"]) ? $gets["order"] : "id_desc";			$order = str_replace("_", " ", $order);			$size = isset($ext_field["size"]) ? $ext_field["size"] : 15;			$count = db::table($table)->where($where)->count();			$PageObj = new page($count, $size);			$show = $PageObj->show();			$list = db::table($table)->where($where)->order($order)->limit($PageObj->firstRow, $PageObj->listRows)->select();			$this->_data = $list;			$this->_pre_data = $this->_data;			$this->_pages = $show;		}		return $this;	}	public function data($data)	{		$this->_pre_data = $this->_data = isset($data['list']) ? $data['list'] : null;		$this->_pages = isset($data['show']) ? $data['show'] : null;		return $this;	}	public function set_display($var)	{		$this->_display = $var;		return $this;	}	public function url($url = '')	{		if (!$url) {			$this->_url = '/admin';		}		return $this;	}	public function title($title = '', $suggest = '', $list_title = '', $url = '')	{		$this->_title = ['title' => $title, 'suggest' => $suggest ? $suggest : "这里是" . $title, 'list_title' => $list_title, 'url' => $this->_url . $url,];		return $this;	}	public function button($name, $title, $url, $subtitle = '')	{		$this->_button[$name] = ['title' => $title, 'url' => $this->_url . $url, 'subtitle' => $subtitle,];		return $this;	}	public function search($name = 'key', $attr = '', $type = 'text')	{		$this->_search[] = ['name' => $name, 'attr' => $attr, 'type' => $type,];		return $this;	}	public function key($name, $title, $type, $opt = null, $subtitle = '', $width = '150px')	{		$key = ['name' => $name, 'title' => $title, 'type' => $type, 'opt' => $opt, 'subtitle' => $subtitle, 'width' => $width,];		$this->_keylist[] = $key;		return $this;	}	public function set_status($id, $status, $table, $title = null)	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$ids = array_unique((array)$id);		$name = strtolower(config("controller_name") . "_" . config("action_name"));		$action = db::table('auth_action')->where(['name' => $name])->find();		if ($action) {			$action_title = $action['title'];		} else {			$this->check_action($title);			$action_title = $name;		}		if ($status == -1) {			$rs = db::table($table)->where(["id#in" => $ids])->delete();			db::table('auth_action_log')->add(["adminid" => session("admin_id"), 'name' => '删除' . $action_title, 'ip' => get_ip(), 'addtime' => time(), 'status' => 1]);		} else {			$rs = db::table($table)->where(['id#in' => $ids])->save(['status' => $status]);			db::table('auth_action_log')->add(["adminid" => session("admin_id"), 'name' => '更新' . $action_title, 'ip' => get_ip(), 'addtime' => time(), 'status' => 1]);		}		if ($rs === false) {			ajax('操作失败!');		} else {			ajax('操作成功!', 1);		}	}	private function convert_tltle($table, $from_id, $to_id, $name)	{		$res = db::table($table)->where([$to_id => $from_id])->find();		return $res[$name];	}	private function convert_key($from, $to, $convertFunction)	{		foreach ($this->_keylist as &$key) {			if ($key['type'] == $from) {				$key['type'] = $to;				foreach ($this->_data as $dkey => &$data) {					$value =& $data[$key['name']];					$value = $convertFunction($value, $key, $this->_pre_data[$dkey]);					unset($value);				}				unset($data);			}		}		unset($key);	}	public function lists()	{		$this->convert_key('time', 'text', function ($value) {			if ($value) {				return addtime($value);			} else {				return '---';			}		});		$this->convert_key('select', 'text', function ($value, $key) {			return $key['opt'][$value];		});		$this->convert_key('img', 'text', function ($value) {			if ($value) {				return "<img src='" . APP_UPLOAD . $value . "' width='24'>";			} else {				return '---';			}		});		$this->convert_key('link', 'text', function ($value, $key, $item) {			$res = '';			$flag = 1;			foreach ($key['opt'] as $k => $v) {				if (isset($v["module"])) {					$this->_url = $v["module"];				}				$url = $this->_url . str_replace('###', $item[$v["field"]], $v['url']);				if ($v["type"] == "button") {					$v["title"] = $this->convert_tltle($v["title"]['table'], $item[$v["title"]['from_id']], $v["title"]['to_id'], $v["title"]['title']);				}				if ($v["type"] == "button2" && $v["exts"]) {					foreach ($v["exts"] as $k1 => $v1) {						$flag = in_array($item[$k1], $v1) ? 1 : 0;					}				}				if ($flag) {					$color = isset($v["color"]) && $v["color"] ? "style='color:" . $v["color"] . "' " : "";					if (strpos($v["title"], "@") !== false) {						$v["title"] = $item[trim($v["title"], "@")];					}					if (isset($v["target"])) {						$res .= "<a  href=\"$url\" " . $color . " target='" . $v["target"] . "'>" . $v["title"] . "</a> ";					} else {						if (isset($v['ajax']) && $v['ajax']) {							$res .= "<a  class='ajax-get' href=\"$url\" " . $color . " >" . $v["title"] . "</a> ";						} else {							$res .= "<a   href=\"$url\" " . $color . " >" . $v["title"] . "</a> ";						}					}				}			}			return $res;		});		$this->assign('title', $this->_title);		$this->assign('button', $this->_button);		$this->assign('search', $this->_search);		$this->assign('keylist', $this->_keylist);		$this->assign('data', $this->_data);		$this->assign('pages', $this->_pages);		$this->check_action($this->_title['title']);		$this->display($this->_display ? $this->_display : "builder:lists");	}	public function edit()	{		foreach ($this->_keylist as $k => $v) {			if (isset($this->_pre_data[$v["name"]])) {				$this->_keylist[$k]["value"] = $this->_pre_data[$v["name"]];			} else {				$this->_keylist[$k]["value"] = "";			}			if ($v['type'] == 'time') {				$this->_keylist[$k]['value'] = isset($this->_pre_data[$v['name']]) ? addtime($this->_pre_data[$v['name']]) : "";			}			if ($v['opt'] && !is_array($v['opt'])) {				$arr = explode('_c_', $v['opt']);				$res = db::table($arr[0])->select();				$this->_keylist[$k]['opt'] = '';				foreach ($res as $ko => $vo) {					$this->_keylist[$k]['opt'][$vo[$arr[1]]] = $vo[$arr[2]];				}			}		}		$this->assign('title', $this->_title);		$this->assign('button', $this->_button);		$this->assign('search', $this->_search);		$this->assign('keylist', $this->_keylist);		$this->assign('data', $this->_data);		$this->check_action($this->_title['title']);		$this->display($this->_display ? $this->_display : "builder:edit");	}}