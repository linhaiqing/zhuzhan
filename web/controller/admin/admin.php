<?phpnamespace admin;use Move\db;use Move\mvc\controller;class admin extends controller{	protected $admin_id = "";	public $msg = [];	public function __construct()	{		parent::__construct();		defined('APP_DEMO') or define('APP_DEMO', 0);		if (!session("admin_auth")) {			session(null);			redirect('/admin/login/index');		}		if (!session("admin_id")) {			session(null);			redirect('/admin/login/index');		} else {			$this->admin_id = session("admin_id");		}		if (session("admin_id_yidi")) {			redirect('/admin/login/yidi');		}		if (!session("admin_id_xss" . session("admin_id")) || session("admin_id_xss" . session("admin_id")) != md5(session("admin_id") . get_ip())) {			// session(null);			// redirect('/index/index');		}		if (session('lock_screen')) {			redirect('/admin/login/index');		}		$auth = $this->check_auth();		$this->menu = $this->get_menu($auth);		$currentVersion = file_get_contents(APP_PATH . '/backup/version.ini');		$nextVersion = db::table('version')->where(['status' => 0])->order('name desc')->find('name');		if ($nextVersion && $currentVersion < $nextVersion) {			$this->assign('version_up', 1);		} else {			$this->assign('version_up', 0);		}		$this->assign('version', $currentVersion);		$moble_menu = db::table("version_game")->where(['anzhuang' => 1])->order('sort asc')->select();		$auth_map = json_decode($auth['rules'], true);		$moble_menu_s = [];		foreach ($moble_menu as $k => $v) {			$root_map = [1];			if (in_array($this->admin_id, $root_map)) {				$moble_menu_s[$k] = $v;			} else {				$sys_menu_id = db::table('sys_menu')->where(['url' => $v['name'] . '/index'])->find('id');				if ($sys_menu_id && $auth_map && in_array($sys_menu_id, $auth_map)) {					$moble_menu_s[$k] = $v;				}			}		}		$this->assign('moble_menu', $moble_menu_s);		$this->assign('controller_name', config("controller_name"));	}	public function check_admin()	{		defined('APP_XSS') or define('APP_XSS', 0);		if (APP_XSS == 1) {			if (isset($_SERVER["HTTP_USER_AGENT"]) && $_SERVER["HTTP_USER_AGENT"]) {				if (session("ADMIN_ID_" . $this->admin_id) != md5($_SERVER["HTTP_USER_AGENT"] . get_ip())) {					session("admin_id", null);					redirect('/admin/login/index');				}			} else {				session("admin_id", null);				redirect('/admin/login/index');			}		}	}	public function check_action($title = null)	{		$name = strtolower(config("controller_name") . "_" . config("action_name"));		$action = db::table('auth_action')->where(['name' => $name])->find();		if (!$action) {			db::table('auth_action')->add(['name' => $name, 'adminid' => session("admin_id"), 'title' => $title, 'remark' => "{userr}|" . $title, 'status' => 1]);		}	}	public function check_auth()	{		$root_map = [1];		if (in_array($this->admin_id, $root_map)) {			return true;		}		$msg = "";		$controller_name = config("controller_name");		$action_name = config("action_name");		if (!$cur_menu = db::table('sys_menu')->where(["url" => strtolower($controller_name . "/" . $action_name)])->find()) {			$msg = "当前菜单不存在";		}		$auth_user = db::table("auth_user")->where(["uid" => $this->admin_id])->find();		if (!$auth_user) {			$msg = "当前用户未分配权限";		}		if (!$auth_user["status"]) {			$msg = "当前用户权限已禁用";		}		$auth_group = db::table("auth_group")->where(["id" => $auth_user['group_id']])->find();		if (!$auth_group) {			$msg = "当前用户未分配权限";		}		$auth_map = json_decode($auth_group['rules'], true);		if (!$auth_map) {			$auth_map = [];		}		if (!in_array($cur_menu['id'], $auth_map)) {			$msg = "无权访问当前页面";		}		if ($msg) {			$this->msg = $msg;			$this->display("auth:notice");			exit();		} else {			return $auth_group;		}	}	public function get_menu($auth = null)	{		if (isset($auth['rules']) && $auth['rules']) {			$auth_map = json_decode($auth['rules'], true);		} else {			$auth_map = '';		}		$root_map = [1];		if (in_array($this->admin_id, $root_map)) {			$res["top_lists"] = db::table("sys_menu")->where(["pid" => 0, "hide" => 0])->order("sort asc")->select();		} else {			if ($auth_map) {				$res["top_lists"] = db::table("sys_menu")->where(["pid" => 0, "hide" => 0, 'id#in' => $auth_map])->order("sort asc")->select();			} else {				$res["top_lists"] = db::table("sys_menu")->where(["pid" => 0, "hide" => 0])->order("sort asc")->select();			}		}		$controller_name = config("controller_name");		$action_name = config("action_name");		$cur_menu = db::table("sys_menu")->where(["url" => $controller_name . "/" . $action_name, "pid#>" => 0])->find();		if ($cur_menu) {			$p_menu = db::table("sys_menu")->where(["id" => $cur_menu["pid"]])->find();			if (!$p_menu) {				ajax("当前菜单未指定父菜单");			}			if ($p_menu["pid"] == 0) {				$res["cur"]["pname"] = $cur_menu["group"];				$res["cur"]["pid"] = $p_menu["id"];				$res["cur"]["left_id"] = $cur_menu["id"];				if (in_array($this->admin_id, $root_map)) {					$left_lists = db::table("sys_menu")->where(["pid" => $cur_menu["pid"], "hide" => 0])->order("sort asc")->select();				} else {					$left_lists = db::table("sys_menu")->where(["pid" => $cur_menu["pid"], "hide" => 0, 'id#in' => $auth_map])->order("sort asc")->select();				}			} else {				$pp_menu = db::table("sys_menu")->where(["id" => $p_menu["pid"]])->find();				if ($pp_menu["pid"] != 0) {					ajax("当前菜单层次超过三层");				}				$res["cur"]["pname"] = $p_menu["group"];				$res["cur"]["pid"] = $pp_menu["id"];				$res["cur"]["left_id"] = $p_menu["id"];				if (in_array($this->admin_id, $root_map)) {					$left_lists = db::table("sys_menu")->where(["pid" => $p_menu["pid"], "hide" => 0])->order("sort asc")->select();				} else {					$left_lists = db::table("sys_menu")->where(["pid" => $p_menu["pid"], "hide" => 0, 'id#in' => $auth_map])->order("sort asc")->select();				}			}			foreach ($left_lists as $k => $val) {				$res["left_lists"][$val["group"]][] = $val;			}		} else {			$res["left_lists"] = false;		}		return $res;	}	protected function dieBack($msg = '没有符合操作条件的记录,请返回')	{		$html = "<div>" . $msg . "</div><button onclick=\"window.history.back()\" style=\"color:dodgerblue\">点击返回</button>";		die($html);	}	public static function is_game($name = null)	{		$info = mc("ms_info_G45T5RBSDGFDS");		if (!$info) {			return false;		}		if (!isset($info["game"]) || !$info["game"]) {			return false;		}		if (in_array($name, explode("|", $info["game"]))) {			return true;		} else {			return false;		}	}} 