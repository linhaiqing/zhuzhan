<?phpnamespace admin;use Move\db;use Move\config;use Move\cache;use move\ext\page;use Move\ext\client;class tools extends admin{	public function __construct()	{		parent::__construct();	}	public function ignore_db_auth($compare)	{		$version_game = db::table("version_game")->field("id,name,anzhuang")->select();		foreach ($version_game as $val) {			$version_game_map[$val['name']] = $val['anzhuang'];		}		krsort($version_game_map);		$data = [];		$table_pre = get_pre_table();		foreach ($compare as $key => $val) {			$continue_flag = 1;			foreach ($version_game_map as $game_name => $game_status) {				if (strpos($key, $table_pre . $game_name) === 0) {					if (!$game_status) {						$continue_flag = 0;					}					break;				}			}			if (!$continue_flag) {				continue;			}			$data[$key] = $val;		}		return $data;	}	public function movedb()	{		$_GET['ajax'] = 1;		set_time_limit(0);		$action = isset($_GET['step']) ? $_GET['step'] : "";		$TABLES_SERVER = "MOVE_TABLES_SERVER";		$TABLES_CLIENT = "MOVE_TABLES_CLIENT";		if (!$action) {			$this->display();		}		if ($action == "1") {			$tables = [];			$data = db::query("show tables;");			foreach ($data as $v) {				if (!$_name = array_shift($v)) {					continue;				}				if (strpos(strtolower($_name), "del_") === 0) {					continue;				}				$struct = db::query("show create table `" . $_name . "`;");				$struct = $struct["0"]["Create Table"];				$struct = preg_replace("/AUTO_INCREMENT=\d+/", "", $struct);				$columns = "";				$data = db::query("SHOW FULL COLUMNS FROM `" . $_name . "`");				foreach ($data as $val) {					$columns[$val['Field']] = trim($val['Type']);				}				$tables[$_name] = ["struct" => base64_encode(trim($struct)), "columns" => base64_encode(json_encode($columns))];			}			if (mc($TABLES_CLIENT, $tables, 600)) {				ajax("本地表信息 缓存成功", 1);			} else {				ajax("本地表信息 缓存失败", 1);			}		}		if ($action == "2") {			$remote_data = file_get_contents("http://demo.movesay.com/ajax/dbdata?type=type2&authcode=" . MS_CODE);			$remote_data = json_decode($remote_data, true);			if (!$remote_data || !is_array($remote_data)) {				ajax("远程DB 数据获取失败!");			}			if (mc($TABLES_SERVER, $remote_data, 600)) {				ajax("远程表信息 缓存成功", 1);			} else {				ajax("远程表信息 缓存失败", 1);			}		}		if ($action == "3") {			$a = mc($TABLES_CLIENT);			$b = mc($TABLES_SERVER);			if (!$a) {				ajax("本地表结构 缓存获取失败 刷新页面重试");			}			if (!$b) {				ajax("远程表结构 缓存获取失败 刷新页面重试");			}			$a_data = $b_data = $ab_inv = [];			foreach ($a as $k => $v) {				if (isset($b[$k])) {					if ($k != "move_user_coin" && $k != "move_user_wallet") {						$client = base64_decode($a[$k]['struct']);						$server = base64_decode($b[$k]['struct']);						if (str_replace([" ", "　", "\t", "\n", "\r"], '', $client) != str_replace([" ", "　", "\t", "\n", "\r"], '', $server)) {							$a_columns = base64_decode($a[$k]['columns']);							$b_columns = base64_decode($b[$k]['columns']);							$ab_inv[$k] = ["client" => ["struct" => $client, "columns" => $a_columns, "show" => implode(",", array_keys(json_decode($a_columns, true)))], "server" => ["struct" => $server, "columns" => $b_columns, "show" => implode(",", array_keys(json_decode($b_columns, true)))],];						}					}					unset($b[$k]);				} else {					$a_data[$k] = $v;				}			}			$a_data = $this->ignore_db_auth($a_data);			$b_data = $this->ignore_db_auth($b);			if (!empty($a_data)) {				foreach ($a_data as $k => $v) {					$columns = base64_decode($a_data[$k]['columns']);					$a_data[$k]['columns'] = $columns;					$a_data[$k]['show'] = $columns ? implode(",", array_keys(json_decode($columns, true))) : "";				}			}			if (!empty($b_data)) {				foreach ($b_data as $k => $v) {					$columns = base64_decode($b_data[$k]['columns']);					$b_data[$k]['columns'] = $columns;					$b_data[$k]['show'] = $columns ? implode(",", array_keys(json_decode($columns, true))) : "";;				}			}			ajax(["a_data" => $a_data, "b_data" => '', "ab_inv" => $this->ignore_db_auth($ab_inv)], 1);		}		if ($action == "repair") {			$table_ext = "_tmp";			$table_name = iv("post._movesay_table_name", "a_", "表名称必须");			if (!$table_name) {				ajax("_movesay_table_name 不能为空");			}			$server_data = mc($TABLES_SERVER);			if (!$server_data) {				ajax("缓存已过期 刷新重试");			}			if (!isset($server_data[$table_name])) {				ajax("table" . $table_name . " 表不存在");			}			$data = $server_data[$table_name];			$create_cmd = trim(base64_decode($data['struct']));			if (!$create_cmd) {				ajax("表执行代码为空");			}			$insert_map_server = [];			$insert_map_client = [];			$columns_arr = json_decode(base64_decode($data['columns']), true);			foreach ($_POST as $k => $v) {				if (isset($columns_arr[$k])) {					$insert_map_client[] = $k;					$insert_map_server[] = $v;				}			}			$res = (db::exec("ALTER TABLE `" . $table_name . "` RENAME `" . $table_name . $table_ext . "`;") === false) ? 0 : 1;			if (!$res) {				ajax("重命名表 " . $table_name . " 失败");			}			$res = (db::exec($create_cmd) === false) ? 0 : 1;			if (!$res) {				ajax("创建服务器源表 " . $table_name . " 失败");			}			$insert_sql = "INSERT INTO `" . $table_name . "` " . "(`" . implode("`,`", $insert_map_client) . "`)" . " SELECT `" . implode("`,`", $insert_map_server) . "` from `" . $table_name . $table_ext . "`";			$res = (db::exec($insert_sql) === false) ? 0 : 1;			if (!$res) {				ajax("导入旧表数据 " . $table_name . $table_ext . " 到新表 " . $table_name . " 失败[" . $insert_sql . "]");			}			$a_sum = db::query("select count(`id`) AS sum  from `" . $table_name . "`");			$b_sum = db::query("select count(`id`) AS sum  from `" . $table_name . $table_ext . "`");			$a_sum = isset($a_sum['0']['sum']) ? $a_sum['0']['sum'] : -1;			$b_sum = isset($b_sum['0']['sum']) ? $b_sum['0']['sum'] : -1;			if ($a_sum != $b_sum) {				ajax("修复失败,请立即 手动还原" . $table_name . $table_ext . " 为" . $table_name . "[" . $insert_sql . "]", 1);			}			ajax("修复成功,手动删除" . $table_name . $table_ext . "表完成升级", 1);		}		if ($action == "del") {			$table_ext = "DEL_";			$table_name = iv("post.table_name", "a_", "表名称必须");			if (!$table_name) {				ajax("table_name 不能为空");			}			$res = (db::exec("ALTER TABLE `" . $table_name . "` RENAME `" . $table_ext . $table_name . "`;") === false) ? 0 : 1;			if (!$res) {				ajax("假删除旧表 " . $table_name . " 失败");			}			ajax("删除" . $table_name . $table_ext . " 成功", 1);		}		if ($action == "pull") {		}	}	public function movefile()	{		$_GET['ajax'] = 1;		set_time_limit(0);		$action = isset($_GET['step']) ? $_GET['step'] : "";		$FILE_TREE_SERVER = "MOVE_TREE_SERVER";		$MOVE_TREE_CLIENT = "MOVE_TREE_CLIENT";		if (!$action) {			$this->display();		}		if ($action == "1") {			config("local_file_data", []);			$encode_file = function ($path) use (&$encode_file) {				$_tmp_data = [];				$dir = opendir($path);				while (false !== ($file = readdir($dir))) {					if (($file != '.') && ($file != '..')) {						if (is_dir($path . '/' . $file)) {							if (strpos($file, ".") === 0) {								continue;							}							$_file = trim(str_replace(APP_PATH, "", $path . '/' . $file));							if (strpos($_file, "/runtime") === 0) {								continue;							}							if (strpos($_file, "/upload") === 0) {								continue;							}							if (strpos($_file, "/backup") === 0) {								continue;							}							if (strpos($_file, "/jiami") === 0) {								continue;							}							if (strpos($_file, "/moveso") === 0) {								continue;							}							if (strpos($_file, "/mobile") === 0) {								continue;							}							if ($_file == "/static/okcoin" || $_file == "/template/okcoin") {								continue;							}							if ($_file == "/static/coin" || $_file == "/template/coin") {								continue;							}							if ($_file == "/static/moneyII" || $_file == "/template/moneyII") {								continue;							}							if ($_file == "/static/chbtc" || $_file == "/template/chbtc") {								continue;							}							if ($_file == "/static/zhong" || $_file == "/template/zhong") {								continue;							}							if ($_file == "/static/bitkan" || $_file == "/template/bitkan") {								continue;							}							if ($_file == "/mobile") {								continue;							}							if ($_file == "/controller/ext/oss") {								continue;							}							$encode_file($path . '/' . $file);						} else {							$_file = $path . '/' . $file;							if (strpos($file, ".") === 0) {								continue;							}							$_file_hash = md5_file($_file);							$_file_name = trim(str_replace(APP_PATH, "", $_file));							$key = md5($_file_name);							if (strpos($_file_name, "/index.php") === 0) {								continue;							}							if (strpos($_file_name, "/dirdata.php") === 0) {								continue;							}							if (strpos($_file_name, "/开发文档.md") === 0) {								continue;							}							if (strpos($_file_name, "/test.php") === 0) {								continue;							}							if (strpos($_file_name, "/README.md") === 0) {								continue;							}							$characet = function ($data) {								if (!empty($data)) {									$fileType = mb_detect_encoding($data, ['UTF-8', 'GBK', 'LATIN1', 'BIG5']);									if ($fileType != 'UTF-8') {										$data = mb_convert_encoding($data, 'utf-8', $fileType);									}								}								return $data;							};							$_tmp_data[$key] = [$characet($_file_name), $_file_hash];						}					}				}				config("local_file_data", array_merge(config("local_file_data"), $_tmp_data));				closedir($dir);			};			$encode_file(APP_PATH);			$dir_data = config("local_file_data");			if (!$dir_data) {				exit("本地 文件 结构数据获取失败!");			}			if (isset($_GET['action']) && $_GET['action'] == 'list') {				echo json_encode($dir_data);				exit;			}			if (mc($MOVE_TREE_CLIENT, $dir_data)) {				ajax("生成本地目录树成功", 1);			} else {				ajax("生成本地目录树 缓存失败", 1);			}		}		if ($action == "2") {			$demo_dir_data = file_get_contents("http://demo.movesay.com/ajax/filedata?authcode=" . MS_CODE);			$demo_dir_data = json_decode($demo_dir_data, true);			if (!$demo_dir_data || !is_array($demo_dir_data)) {				exit("远程文件 结构数据获取失败!");			}			if (mc($FILE_TREE_SERVER, $demo_dir_data)) {				ajax("获取远程目录树成功", 1);			} else {				ajax("获取远程目录树 缓存失败", 1);			}		}		if ($action == "3") {			$a = mc($MOVE_TREE_CLIENT);			$b = mc($FILE_TREE_SERVER);			if (!$a) {				ajax("本地目录树缓存获取失败 刷新页面重试");			}			if (!$b) {				ajax("远程目录树缓存获取失败 刷新页面重试");			}			$a_data = $b_data = $ab_inv = [];			foreach ($a as $k => $v) {				if (isset($b[$k]) && !empty($v) && !empty($b[$k])) {					if ($a[$k][1] !== $b[$k][1]) {						$ab_inv[] = $a[$k][0];					}					unset($b[$k]);				} else {					$a_data[$k] = $v;				}			}			$b_data = $b;			ajax(["a_data" => $a_data, "b_data" => '', "ab_inv" => $ab_inv], 1);		}	}	public function delfile()	{		$path = isset($_REQUEST['path']) ? trim($_REQUEST['path']) : ajax("path 参数必须传入");		$path = APP_PATH . $path;		if (!file_exists($path)) {			ajax("文件不存在");		} else {			if (!unlink($path)) {				ajax("删除失败");			} else {				ajax("删除成功", 1);			}		}	}	public function moveso()	{		$path = APP_PATH . "/backup/moveso/";		if (empty($_POST)) {			if (isset($_GET['check'])) {				if (file_exists($path . "/move.so")) {					ajax("队列未运行,或者其他异常,文件未替换");				} else {					ajax("替换成功", 1);				}				exit();			}			$move_json = $path . "moveso.json";			$murl = "http://www.movesay.com/";			$demo_str = @file_get_contents($murl . "/movesay/moveso/");			$demo_str = iconv("utf-8", "gb2312//IGNORE", $demo_str);			if (strpos($demo_str, "|")) {				$demo_str = explode("|", $demo_str);			}			$this->demo_str = $demo_str;			if (!file_exists($move_json)) {				$moveso_data = [];			} else {				$moveso_data = json_decode(file_get_contents($move_json), true);			}			$this->moveso_data = $moveso_data;			$this->display();		} else {			set_time_limit(0);			$save_path = $path . "move_test.so";			$save_target_path = $path . "move.so";			if (!is_writable($path)) {				ajax("文件权限错误");			}			$hash = trim($_POST['hash']);			if (!$hash) {				ajax("POST hash not found!");			}			$murl = "http://www.movesay.com/";			$data = @file_get_contents($murl . "/download/move.so?rand=" . md5(time() . rand(1, 9999)));			if (!$data) {				ajax("模块下载失败");			}			$res = file_put_contents($save_path, $data);			if (!$res || !file_exists($save_path)) {				ajax("模块生成失败");				exit();			}			if (md5_file($save_path) === $hash) {				rename($save_path, $save_target_path);				ajax(65 - date("s"), 1);			} else {				debug(md5_file($save_path), '$save_path');				debug($hash, '$hash');				unlink($save_path);				ajax("下载文件hash不匹配");			}		}	}	public function index()	{		$dir = './runtime/tmp/';		$sizeResult = '';		$handle = opendir($dir);		while (false !== ($FolderOrFile = readdir($handle))) {			if ($FolderOrFile != "." && $FolderOrFile != "..") {				if (is_dir("$dir/$FolderOrFile")) {					$sizeResult += $this->getDirSize("$dir/$FolderOrFile");				} else {					$sizeResult += filesize("$dir/$FolderOrFile");				}			}		}		closedir($handle);		if ($sizeResult) {			$cacheSize = round($sizeResult / pow(1024, ($i = floor(log($sizeResult, 1024)))), 2);		} else {			$cacheSize = 0;		}		$this->assign('cacheSize', $cacheSize);		$this->display();	}	protected function getDirSize($dir)	{		$sizeResult = '';		$handle = opendir($dir);		while (false !== ($FolderOrFile = readdir($handle))) {			if ($FolderOrFile != "." && $FolderOrFile != "..") {				if (is_dir("$dir/$FolderOrFile")) {					$sizeResult += $this->getDirSize("$dir/$FolderOrFile");				} else {					$sizeResult += filesize("$dir/$FolderOrFile");				}			}		}		closedir($handle);		return $sizeResult;	}	public function delcache()	{		@system("chown -R apache:apache /data/www");		cache::clear();		cache(null);		$dirs = ['./runtime/tmp/'];		@mkdir('runtime/tmp/', 0777, true);		foreach ($dirs as $value) {			$this->rmdirr($value);		}		@mkdir('runtime/tmp/', 0777, true);		@mkdir('runtime/debug/', 0777, true);		@mkdir('runtime/log/', 0777, true);		@mkdir('runtime/cache/', 0777, true);		file_put_contents("runtime/.htaccess", "deny from all");		$this->check_sys_config();		$dirs = ['./htmls/'];		foreach ($dirs as $value) {			$this->rmdirr($value);		}		@mkdir('htmls/', 0777, true);		ajax('系统缓存清除成功', 1);	}	protected function check_sys_config()	{		$file = APP_PATH . '/conf/config.php';		if (@file_exists($file)) {			$config = include_once($file);			$sys_config_arr = md('sys_config')->lists();			if ($config) {				foreach ($config as $k => $v) {					if (!isset($sys_config_arr[$k])) {						md('sys_config')->addData(['name' => $k, 'title' => $v, 'addtime' => time(), 'status' => 1,]);					}				}			}		}	}	protected function rmdirr($dirname)	{		if (!file_exists($dirname)) {			return false;		}		if (is_file($dirname) || is_link($dirname)) {			return unlink($dirname);		}		$dir = dir($dirname);		if ($dir) {			while (false !== $entry = $dir->read()) {				if ($entry == '.' || $entry == '..') {					continue;				}				$this->rmdirr($dirname . DIRECTORY_SEPARATOR . $entry);			}		}		$dir->close();		return rmdir($dirname);	}	public function queue()	{		$file_path = APP_PATH . "/runtime/debug/queue.json";		$time = time();		$timeArr = [];		if (file_exists($file_path)) {			$timeArr = file_get_contents($file_path);			$timeArr = json_decode($timeArr, true);		}		$str = '';		if ($timeArr) {			foreach ($timeArr as $key => $val) {				if ($key == 0) {					$val = "上一次执行:" . addtime($val);				}				if ($key == 1) {					$val = "上二次执行:" . addtime($val);				}				if ($key == 2) {					$val = "上三次执行:" . addtime($val);				}				$str .= $val . " ";			}		}		$status = '';		$count = count($timeArr);		if ($count >= 3) {			$_t1 = $timeArr['2'] - $timeArr['1'];			$_t2 = $timeArr['1'] - $timeArr['0'];			if (abs($timeArr[0] - time()) > 60) {				$status = '<span class="btn btn-warning">队列停止运行</span>';			}			if (abs($_t1) > 50 && abs($_t2) > 50) {				$status = '<span class="btn">队列运行正常</span>';			} else {				$status = '<span class="btn btn-warning">队列时间异常,请稍后再试</span>';			}		} else {			$msg = '';			if ($count == 0) {				$msg = '队列还未开始运行,请1分钟后刷新';			}			if ($count == 1) {				$msg = '队列运行一次请再等待2分钟检查';			}			if ($count == 2) {				$msg = '队列运行两次请再等待1分钟检查';			}			$status = '<span class="btn btn-warning">' . $msg . '</span>';		}		$this->assign('status', $status);		$this->assign('str', $str);		$this->display();	}	public function qianbao()	{		$id = iv('get.id');		$qb_list = db::table('coin')->where(['wallet#in' => ['qbb', 'eth', 'newcoin'], 'status' => 1])->select();		foreach ($qb_list as $k => $v) {			unset($qb_list[0]);			$qb_list[$k + 1] = $v;		}		if (!$id) {			$this->assign('qb_list', $qb_list);			$this->assign('list_len', count($qb_list));			$this->display();			die;		}		if (APP_DEMO) {			echo json_encode(['status' => 100, 'info' => '测试站暂时不能修改']);			die;		}		if ($id == -1) {			$dirs = ['./Runtime/'];			@mkdir('Runtime', 0777, true);			foreach ($dirs as $value) {				$this->rmdirr($value);			}			@mkdir('Runtime', 0777, true);			echo json_encode(['status' => 1, 'info' => '缓存清除成功']);			die;		}		if (isset($qb_list[$id]) && $qb_list[$id]['wallet'] == 'qbb') {			$update_str = '&nbsp;&nbsp;&nbsp;<a href="/admin/coin/edit/id/' . $qb_list[$id]['id'] . '" color="green" target="_black">立即前往修改<a>';			if ($qb_list[$id]['status']) {				if ($qb_list[$id]['zr_dz'] <= 0) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '钱包确认次数不能为空' . $update_str]);					die;				}				if (!$qb_list[$id]['dj_yh'] || !$qb_list[$id]['dj_mm'] || !$qb_list[$id]['dj_zj'] || !$qb_list[$id]['dj_dk']) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '币种对接参数配置错误' . $update_str]);					die;				}				$dj_username = $qb_list[$id]['dj_yh'];				$dj_password = $qb_list[$id]['dj_mm'];				$dj_address = $qb_list[$id]['dj_zj'];				$dj_port = $qb_list[$id]['dj_dk'];				$client = new client($dj_username, $dj_password, $dj_address, $dj_port, 5, [], 1);				$json = $client->execute('getinfo');				if ($json) {					if ($tmp = json_decode($json, true)) {						$json = $tmp;					}				}				if (!isset($json['version']) || !$json['version']) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '服务器返回错误:' . $json['data'] . $update_str]);					die;				} else {					if (!$qb_list[$id]['zc_user']) {						echo json_encode(['status' => 1, 'info' => $qb_list[$id]['title'] . '运行正常' . $update_str]);						die;					} else {					}					echo json_encode(['status' => 1, 'info' => $qb_list[$id]['title'] . '运行正常']);					die;				}			} else {				echo json_encode(['status' => -1, 'info' => $qb_list[$id]['title'] . '已经禁用,不用检查']);			}		} else if (isset($qb_list[$id]) && ($qb_list[$id]['wallet'] == 'eth' || $qb_list[$id]['wallet'] == 'newcoin')) {			$update_str = '&nbsp;&nbsp;&nbsp;<a href="/admin/coin/edit/id/' . $qb_list[$id]['id'] . '" color="green" target="_black">立即前往修改<a>';			if ($qb_list[$id]['status']) {				if (!$qb_list[$id]['dj_zj'] || !$qb_list[$id]["dj_dk"]) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '币种配置错误' . $update_str]);					die;				}				$host = $qb_list[$id]['dj_zj'];				$port = $qb_list[$id]["dj_dk"];				$qianbao = \ext\coin\mscoin::mycurl2($host, $port, $qb_list[$id]['wallet'], $qb_list[$id]['name']);				if ($qianbao['status'] == -1) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '钱包服务器连接异常,请检查服务器']);					die;				}				if ($qianbao['status'] == -2) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '钱包连接异常,请检查钱包是否正常运行']);					die;				}				if ($qianbao['status'] == -3) {					echo json_encode(['status' => -2, 'info' => $qb_list[$id]['title'] . '钱包连接异常,请检查钱包配置' . $update_str]);					die;				}				if ($qianbao['status'] == 1) {					echo json_encode(['status' => 1, 'info' => $qb_list[$id]['title'] . '运行正常,钱包余额:' . $qianbao['data']['total']]);					die;				}			} else {				echo json_encode(['status' => -1, 'info' => $qb_list[$id]['title'] . '已经禁用,不用检查' . $update_str]);			}		} else {			echo json_encode(['status' => 100, 'info' => '全部检查完毕']);			die;		}	}	public function export()	{		$list = db::query('SHOW TABLE STATUS');		$list = array_map('array_change_key_case', $list);		$title = '数据备份';		$this->assign('meta_title', $title);		$this->assign('list', $list);		$this->display();	}	public function excel()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$tables = iv('get.tables');		$str = iv('get.str', 'd', '开始ID 格式错误只能是数字');		$end = iv('get.end', 'd', '导出数量 格式错误只能是数字');		if ($tables) {			$xls_name = $tables;			$xls_zd = [];			$db_config = config("DB_CONF");			$zd = db::query("select COLUMN_NAME,COLUMN_COMMENT from information_schema.COLUMNS where TABLE_SCHEMA = '" . $db_config['db_name'] . "' and TABLE_NAME = '" . $tables . "';");			foreach ($zd as $k => $v) {				$xls_zd[$k] = $v['COLUMN_COMMENT'] ? $v['COLUMN_COMMENT'] : $v['COLUMN_NAME'];			}			$xls_rs = db::table(str_replace("move_", '', $tables))->limit($str, $end)->select();			$excel = new \ext\excel();			if ($xls_rs) {				if (isset($xls_rs[0]['userid'])) {					foreach ($xls_rs as $k => $v) {						$xls_rs[$k]['username'] = db::table('user')->where(['id' => $v['userid']])->find('username');					}					$xls_zd[] = "用户名";				}				if (isset($xls_rs[0]['peerid'])) {					foreach ($xls_rs as $k => $v) {						$xls_rs[$k]['peername'] = db::table('user')->where(['id' => $v['peerid']])->find('username');					}					$xls_zd[] = "对方用户";				}			}			$excel->export($xls_name, $xls_zd, $xls_rs);		} else {			ajax("请指定要导出的表");		}	}	public function optimize()	{		$tables = iv('get.tables');		if (!$tables) {			$tables = iv('post.tables');		}		if ($tables) {			if (is_array($tables)) {				$tables = implode('`,`', $tables);				$list = db::query("OPTIMIZE TABLE `{$tables}`");				if ($list) {					ajax("数据表优化完成", 1);				} else {					ajax("数据表优化出错请重试");				}			} else {				$list = db::query("OPTIMIZE TABLE `{$tables}`");				if ($list) {					ajax("数据表'{$tables}'优化完成", 1);				} else {					ajax("数据表'{$tables}'优化出错请重试");				}			}		} else {			ajax("请指定要优化的表");		}	}	public function repair()	{		$tables = iv('get.tables');		if (!$tables) {			$tables = iv('post.tables');		}		if ($tables) {			if (is_array($tables)) {				$tables = implode('`,`', $tables);				$list = db::query("REPAIR TABLE `{$tables}`");				if ($list) {					ajax("数据表修复完成", 1);				} else {					ajax("数据表修复出错请重试");				}			} else {				$list = db::query("REPAIR TABLE `{$tables}`");				if ($list) {					ajax("数据表'{$tables}'修复完成", 1);				} else {					ajax("数据表'{$tables}'修复出错请重试");				}			}		} else {			ajax("请指定要修复的表");		}	}	public function export_up()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		if ($_POST) {			$tables = iv('post.tables');			$id = iv('post.id');			$start = iv('post.start');		} else {			$tables = iv('get.tables');			$id = iv('get.id');			$start = iv('get.start');		}		if ($_POST && !empty($tables) && is_array($tables)) {			$db_config = config("DB_CONF");			$config = ['db_host' => $db_config['db_host'], 'db_port' => $db_config['db_port'], 'db_name' => $db_config['db_name'], 'path' => APP_PATH . '/backup/database/', 'part' => 20971520, 'compress' => 1, 'level' => 1];			is_writeable($config['path']) || ajax('备份目录不存在或不可写，请检查后重试');			session('backup_config', $config);			$file = ['name' => date('Ymd-His'), 'part' => 1];			session('backup_file', $file);			session('backup_tables', $tables);			$Database = new \ext\database($file, $config);			if (false !== $Database->create()) {				$tab = ['id' => 0, 'start' => 0];				ajax('初始化成', 1, ['tables' => $tables, 'tab' => $tab]);			} else {				ajax('初始化失败备份文件创建失败');			}		} elseif ($_GET && is_numeric($id) && is_numeric($start)) {			$tables = session('backup_tables');			$Database = new \ext\database(session('backup_file'), session('backup_config'));			$start = $Database->backup($tables[$id], $start);			if (false === $start) {				ajax('备份出错');			} elseif (0 === $start) {				if (isset($tables[++$id])) {					$tab = ['id' => $id, 'start' => 0];					ajax('备份完成', 1, ['tab' => $tab]);				} else {					session('backup_tables', null);					session('backup_file', null);					session('backup_config', null);					ajax('备份完成', 1);				}			} else {				$tab = ['id' => $id, 'start' => $start[0]];				$rate = floor(100 * ($start[0] / $start[1]));				ajax("正在备份...(" . $rate . "%)", 1, ['tab' => $tab]);			}		} else {			ajax('参数错误');		}	}	public function import()	{		$path = realpath(APP_PATH . '/backup/database/');		$flag = \FilesystemIterator::KEY_AS_FILENAME;		$glob = new \FilesystemIterator($path, $flag);		$list = [];		foreach ($glob as $name => $file) {			if (preg_match('/^\d{8,8}-\d{6,6}-\d+\.sql(?:\.gz)?$/', $name)) {				$name = sscanf($name, '%4s%2s%2s-%2s%2s%2s-%d');				$date = "$name[0]" . "-" . $name[1] . "-" . "$name[2]";				$time = "$name[3]" . ":" . $name[4] . ":" . "$name[5]";				$part = $name[6];				if (isset($list[$date . " " . $time])) {					$info = $list[$date . " " . $time];					$info['part'] = max($info['part'], $part);					$info['size'] = $info['size'] + $file->getSize();				} else {					$info['part'] = $part;					$info['size'] = $file->getSize();				}				$extension = strtoupper(pathinfo($file->getFilename(), PATHINFO_EXTENSION));				$info['compress'] = ($extension === 'SQL') ? '-' : $extension;				$info['time'] = strtotime($date . " " . $time);				$list[$date . " " . $time] = $info;			}		}		$this->display();	}	public function del()	{		$time = iv('get.time');		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		if ($time) {			$name = date('Ymd-His', $time) . '-*.sql*';			$path = realpath(APP_PATH . '/backup/database/') . '/' . $name;			array_map("unlink", glob($path));			if (count(glob($path))) {				ajax('备份文件删除失败，请检查权限', 1);			} else {				ajax('备份文件删除成功', 1);			}		} else {			ajax('参数错误');		}	}	public function xiazai()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		if (!check($_GET['file'], 'dw', '-.')) {			ajax('失败');		}		$fileName = APP_PATH . '/backup/database/' . $_GET['file'];		ob_end_clean();		header("Cache-Control: must-revalidate, post-check=0, pre-check=0");		header('Content-Description: File Transfer');		header('Content-Type: application/octet-stream');		header('Content-Length: ' . filesize($fileName));		header('Content-Disposition: attachment; filename=' . basename($fileName));		readfile($fileName);		exit();	}	public function movesay()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$this->display();	}	public function move_check_field()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$res = db::query("select * from information_schema.COLUMNS where TABLE_SCHEMA = '" . DB_NAME . "';");		if (!$res) {			echo "基础查询失败";			die;		}		$rs = [];		foreach ($res as $k => $v) {			if ($v['DATA_TYPE'] == 'int' && $v['COLUMN_NAME'] == "id") {				$rs[] = db::query("ALTER TABLE `" . $v['TABLE_NAME'] . "` CHANGE COLUMN `id` `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '自增id' FIRST;");			}		}		dump($rs);		die;	}	public function listoss()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$config = getConf("upload");		if ($config['type'] == "oss") {			$list_conf = $config['oss'];		} else {			$this->assign("online", 0);			$this->display();		}		$action = isset($_GET['act']) ? trim($_GET['act']) : "";		if ($action == "del") {			require_once APP_PATH . '/controller/ext/oss/del.php';		} else {			if ($action == "add") {				$hashname = isset($_POST["hashname"]) && $_POST["hashname"] ? true : false;				$pathType = isset($_POST["pathType"]) ? trim($_POST["pathType"]) : ajax("pathType is must");				require_once APP_PATH . '/controller/ext/oss/upload.php';				\moveUpload::init($config['oss'], ["pathType" => $pathType, "hashname" => $hashname, "pathFormat" => "", "imageFieldName" => "upload_file",]);			} else {				$listdata = "";				include(APP_PATH . '/controller/ext/oss/list.php');				$this->listdata = $listdata;				$this->assign("online", 1);				$this->display();			}		}	}	public function files()	{		$dir = APP_PATH . "/upload/public";		$file = scandir($dir);		foreach ($file as $k => $v) {			if ($v != '.' && $v != '..') {				$data[$k]['id'] = $k;				$data[$k]['img'] = $v;			}		}		$this->assign('data', $data);		$this->display();	}	public function files_del()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$dir = APP_PATH . "/upload/public";		$file = scandir($dir);		foreach ($file as $k => $v) {			if ($v != '.' && $v != '..') {				$data[$k]['id'] = $k;				$data[$k]['img'] = $v;			}		}		$id = input('post.id');		$ids = array_unique((array)$id);		$rs = 0;		foreach ($data as $k => $v) {			if (in_array($v['id'], $ids)) {				$path = APP_PATH . "/upload/public/" . $v['img'];				if (!file_exists($path)) {					ajax("文件不存在");				} else {					if (unlink($path)) {						$rs = 1;					}				}			}		}		if (!$rs) {			ajax('操作失败!');		} else {			ajax('操作成功!', 1);		}	}}