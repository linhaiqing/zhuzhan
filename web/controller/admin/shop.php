<?phpnamespace admin;use Move\db;use Move\config;use Move\cache;class shop extends admin{	public function __construct()	{		parent::__construct();		if (!$this->is_game('shop')) {			ajax('这个应用你没有购买');		}	}	public function config()	{		if (empty($_POST)) {			$data['list'] = md('sys_config')->lists();			$builder = new builder();			$builder->data($data)->url()->title('商城配置', '这里是商城配置')->key('shop_logo', '商城logo', 'image', '', '商城logo  200px*80px  用于商城界面')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['shop_logo'] = iv('post.shop_logo');			$res = 0;			foreach ($data as $k => $v) {				if (md('sys_config')->setValueOrName($k, $v)) {					$res = 1;				}			}			if ($res) {				mc("msphp_sys_config", null);				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function index()	{		$builder = new builder("shop");		$builder->title('商品管理', '这里是商品管理', '商品列表', '/shop/index')->button('add', '添加', '/shop/edit')->button('no', '禁用', '/shop/status/type/0')->button('off', '启用', '/shop/status/type/1')->button('del', '删除', '/shop/status/type/-1')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '商品名称',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('title', '商品标题', 'text')->key('type', '商品类型', 'link', [['type' => 'button', 'url' => '/shop/type/field/id/name/###', 'title' => ['from_id' => 'type', 'table' => 'shop_type', 'to_id' => 'id', 'title' => 'title'], 'field' => 'type', 'color' => '',]])->key("ext1", '图片', 'link', [['type' => 'button3', 'url' => '/shop/img/field/id/name/###', 'title' => '管理图片', 'field' => 'id', 'color' => '',],])->key('price', '商品价格', 'text')->key('price_coin', '价格币种', 'link', [['type' => 'button', 'url' => '/coin/index/field/name/name/###', 'title' => ['from_id' => 'price_coin', 'table' => 'coin', 'to_id' => 'name', 'title' => 'title'], 'field' => 'price_coin', 'color' => '',]])->key('num', '库存', 'text')->key('deal', '销量', 'text')->key('hot', '热门', 'select', [0 => "普通", 1 => "热门"])->key('sort', '排序', 'text')->key('addtime', '添加时间', 'time')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/shop/edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function edit()	{		$mymc_coin = new \mymc\coin();		$shop_coinpay = $mymc_coin->select();		if (empty($_POST)) {			$id = input('get.id');			$data_list = [];			$cz_data = [];			if ($id) {				$data['list'] = db::table('shop')->where(['id' => $id])->find();				if ($data['list']) {					$cz_data = explode(',', $data['list'] ['coindata']);;				}			} else {				$data = null;			}			if ($shop_coinpay) {				foreach ($shop_coinpay as $kk => $vv) {					$data_list[$vv['id']]['title'] = $vv['title'];					if (in_array($vv['id'], $cz_data)) {						$data_list[$vv['id']]['status'] = 1;					} else {						$data_list[$vv['id']]['status'] = 0;					}				}			}			$typearr = [];			$top_list = db::table("shop_type")->where(["status" => 1, "pid" => 0])->order("sort asc , id desc")->select();			if ($top_list) {				$i = 1;				foreach ($top_list as $k => $v) {					$n = $i++;					$top_list[$k]['pid_list'] = db::table("shop_type")->where(["status" => 1, "pid" => $v['id']])->order("sort asc , id desc")->select();					$typearr[$v["id"] . "a"] = $n . "." . $v["title"];					if ($top_list[$k]['pid_list']) {						$j = 1;						foreach ($top_list[$k]['pid_list'] as $kk => $vv) {							$m = $j++;							$top_list[$k]['pid_list'][$kk]['pid_list'] = db::table("shop_type")->where(["status" => 1, "pid" => $vv['id']])->order("sort asc , id desc")->select();							$typearr[$vv["id"] . "b"] = "---" . $n . '.' . $m . $vv["title"];							if ($top_list[$k]['pid_list'][$kk]['pid_list']) {								$a = 1;								foreach ($top_list[$k]['pid_list'][$kk]['pid_list'] as $kkk => $vvv) {									$b = $a++;									$top_list[$k]['pid_list'][$kk]['pid_list'][$kkk]['pid_list'] = db::table("shop_type")->where(["status" => 1, "pid" => $vvv['id']])->order("sort asc , id desc")->select();									$typearr[$vvv["id"]] = "----" . $n . "." . $m . "." . $b . $vvv["title"];								}							}						}					}				}			}			$builder = new builder("shop", ["id" => $id], "edit");			$builder->title(($id ? '编辑商品' : '添加商品'), ($id ? '这里是编辑商品' : '这里是添加商品'), '商品管理', '/shop/index');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('name', '商品名称', 'text', '', '名称 (英文格式)')->key('title', '商品标题', 'text', '', '标题 (中文)')->key('img', '商品图片', 'image', '', '首页图片 (全部格式)')->key('type', '商品类型', 'select', $typearr, '类型 (整数格式)')->key('price', '商品价格', 'text', '', '商品价格 (2位小数格式)')->key('price_coin', '价格币种', 'select', 'coin_c_name_c_title', '')->key('market_price', '市场价格', 'text', '', '市场价格 (2位小数格式)')->key('coindata', '交易币种', 'checkbox', $data_list, '交易币种选择')->key('num', '库存数量', 'text', '', '库存数量 (整数格式)')->key('deal', '已购买量', 'text', '', '已购买量 (整数格式)')->key('hot', '是否热门', 'select', ['0' => '不热门', '1' => '热门'], '是否热门 (整数格式)')->key('content', '商品介绍', 'editor', '', '商品介绍 (全部格式)')->key('addtime', '添加时间', 'time', '', '添加时间  (时间格式)')->key('endtime', '更新时间', 'time', '', '更新时间  (时间格式)')->key('sort', '排序', 'text', '', '排序  (整数格式)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态  (整数格式)')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['coindata'] = '';			if ($shop_coinpay) {				foreach ($shop_coinpay as $kk => $vv) {					if (isset($_POST['coindata_' . $vv['id']])) {						$data['coindata'] .= $vv['id'] . ',';					}				}			}			$data['name'] = iv('post.name', 'w', '商品名称 格式错误', 1);			$data['title'] = iv('post.title', 'a', '商品标题 格式错误', 1);			$data['img'] = iv('post.img', 'a', '商品图片 格式错误');			$data['type'] = iv('post.type', 'd', '商品类型 格式错误', 1);			$data['price'] = iv('post.price', 'cny', '商品价格 格式错误', 1);			$data['price_coin'] = iv('post.price_coin', 'w', '价格币种 格式错误', 1);			$data['market_price'] = iv('post.market_price', 'cny', '市场价格 格式错误', 1);			$data['num'] = iv('post.num', 'd', '库存数量 格式错误', 1);			$data['deal'] = iv('post.deal', 'd', '已购买量 格式错误', 1);			$data['content'] = iv('post.content');			$data['hot'] = iv('post.hot', 'd', '是否热门 格式错误', 1);			$data['sort'] = iv('post.sort', 'd', '排序格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$data['endtime'] = iv('post.endtime', 'time', '更新时间格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('shop')->where(['id' => $id])->save($data);			} else {				$res = db::table('shop')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shop'));	}	public function type1()	{		$builder = new builder("shop_type");		$builder->title('商品类型', '这里是商品类型', '类型列表', '/shop/type')->button('add', '添加', '/shop/type_edit')->button('no', '禁用', '/shop/type_status/type/0')->button('off', '启用', '/shop/type_status/type/1')->button('del', '删除', '/shop/type_status/type/-1')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '类型名称',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('title', '类型标题', 'text')->key('pid', '上级', 'link', [['type' => 'button', 'url' => '/shop/type/field/id/name/###', 'title' => ['from_id' => 'pid', 'table' => 'shop_type', 'to_id' => 'id', 'title' => 'title'], 'field' => 'pid', 'color' => '',]])->key('sort', '排序', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/shop/type_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function type()	{		$top_list1 = db::table("shop_type")->where(["pid" => 0])->order("sort asc , id asc")->select();		if ($top_list1) {			foreach ($top_list1 as $k => $v) {				$top_list1[$k]["rate"] = 1;				$top_list1[$k]['pid_list'] = db::table("shop_type")->where(["pid" => $v['id']])->order("sort asc , id asc")->select();				if ($top_list1[$k]['pid_list']) {					foreach ($top_list1[$k]['pid_list'] as $kk => $vv) {						$top_list1[$k]['pid_list'][$kk]['rate'] = 2;						$top_list1[$k]['pid_list'][$kk]['pid_list'] = db::table("shop_type")->where(["pid" => $vv['id']])->order("sort asc , id asc")->select();					}				}			}		}		$this->assign("type_list", $top_list1);		$this->display();	}	public function type_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$typearr = [];			$typearr["0"] = "--顶级菜单--";			$top_list = db::table("shop_type")->where(["status" => 1, "pid" => 0])->order("sort asc , id desc")->select();			if ($top_list) {				foreach ($top_list as $k => $v) {					$top_list[$k]['pid_list'] = db::table("shop_type")->where(["status" => 1, "pid" => $v['id']])->order("sort asc , id desc")->select();					$typearr[$v["id"]] = "--" . $v["title"];					if ($top_list[$k]['pid_list']) {						foreach ($top_list[$k]['pid_list'] as $kk => $vv) {							$top_list[$k]['pid_list'][$kk]['pid_list'] = db::table("shop_type")->where(["status" => 1, "pid" => $vv['id']])->order("sort asc , id desc")->select();							$typearr[$vv["id"]] = "----" . $vv["title"];						}					}				}			}			$builder = new builder("shop_type", ["id" => $id], "edit");			$builder->title(($id ? '编辑类型' : '添加类型'), ($id ? '这里是编辑类型' : '这里是添加类型'), '类型管理', '/shop/type');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('title', '类型标题', 'text', '', '标题 (全部格式)')->key('pid', '上级标题', 'select', $typearr, '标题 (全部格式)')->key('addtime', '添加时间', 'time', '', '添加时间  (时间格式)')->key('sort', '排序', 'text', '', '排序  (整数格式)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['title'] = iv('post.title', 'a', '商品标题 格式错误', 1);			$data['pid'] = iv('post.pid', 'd', '上级标题 格式错误', 1);			$data['sort'] = iv('post.sort', 'd', '排序格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$data['endtime'] = time();			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('shop_type')->where(['id' => $id])->save($data);			} else {				$res = db::table('shop_type')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function type_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shop_type'));	}	public function log()	{		$builder = new builder("shop_log");		$builder->title('购物记录', '这里是购物记录', '购物记录', '/shop/log')->button('add', '添加', '/shop/log_edit')->button('del', '删除', '/shop/log_status/type/-1')->search('userid', '用户ID', 'd')->search('shopid', '商品ID', 'd')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '未发货', '1' => '已完成', '2' => '已撤销', 3 => "已发货"], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('addtime', '购买时间', 'time')->key('userid', '用户名', 'link', [['type' => 'button', 'url' => '/user/index/field/id/name/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',]])->key('shopid', '商品ID', 'text')->key('price', '商品价格', 'text')->key('price_coin', '价格币种', 'link', [['type' => 'button', 'url' => '/coin/index/field/name/name/###', 'title' => ['from_id' => 'price_coin', 'table' => 'coin', 'to_id' => 'name', 'title' => 'title'], 'field' => 'price_coin', 'color' => '',]])->key('num', '购买数量', 'text')->key('mum', '总金额', 'text')->key('coinname', '付款方式', 'text')->key('xuyao', '付款数量', 'text')->key('addr', '收货地址', 'text')->key('kuaidi', '快递及单号', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">未发货</span>', 1 => '<span style="color:green;">已完成</span>', 2 => '<span style="color:red;">已撤销</span>', 3 => '<span style="color:blue ;">已发货</span>'])->key("ext", '操作', 'link', [['type' => 'button2', 'url' => '/shop/log_chexiao/id/###', 'title' => '撤销', 'field' => 'id', 'color' => '', 'ajax' => 'get', 'exts' => ["status" => [0]],], ['type' => 'button3', 'url' => '/shop/log_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',]])->lists();	}	public function log_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("shop_log", ["id" => $id], "edit");			$builder->title(($id ? '编辑购物记录' : '添加购物记录'), ($id ? '这里是编辑购物记录' : '这里是添加购物记录'), '购物记录管理', '/shop/log');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('addtime', '购买时间', 'time', '', '购买时间')->key('userid', '用户ID', 'text', '', '用户ID(整数格式)')->key('shopid', '购物ID', 'text', '', '购物ID(整数格式)')->key('price', '商品价格', 'text', '', '商品价格(两位小数格式)')->key('price_coin', '价格币种', 'select', 'coin_c_name_c_title', '')->key('num', '购买数量', 'text', '', '购买数量(整数格式)')->key('mum', '总金额', 'text', '', '总价(两位小数格式)')->key('coinname', '付款方式', 'select', 'coin_c_name_c_title', '付款币种选择')->key('xuyao', '付款数量', 'text', '', '付款数量(小数格式)')->key('addr', '收货地址', 'text', '', '收货地址(全部格式)')->key('content', '留言', 'text', '', '买家留言(全部格式)')->key('kuaidi', '快递及单号', 'text', '', '快递公司及快递单号(全部格式)')->key('status', '状态', 'select', [0 => '未发货', 1 => '已完成', 3 => "已发货"], '订单状态  (整数格式)')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$data['userid'] = iv('post.userid', 'd', '用户ID 格式错误', 1);			$data['shopid'] = iv('post.shopid', 'd', '商品ID 格式错误', 1);			$data['price'] = iv('post.price', 'cny', '商品价格 格式错误', 1);			$data['price_coin'] = iv('post.price_coin', 'w', '价格币种 格式错误', 1);			$data['num'] = iv('post.num', 'd', '购买数量 格式错误', 1);			$data['mum'] = iv('post.mum', 'cny', '总金额 格式错误', 1);			$data['coinname'] = iv('post.coinname', 'w', '付款方式 格式错误', 1);			$data['xuyao'] = iv('post.xuyao', 'double', '付款数量 格式错误', 1);			$data['addr'] = iv('post.addr', 'a', '收货地址 格式错误', 1);			$data['kuaidi'] = iv('post.kuaidi', 'a', '快递格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('shop_log')->where(['id' => $id])->save($data);			} else {				$res = db::table('shop_log')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function log_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shop_log'));	}	public function log_chexiao()	{		$id = iv("get.id", "d", "参数错误");		$res = md('shop')->chexiao($id);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function img()	{		$shopid = iv('name', 'd', '', 1);		$builder = new builder("shop_img");		$builder->title('商品图片', '这里是商品图片', '图片列表', '/shop/img')->button('add', '添加', '/shop/img_edit/shopid/' . $shopid)->button('no', '禁用', '/shop/img_status/type/0')->button('off', '启用', '/shop/img_status/type/1')->button('del', '删除', '/shop/img_status/type/-1')->search('order', ['shopid_desc' => '商品ID降序', 'shopid_asc' => '商品ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '类型名称',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('shopid', '商品ID', 'text')->key('img', '图片', 'image')->key('addtime', '添加时间', 'time')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/shop/img_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function img_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("shop_img", ["id" => $id], "edit");			if (!$id) {				$shopid = iv('get.shopid', 'd', '商品id 格式错误', 1);				if ($shopid) {					$data['list']['shopid'] = $shopid;				} else {					$data['list']['shopid'] = '';				}				$builder->data($data);			}			$builder->title(($id ? '编辑图片' : '添加图片'), ($id ? '这里是编辑图片' : '这里是添加图片'), '图片管理', '/shop/img');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('shopid', '商品ID', 'text', '', '商品ID(整数格式)')->key('img', '图片', 'image', '', '图片尺寸800*800px')->key('addtime', '添加时间', 'time', '', '添加时间  (时间格式)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态  (整数格式)')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['shopid'] = iv('post.shopid', 'd', '商品ID 格式错误', 1);			$data['img'] = iv('post.img', 'a', '商品图片 格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('shop_img')->where(['id' => $id])->save($data);			} else {				$res = db::table('shop_img')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function img_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shop_img'));	}	public function coinpay()	{		$builder = new builder("shop_coinpay");		$builder->title('付款币种', '这里是付款币种', '付款币种列表', '/shop/coinpay')->button('add', '添加', '/shop/coinpay_edit')->button('del', '删除', '/shop/coinpay_status/type/-1')->search('order', ['shopid_desc' => '商品ID降序', 'shopid_asc' => '商品ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '类型名称',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('coinpay', '付款币种', 'link', [['type' => 'button', 'url' => '/coin/index/field/id/name/###', 'title' => ['from_id' => 'coinpay', 'table' => 'coin', 'to_id' => 'name', 'title' => 'title'], 'field' => 'coinpay', 'color' => '',]])->key('bili', '付款比例', 'text')->key('addtime', '添加时间', 'time')->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/shop/coinpay_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function coinpay_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("shop_coinpay", ["id" => $id], "edit");			$builder->title(($id ? '编辑付款币种' : '添加付款币种'), ($id ? '这里是编辑付款币种' : '这里是添加付款币种'), '付款币种管理', '/shop/coinpay');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('coinpay', '付款币种', 'select', 'coin_c_name_c_title', '')->key('bili', '付款比例', 'text', '', '付款比例(=CNY:币种(0代表不设置,依市场最新行情))')->key('addtime', '添加时间', 'time', '', '添加时间  (时间格式)')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['coinpay'] = iv('post.coinpay', 'w', '付款币种 格式错误', 1);			$data['bili'] = iv('post.bili', 'double', '付款比例错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('shop_coinpay')->where(['id' => $id])->save($data);			} else {				$res = db::table('shop_coinpay')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function coinpay_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shop_coinpay'));	}}