<?phpnamespace admin;use Move\db;class shake extends admin{	public function __construct()	{		parent::__construct();	}	public function index()	{		$builder = new builder("shake");		$builder->title('摇一摇发币设置', '这里是摇一摇发币设置', '配置表', '/shake/index')->button('add', '添加', '/shake/edit')->button('no', '禁用', '/shake/status/type/0')->button('off', '启用', '/shake/status/type/1')->button('del', '删除', '/shake/status/type/-1')->key('id', 'ID', 'text')->key('coinid', '币种', 'link', [['type' => 'button', 'url' => '/coin/index/field/id/name/###', 'title' => ['from_id' => 'coinid', 'table' => 'coin', 'to_id' => 'id', 'title' => 'title'], 'field' => 'coinid', 'color' => '',]])->key('coinname', '币种名字', 'text')->key('sendnum', '分配数量', 'text')->key('addtime', '开始时间', 'time')->key('endtime', '结束时间', 'time')->key('sort', '排序', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/shake/edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],]);		$builder->lists();	}	public function edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("shake", ["id" => $id], "edit");			$builder->title(($id ? '编辑摇一摇发币' : '添加摇一摇发币'), ($id ? '这里是编辑摇一摇发币' : '这里是添加摇一摇发币'), '摇一摇发币', '/shake/index')->key('id', '编号', 'readonly', '', '数据编号')->key('id', '编号', 'hidden', '', '数据编号')->key('coinid', '币种', 'select', 'coin_c_id_c_title', '名称(只能中文)')->key('sendnum', '分配数量', 'text', '', '个')->key('addtime', '开始时间', 'time', '', '开始时间到结束时间之前的时间段发币的数量')->key('endtime', '结束时间', 'time', '', '开始时间到结束时间之前的时间段发币的数量')->key('sort', '排序', 'text', '', '显示排序')->key('status', '启用', 'select', [0 => '禁用', 1 => '启用'], '')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['coinid'] = iv('post.coinid', 'a', '币种错误', 1);			$data['sendnum'] = iv('post.sendnum', 'd', '分配数量 格式错误');			$data['addtime'] = iv('post.addtime', 'time', '开始时间 格式错误');			$data['endtime'] = iv('post.endtime', 'time', '结束时间 格式错误');			$data['sort'] = iv('post.sort', 'd', '排序 格式错误');			$data['status'] = iv('post.status', 'd', '启用状态 格式错误', 1);			$id = iv('post.id');			$coin = db::table('coin')->where(['id' => $data['coinid']])->find();			if (!$coin) {				ajax('币种不存在');			}			$data['coinname'] = $coin['name'];			$res = 0;			if ($id) {				$res = db::table('shake')->where(['id' => $id])->save($data);			} else {				$res = db::table('shake')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'shake'));	}	public function user()	{		$builder = new builder("shake_user");		$builder->title('摇一摇用户', '这里是摇一摇用户', '查看', '/shake/user')->button('add', '添加', '/shake/user_edit')->button('no', '禁用', '/shake/user_status/type/0')->button('off', '启用', '/shake/user_status/type/1')->button('del', '删除', '/shake/user_status/type/-1')->search('addtime_str', '绑定时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['username' => '用户名', 'phone' => '手机号', 'shakeid' => '微信key',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('userid', '用户名', 'link', [['type' => 'button', 'url' => '/user/index/field/id/name/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',]])->key('shakeid', '微信key', 'text')->key('addtime', '绑定时间', 'time')->key('sort', '排序', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>']);		$builder->lists();	}	public function mine_log()	{		$builder = new builder("shake_mine_log");		$builder->title('摇一摇摇币记录', '这里是摇币记录', '摇币记录', '/shake/mine_log')->search('addtime_str', '开始时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('field', ['userid' => '用户id', 'coinname' => '币种name'], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('userid', '用户', 'link', [['type' => 'button', 'url' => '/user/edit/id/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',],])->key('coinname', '获得币种', 'text')->key('num', '获得数量', 'text')->key('addtime', '获得时间', 'time')->lists();	}	public function getcoin_log()	{		$builder = new builder("shake_mine_log");		$builder->title('摇一摇摇币记录', '这里是摇币记录', '摇币记录', '/shake/mine_log')->search('addtime_str', '开始时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('field', ['userid' => '用户id', 'coinname' => '币种name'], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('userid', '用户', 'link', [['type' => 'button', 'url' => '/user/edit/id/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',],])->key('coinname', '获得币种', 'text')->key('num', '获得数量', 'text')->key('addtime', '获得时间', 'time')->lists();	}	public function baseconfig()	{		if (empty($_POST)) {			$shake_config = db::table('shake_config')->select();			if (!$shake_config) {				return false;			}			foreach ($shake_config as $k => $v) {				$conf[$v['name']] = $v['value'];			}			$data['list'] = $conf;			$builder = new builder();			$builder->data($data)->url()->title('基本配置', '')->key('auth', '微信密钥', 'text', '', '确定身份，限制访问')->key('open_coindata', '发币数量接口', 'text', '', '请求每天发多少币给用户')->key('open_binduser', '绑定用户接口', 'text', '', '绑定微信用户和平台用户')->key('open_minecoin', '摇币接口', 'text', '', '用户摇币后请求的接口')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['auth'] = iv('post.auth');			$data['open_coindata'] = iv('post.open_coindata');			$data['open_binduser'] = iv('post.open_binduser');			$data['open_minecoin'] = iv('post.open_minecoin');			$rs = [];			db::exec("set autocommit=0");			db::exec("lock tables #pre#shake_config write");			foreach ($data as $k => $v) {				$rs[] = db::table('shake_config')->where(['name' => $k])->save(['value' => $v]);			}			if (check_arr($rs)) {				db::exec("commit");				db::exec("unlock tables");				mc("shake_config", null);				ajax('操作成功', 1);			} else {				db::exec("rollback");				db::exec("unlock tables");				ajax('操作失败[' . implode(",", $rs) . ']');			}		}	}}