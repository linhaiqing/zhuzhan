<?phpnamespace admin;use Move\db;use Move\config;use Move\cache;use Move\ext\client;class trade extends admin{	public function __construct()	{		parent::__construct();		if (!$this->is_game('trade')) {			ajax('这个应用你没有购买');		}	}	public function config()	{		if (empty($_POST)) {			$sys_config = db::table('sys_config')->select();			foreach ($sys_config as $k => $v) {				$data['list'] [$v['name']] = $v['value'];			}			$market_list = db::table('trade_market')->select();			$market_list_arr = [];			$market_list_arr[0] = '选择市场';			if ($market_list) {				foreach ($market_list as $k => $v) {					if ($v['status'] == 1) {						$market_list_arr [$v['name']] = $v['title'];					}				}			}			$builder = new builder();			$builder->data($data)->url()->title('交易配置', '这里是交易配置')->key('mr_market', '默认市场', 'select', $market_list_arr, '默认市场')->key('trade_logo', '交易logo', 'image', '', '交易logo  200px*80px  用于全屏交易界面')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['trade_logo'] = iv('post.trade_logo');			$data['mr_market'] = iv('post.mr_market', 'w_', '默认市场错误', 1);			$res = 0;			foreach ($data as $k => $v) {				if (db::table('sys_config')->where(['name' => $k])->save(['value' => $v])) {					$res = 1;				}			}			if ($res) {				mc("mymc_config", null);				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function index()	{		$market_list = db::table('trade_market')->select();		$market_list_select[0] = '全部市场';		if ($market_list) {			foreach ($market_list as $k => $v) {				$market_list_select[$v['name']] = $v['title'];			}		}		$builder = new builder('trade');		$builder->title('交易管理', '这里是交易管理', '交易列表', '/trade/index')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序', 'price_desc' => '价格降序', 'price_asc' => '价格升序'], 'select')->search('market', $market_list_select, 'select')->search('type', ['0' => '全部方式', '1' => '买入', '2' => '卖出'], 'select')->search('status', ['0' => '全部状态', '1' => '正在交易', '2' => '交易完成', '3' => '已经撤销'], 'select')->search('field', ['userid_c_user_c_id_c_username' => '用户名',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('userid', '用户名', 'link', [['type' => 'button', 'url' => '/user/edit/id/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',]])->key('market', '交易市场', 'text')->key('price', '交易价格', 'text')->key('num', '交易数量', 'text')->key('mum', '交易总额', 'text')->key('deal', '已成交量', 'text')->key('fee', '手续费', 'text')->key('type', '交易方式', 'select', [1 => '<span style="color:#DA9151;">买入</span>', 2 => '<span style="color:#3498db;">卖出</span>'])->key('addtime', '委托时间', 'time')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">未成交</span>', 1 => '<span style="color:#3498db;">已成交</span>', 2 => '<span style="color:#3498db;">已撤销</span>'])->key("ext", '操作', 'link', [['type' => 'button2', 'url' => '/trade/chexiao/id/###', 'title' => '撤销委托', 'field' => 'id', 'color' => '', 'exts' => ["status" => [0]], 'ajax' => 1]])->lists();	}	public function chexiao()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = iv('get.id', 'd', '请选择要撤销的委托');		$trade = db::table('trade')->where(['id' => $id])->find();		if (!$trade) {			ajax('撤销委托参数错误');		}		if ($trade['status'] != 0) {			ajax('当前订单不能撤销');		}		$res = md('trade')->chexiao($id);		if (isset($res[1])) {			ajax('撤销成功', 1);		} else {			ajax('撤销失败');		}	}	public function market()	{		$builder = new builder('trade_market');		$builder->title('市场配置', '这里是市场配置', '市场列表', '/trade/market')->button('add', '添加', '/trade/market_edit')->button('no', '禁用', '/trade/market_status/type/0')->button('off', '启用', '/trade/market_status/type/1')->button('del', '删除', '/trade/market_status/type/-1')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', '' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '名称', 'title' => '标题',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('name', '英文名称', 'text')->key('title', '市场标题', 'text')->key('img', '市场图片', 'img')->key('trade', '允许交易', 'select', [0 => '<span style="color:#DA9151;">禁止</span>', 1 => '<span style="color:#3498db;">允许</span>'])->key('kai_time', '开盘时间', 'text')->key('shou_time', '收盘时间', 'text')->key('zhang', '涨幅限制', 'text')->key('die', '跌幅限制', 'text')->key('sort', '排序', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/trade/market_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function market_edit()	{		if (empty($_POST)) {			$id = input('get.id');			if ($id) {				$data['list'] = db::table('trade_market')->where(['id' => $id])->find();				$market_arr = explode("_", $data['list']['name']);				$data['list']['buy_name'] = $market_arr[1];				$data['list']['sell_name'] = $market_arr[0];			} else {				$data = null;			}			$builder = new builder();			$builder->data($data)->title(($id ? '编辑市场' : '添加市场'), ($id ? '这里是编辑市场' : '这里是添加市场'), '市场管理', '/trade/market')->key('id', '编号', 'readonly', '', '数据编号')->key('id', '编号', 'hidden', '', '数据编号')->key('buy_name', '买入币种', 'select', 'coin_c_name_c_title', '名称')->key('sell_name', '卖出币种', 'select', 'coin_c_name_c_title', '名称')->key('title', '标题', 'text', '', '标题 不填会自动生成')->key('img', '图片', 'image', '', '图片 不填会自动生成')->key('new_price', '最新价格', 'text', '', '自动更新生成')->key('buy_price', '买一价', 'text', '', '自动更新生成')->key('sell_price', '卖一价', 'text', '', '自动更新生成')->key('min_price', '最小价', 'text', '', '自动更新生成')->key('max_price', '最大价', 'text', '', '自动更新生成')->key('volume', '成交量', 'text', '', '自动更新生成')->key('change', '日涨跌', 'text', '', '自动更新生成')->key('change_type', '计算规则', 'select', [0 => '根据开盘价计算', 1 => '24小时前最后一笔计算', 2 => '根据收盘价计算'], '日涨跌计算规则')->key('buy_min', '最小买入价', 'text', '', '限制挂单价格')->key('buy_max', '最大买入价', 'text', '', '限制挂单价格')->key('sell_min', '最小卖出价', 'text', '', '限制挂单价格')->key('sell_max', '最大卖出价', 'text', '', '限制挂单价格')->key('shou_price', '昨日收盘价', 'text', '', '自动更新生成')->key('kai_price', '今日开盘价', 'text', '', '自动更新生成')->key('zhang', '涨幅限制', 'text', '', '交易限制')->key('die', '跌幅限制', 'text', '', '交易限制')->key('fee_buy', '买入手续费', 'text', '', '% 有挂单的时候不能修改')->key('fee_sell', '卖出手续费', 'text', '', '% 有挂单的时候不能修改')->key('trade_min', '单笔交易最小额', 'text', '', '限制挂单总额')->key('trade_max', '单笔交易最大额', 'text', '', '限制挂单总额')->key('trade', '交易状态', 'select', [0 => '禁止交易', 1 => '开启交易'], '状态')->key('invit_buy_kai', '买家赠送', 'select', [0 => '禁止赠送', 1 => '开启赠送'], '买家赠送')->key('invit_sell_kai', '卖家赠送', 'select', [0 => '禁止赠送', 1 => '开启赠送'], '卖家赠送')->key('invit_buy_coin', '买家赠送币种', 'select', 'coin_c_name_c_title', '')->key('invit_sell_coin', '卖家赠送币种', 'select', 'coin_c_name_c_title', '')->key('invit_buy_0', '买家自己赠送比例', 'text', '', '% 买家自己赠送比例')->key('invit_buy_1', '买家一代赠送比例', 'text', '', '% 买家一代赠送比例')->key('invit_buy_2', '买家二代赠送比例', 'text', '', '% 买家二代赠送比例')->key('invit_buy_3', '买家三代赠送比例', 'text', '', '% 买家三代赠送比例')->key('invit_sell_0', '卖家自己赠送比例', 'text', '', '% 卖家自己赠送比例')->key('invit_sell_1', '卖家一代赠送比例', 'text', '', '% 卖家一代赠送比例')->key('invit_sell_2', '卖家二代赠送比例', 'text', '', '% 卖家二代赠送比例')->key('invit_sell_3', '卖家三代赠送比例', 'text', '', '% 卖家三代赠送比例')->key('kai_time', '今日开盘时间', 'text', '', '小时')->key('shou_time', '今日收盘时间', 'text', '', '小时')->key('sort', '排序', 'text', '', '排序 (只能数字)')->key('addtime', '添加时间', 'time', '', '添加时间 (只能时间)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['buy_name'] = iv('post.buy_name', 'w', '买入名称格式错误');			$data['sell_name'] = iv('post.sell_name', 'w', '卖出名称格式错误');			$mymc_coin = new \mymc\coin();			$coin_data = $mymc_coin->select();			foreach ($coin_data as $k => $v) {				$coin_list[$v['name']] = $v;			}			if (!$coin_list[$data['buy_name']]) {				ajax('买入币种错误');			}			if (!$coin_list[$data['sell_name']]) {				ajax('卖出币种错误');			}			if ($data['sell_name'] == $data['buy_name']) {				ajax('买卖币种不能一样');			}			$data['name'] = $data['sell_name'] . '_' . $data['buy_name'];			$data['title'] = iv('post.title');			if ($data['title']) {				if (!check($data['title'], 'a')) {					ajax('交易市场错误');				}			} else {				$data['title'] = $coin_list[$data['sell_name']]['title'] . '(' . strtoupper($data['sell_name']) . '/' . strtoupper($data['buy_name']) . ')';			}			$data['img'] = iv('post.img');			if (!$data['img']) {				$data['img'] = $coin_list[$data['sell_name']]['img'];			}			unset($data['buy_name']);			unset($data['sell_name']);			$data['new_price'] = iv('post.new_price', 'double', '最新价格 格式错误', 1);			$data['buy_price'] = iv('post.buy_price', 'double', '买一价 格式错误', 1);			$data['sell_price'] = iv('post.sell_price', 'double', '卖一价 格式错误', 1);			$data['min_price'] = iv('post.min_price', 'double', '最小价 格式错误', 1);			$data['max_price'] = iv('post.max_price', 'double', '最大价 格式错误', 1);			$data['volume'] = iv('post.volume', 'double', '成交量 格式错误', 1);			$data['change'] = iv('post.change');			$data['change_type'] = iv('post.change_type');			$data['invit_buy_kai'] = iv('post.invit_buy_kai');			$data['invit_sell_kai'] = iv('post.invit_sell_kai');			$data['invit_buy_coin'] = iv('post.invit_buy_coin');			$data['invit_sell_coin'] = iv('post.invit_sell_coin');			$data['invit_buy_0'] = iv('post.invit_buy_0');			$data['invit_buy_1'] = iv('post.invit_buy_1');			$data['invit_buy_2'] = iv('post.invit_buy_2');			$data['invit_buy_3'] = iv('post.invit_buy_3');			$data['invit_sell_0'] = iv('post.invit_sell_0');			$data['invit_sell_1'] = iv('post.invit_sell_1');			$data['invit_sell_2'] = iv('post.invit_sell_2');			$data['invit_sell_3'] = iv('post.invit_sell_3');			$data['buy_min'] = iv('post.buy_min', 'double', '最小买入价 格式错误', 1);			$data['buy_max'] = iv('post.buy_max', 'double', '最大买入价 格式错误', 1);			$data['sell_min'] = iv('post.sell_min', 'double', '最小卖出价 格式错误', 1);			$data['sell_max'] = iv('post.sell_max', 'double', '最大卖出价 格式错误', 1);			$data['shou_price'] = iv('post.shou_price', 'double', '昨日收盘价 格式错误', 1);			$data['kai_price'] = iv('post.kai_price', 'double', '今日开盘价 格式错误', 1);			$data['zhang'] = iv('post.zhang', 'double', '涨幅限制 格式错误', 1);			$data['die'] = iv('post.die', 'double', '跌幅限制 格式错误', 1);			if (!db::table('trade')->where(['market' => $data['name'], 'status' => 0])->find()) {				$data['fee_buy'] = iv('post.fee_buy', 'double', '买入手续费 格式错误', 1);				$data['fee_sell'] = iv('post.fee_sell', 'double', '卖出手续费 格式错误', 1);			}			$data['trade_min'] = iv('post.trade_min', 'double', '单笔交易最小额 格式错误', 1);			$data['trade_max'] = iv('post.trade_max', 'double', '单笔交易最大额 格式错误', 1);			$data['trade'] = iv('post.trade', 'd', '交易状态 格式错误', 1);			$data['kai_time'] = iv('post.kai_time', 'd', '今日开盘时间 格式错误', 1);			$data['shou_time'] = iv('post.shou_time', 'd', '今日收盘时间 格式错误', 1);			$data['sort'] = iv('post.sort', 'd', '排序 格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间 格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态 格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('trade_market')->where(['id' => $id])->save($data);			} else {				if (db::table('trade_market')->where(['name' => $data['name']])->find()) {					ajax('市场存在');				}				$res = db::table('trade_market')->add($data);			}			if ($res) {				mc('mymc_trade_market', null);				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function market_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		mc('mymc_trade_market', null);		$builder->set_status($id, $type, 'trade_market');	}	public function qu()	{		$sort_rule_arr = ['' => '默认', 'id_asc' => 'ID小到大', 'id_desc' => 'ID大到小', 'sort_asc' => 'sort小到大', 'sort_desc' => 'sort大到小', 'price_asc' => '价格小到大', 'price_desc' => '价格大到小', 'buy_asc' => '买一价小到大', 'buy_desc' => '买一价大到小', 'sell_asc' => '卖一价小到大', 'sell_desc' => '卖一价大到小', 'num_asc' => '成交量小到大', 'num_desc' => '成交量大到小', 'mum_asc' => '成交额小到大', 'mum_desc' => '成交额大到小', 'zhangdie_asc' => '涨跌小到大', 'zhangdie_desc' => '涨跌大到小',];		$builder = new builder('trade_qu');		$builder->title('分区配置', '这里是分区配置', '分区列表', '/trade/qu')->button('add', '添加', '/trade/qu_edit')->button('no', '禁用', '/trade/qu_status/type/0')->button('off', '启用', '/trade/qu_status/type/1')->button('del', '删除', '/trade/qu_status/type/-1')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', '' => '时间降序', 'addtime_asc' => '时间升序',], 'select')->search('status', ['0' => '全部状态', '1' => '禁用', '2' => '启用'], 'select')->search('field', ['name' => '名称', 'title' => '标题',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('title', '标题', 'text')->key('sort_rule', '排序规则', 'select', $sort_rule_arr)->key('sort', '排序', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/trade/qu_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function qu_edit()	{		$sort_rule_arr = ['' => '默认', 'id_asc' => 'ID小到大', 'id_desc' => 'ID大到小', 'sort_asc' => 'sort小到大', 'sort_desc' => 'sort大到小', 'price_asc' => '价格小到大', 'price_desc' => '价格大到小', 'buy_asc' => '买一价小到大', 'buy_desc' => '买一价大到小', 'sell_asc' => '卖一价小到大', 'sell_desc' => '卖一价大到小', 'num_asc' => '成交量小到大', 'num_desc' => '成交量大到小', 'mum_asc' => '成交额小到大', 'mum_desc' => '成交额大到小', 'zhangdie_asc' => '涨跌小到大', 'zhangdie_desc' => '涨跌大到小',];		$trade_market = db::table('trade_market')->select();		if (empty($_POST)) {			$id = input('get.id');			$data_list = [];			$cz_data = [];			if ($id) {				$data['list'] = db::table('trade_qu')->where(['id' => $id])->find();				if ($data['list']) {					$cz_data = explode(',', $data['list'] ['data']);;				}			} else {				$data = null;			}			if ($trade_market) {				foreach ($trade_market as $kk => $vv) {					$data_list[$vv['id']]['title'] = $vv['title'];					if (in_array($vv['id'], $cz_data)) {						$data_list[$vv['id']]['status'] = 1;					} else {						$data_list[$vv['id']]['status'] = 0;					}				}			}			$builder = new builder();			$builder->data($data)->url()->title(($id ? '编辑分区' : '添加分区'), ($id ? '这里是编辑分区' : '这里是添加分区'), '分区管理', '/trade/qu')->key('id', '编号', 'readonly', '', '数据编号')->key('id', '编号', 'hidden', '', '数据编号')->key('title', '标题', 'text', '', '标题')->key('data', '市场', 'checkbox', $data_list, '市场')->key('sort_rule', '排序规则', 'select', $sort_rule_arr, '前台显示默认排序规则')->key('sort', '排序', 'text', '', '排序 (只能数字)')->key('addtime', '添加时间', 'time', '', '添加时间 (只能时间)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['data'] = '';			if ($trade_market) {				foreach ($trade_market as $kk => $vv) {					if (isset($_POST['data_' . $vv['id']])) {						$data['data'] .= $vv['id'] . ',';					}				}				if (substr($data['data'], -1) == ',') {					$data['data'] = substr($data['data'], 0, strlen($data['data']) - 1);				}			}			$data['sort_rule'] = iv('post.sort_rule', 'w_', '排序规则格式错误', 1);			$data['title'] = iv('post.title', 'a', '标题 格式错误', 1);			$data['sort'] = iv('post.sort', 'd', '排序 格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间 格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态 格式错误', 1);			$id = iv('post.id');			if ($id) {				$res = db::table('trade_qu')->where(['id' => $id])->save($data);			} else {				$res = db::table('trade_qu')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function qu_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		show($builder->set_status($id, $type, 'trade_qu'));	}	public function log()	{		$market_list = db::table('trade_market')->select();		$market_list_select[0] = '全部市场';		if ($market_list) {			foreach ($market_list as $k => $v) {				$market_list_select[$v['name']] = $v['title'];			}		}		$builder = new builder('trade_log');		$builder->title('成交记录', '这里是成交记录', '记录列表', '/trade/log')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序', 'price_desc' => '价格降序', 'price_asc' => '价格升序'], 'select')->search('market', $market_list_select, 'select')->search('type', ['0' => '全部方式', '1' => '买入', '2' => '卖出'], 'select')->search('status', ['0' => '全部状态', '1' => '正在交易', '2' => '交易完成', '3' => '已经撤销'], 'select')->search('field', ['userid_c_user_c_id_c_username' => '用户名', 'id' => '编号',], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('userid', '买家', 'link', [['type' => 'button', 'url' => '/user/edit/id/###', 'title' => ['from_id' => 'userid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'userid', 'color' => '',]])->key('peerid', '卖家', 'link', [['type' => 'button', 'url' => '/user/edit/id/###', 'title' => ['from_id' => 'peerid', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'peerid', 'color' => '',]])->key('market', '交易市场', 'text')->key('price', '交易价格', 'text')->key('num', '交易数量', 'text')->key('mum', '交易总额', 'text')->key('fee_buy', '买入手续费', 'text')->key('fee_sell', '卖出手续费', 'text')->key('type', '交易方式', 'select', [1 => '<span style="color:#DA9151;">买入</span>', 2 => '<span style="color:#3498db;">卖出</span>'])->key('addtime', '成交时间', 'time')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">未成交</span>', 1 => '<span style="color:#3498db;">已成交</span>', 2 => '<span style="color:#3498db;">已撤销</span>'])->key('invit', '推荐是否赠送', 'select', [1 => '<span style="color:#DA9151;">已经赠送</span>', 0 => '<span style="color:#3498db;">没有赠送</span>'])->key("ext", '操作', 'link', [['type' => 'button2', 'url' => '/trade/zengsong/id/###', 'title' => '手动计算赠送', 'field' => 'id', 'color' => '', 'exts' => ["invit" => [0]], 'ajax' => ""]])->lists();	}	public function zengsong()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("trade_log", ["id" => $id], "edit");			$builder->title(($id ? '编辑赠送' : '添加赠送'), ($id ? '这里是编辑赠送' : '这里是添加赠送'), '赠送管理', '/trade/log')->key('id', '编号', 'readonly', '', '数据编号')->key('id', '编号', 'hidden', '', '数据编号')->key('invit', '是否赠送', 'select', [0 => '不赠送', 1 => '计算赠送'], '')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$id = iv('post.id');			$res = md('trade')->invit_jisuan($id);			if (isset($res[1])) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function entrust()	{		$all_market = mc('admin_all_market');		if (!$all_market) {			$all_market = db::table('trade_market')->select();			mc('admin_all_market', $all_market);		}		$market_list = $all_market;		$market = iv('get.market');		if (!$market) {			if ($market_list) {				$market = $market_list[0]['name'];			}		}		$this->assign('market', $market);		$market_list_data = [];		foreach ($market_list as $k => $v) {			$market_list_data[$v['name']] = $v;		}		$market_list = $market_list_data;		$this->assign('market_list', $market_list);		$res = mc('admin_trade_entrust' . $market);		if (!$res) {			$res['buy_num'] = mc('jisuan_market_buy_num' . $market);			$res['sell_num'] = mc('jisuan_market_sell_num' . $market);			$res['buy_mum'] = mc('jisuan_market_buy_mum' . $market);			$res['sell_mum'] = mc('jisuan_market_sell_mum' . $market);			$res['buy_fee'] = mc('jisuan_market_buy_fee' . $market);			$res['sell_fee'] = mc('jisuan_market_sell_fee' . $market);			$res['buy_deal'] = mc('jisuan_market_buy_deal' . $market);			$res['sell_deal'] = mc('jisuan_market_sell_deal' . $market);			mc('admin_trade_entrust' . $market, $res);		}		$this->assign('res', $res);		$data_b = [];		$data_s = [];		$ress = mc('admin_entrust_ress' . $market);		if ($ress) {			krsort($ress);			$ress = array_values($ress);			foreach ($ress as $k => $v) {				$tmp = json_decode($v['data']);				$data_b[] = ['date' => addtime($v['addtime'] - 1), 'a' => $tmp[0], 'b' => $tmp[1], 'c' => $tmp[6], 'd' => $tmp[7]];				$data_s[] = ['date' => addtime($v['addtime'] - 1), 'a' => $tmp[2], 'b' => $tmp[3], 'c' => $tmp[4], 'd' => $tmp[5]];			}		}		$this->assign('datab', json_encode($data_b));		$this->assign('datas', json_encode($data_s));		$this->display();	}	public function logsta()	{		$market_list = db::table('trade_market')->select();		$market = iv('get.market');		if (!$market) {			if ($market_list) {				$market = $market_list[0]['name'];			}		}		$this->assign('market', $market);		$market_list_data = [];		foreach ($market_list as $k => $v) {			$market_list_data[$v['name']] = $v;		}		$market_list = $market_list_data;		$this->assign('market_list', $market_list);		$res = mc('admin_trade_logsta' . $market);		if (!$res) {			$res['num'] = mrz(db::table('trade_log')->where(['market' => $market])->sum('num'), 0);			$res['mum'] = mrz(db::table('trade_log')->where(['market' => $market])->sum('mum'), 0);			$res['fee_buy'] = mrz(db::table('trade_log')->where(['market' => $market])->sum('fee_buy'), 0);			$res['fee_sell'] = mrz(db::table('trade_log')->where(['market' => $market])->sum('fee_sell'), 0);			mc('admin_trade_logsta' . $market, $res);		}		$this->assign('res', $res);		$data = [];		$ress = db::table('sys_stats')->where(['name' => 'trade_log', 'type' => $market])->order("addtime asc")->limit(100)->select();		krsort($ress);		$ress = array_values($ress);		if ($ress) {			foreach ($ress as $k => $v) {				$tmp = json_decode($v['data']);				$data[] = ['date' => addtime($v['addtime'] - 1), 'a' => $tmp[0], 'b' => $tmp[1], 'c' => $tmp[2], 'd' => $tmp[3]];			}		}		$this->assign('datas', json_encode($data));		$this->display();	}	public function err()	{		$builder = new builder('sys_err');		$builder->title('系统误差', '这里记录了系统交易产生的误差非错误，如果有提示错误请按照说明进行核对', '误差列表', '/trade/err')->search('addtime_str', '开始时间', 'time')->search('addtime_end', '结束时间', 'time')->search('order', ['id_desc' => 'ID降序', 'id_asc' => 'ID升序', 'sort_desc' => '索引降序', 'sort_asc' => '索引升序', 'addtime_desc' => '时间降序', 'addtime_asc' => '时间升序', 'price_desc' => '价格降序', 'price_asc' => '价格升序'], 'select')->search('name', '请输入查询内容', 'text')->key('id', 'ID', 'text')->key('value', '说明', 'text')->key('addtime', '发生时间', 'time')->lists();	}	public function che()	{		$builder = new builder("trade_che");		$builder->title('自动撤单', '这里是自动撤单规则管理', '自动撤单列表', '/trade/che')->button('add', '添加规则', '/trade/che_edit')->button('no', '禁用', '/trade/che_status/type/0')->button('off', '启用', '/trade/che_status/type/1')->button('del', '删除', '/trade/che_status/type/-1')->key('id', 'ID', 'text')->key('market', '交易市场', 'link', [['type' => 'button', 'url' => '/trade/market/field/name/name/###', 'title' => ['from_id' => 'market', 'table' => 'trade_market', 'to_id' => 'name', 'title' => 'title'], 'field' => 'market', 'color' => '',]])->key('maxtime', '超过时间(小时)', 'text')->key('buy', '买单是否撤销', 'select', [0 => '<span style="color:#DA9151;">不撤销</span>', 1 => '<span style="color:#3498db;">自动撤销</span>'])->key('sell', '卖单是否撤销', 'select', [0 => '<span style="color:#DA9151;">不撤销</span>', 1 => '<span style="color:#3498db;">自动撤销</span>'])->key('sort', '排序', 'text')->key('addtime', '添加时间', 'time')->key('endtime', '更新时间', 'time')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/trade/che_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',],])->lists();	}	public function che_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("trade_che", ["id" => $id], "edit");			$builder->title(($id ? '编辑撤单' : '添加撤单'), ($id ? '这里是编辑撤单' : '这里是添加撤单'), '撤单管理', '/trade/che');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('market', '交易市场', 'select', 'trade_market_c_name_c_title', '交易市场')->key('maxtime', '撤单时间', 'text', '', '(小时) 大于这个时间的会自动撤单')->key('buy', '买单是否撤销', 'select', [0 => '不撤销', 1 => '自动撤销'], '买单是否撤销')->key('sell', '卖单是否撤销', 'select', [0 => '不撤销', 1 => '自动撤销'], '卖单是否撤销')->key('sort', '排序', 'text', '', '排序 (只能数字)')->key('addtime', '添加时间', 'time', '', '添加时间 (只能时间)')->key('endtime', '更新时间', 'time', '', '更新时间 (只能时间)')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['market'] = iv('post.market', 'w_', '交易市场 格式错误', 1);			$data['maxtime'] = iv('post.maxtime', 'd', '撤单时间 格式错误', 1);			$data['buy'] = iv('post.buy', 'd', '买单是否撤销 格式错误', 1);			$data['sell'] = iv('post.sell', 'd', '卖单是否撤销 格式错误', 1);			$data['sort'] = iv('post.sort', 'd', '排序 格式错误', 1);			$data['addtime'] = iv('post.addtime', 'time', '添加时间格式错误', 1);			$data['endtime'] = iv('post.endtime', 'time', '更新时间格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$data['endtime'] = $data['endtime'] ? $data['endtime'] : time();				unset($data['market']);				$res = db::table('trade_che')->where(['id' => $id])->save($data);			} else {				if (db::table('trade_che')->where(['market' => $data['market']])->find()) {					ajax('市场存在');				}				$data['addtime'] = $data['addtime'] ? $data['addtime'] : time();				$res = db::table('trade_che')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function che_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		$res = $builder->set_status($id, $type, 'trade_che');		if (isset($res[1])) {			ajax('操作成功', 1);		} else {			ajax('操作失败');		}	}	public function moni()	{		$builder = new builder("trade_moni");		$builder->title('测试交易', '注意：规则不要配置太多会影响服务器性能', '测试交易列表', '/trade/moni')->button('add', '添加规则', '/trade/moni_edit')->button('no', '禁用', '/trade/moni_status/type/0')->button('off', '启用', '/trade/moni_status/type/1')->button('del', '删除', '/trade/moni_status/type/-1')->key('id', 'ID', 'text')->key('market', '交易市场', 'link', [['type' => 'button', 'url' => '/trade/market/field/id/name/###', 'title' => ['from_id' => 'market_id', 'table' => 'trade_market', 'to_id' => 'id', 'title' => 'title'], 'field' => 'market_id', 'color' => '',]])->key('userid', '交易用户', 'link', [['type' => 'button', 'url' => '/user/index/field/id/name/###', 'title' => ['from_id' => 'user_id', 'table' => 'user', 'to_id' => 'id', 'title' => 'username'], 'field' => 'user_id', 'color' => '',]])->key('type', '交易方式', 'select', [1 => '<span style="color:#DA9151;">买入</span>', 2 => '<span style="color:#3498db;">卖出</span>'])->key('min_price', '最小价', 'text')->key('max_price', '最大价', 'text')->key('min_num', '最小量', 'text')->key('max_num', '最大量', 'text')->key('zdie_type', '涨跌方式', 'select', [1 => '<span style="color:#DA9151;">上涨</span>', 2 => '<span style="color:#3498db;">下跌</span>', 3 => '<span style="color:#3498db;">随机</span>'])->key('zdie_bili', '涨跌比例(%)', 'text')->key('time', '执行间隔(秒)', 'text')->key('qing', '自动清理(秒)', 'text')->key('addtime', '添加时间', 'text')->key('shang_time', '上次执行时间', 'text')->key('shang_price', '上次执行价格', 'text')->key('status', '状态', 'select', [0 => '<span style="color:#DA9151;">禁用</span>', 1 => '<span style="color:#3498db;">启用</span>'])->key("ext", '操作', 'link', [['type' => 'button3', 'url' => '/trade/moni_edit/id/###', 'title' => '编辑', 'field' => 'id', 'color' => '',], ['type' => 'button2', 'url' => '/trade/moni_zhixing/id/###', 'title' => '执行一次', 'field' => 'id', 'color' => '', 'ajax' => 'get', 'exts' => ["status" => [1]],]])->lists();	}	public function moni_edit()	{		if (empty($_POST)) {			$id = input('get.id');			$builder = new builder("trade_moni", ["id" => $id], "edit");			$builder->title(($id ? '编辑撤单' : '添加撤单'), ($id ? '这里是编辑撤单' : '这里是添加撤单'), '测试管理', '/trade/moni');			if ($id) {				$builder->key('id', '编号', 'readonly', '', '数据编号');				$builder->key('id', '编号', 'hidden', '', '数据编号');			}			$builder->key('market_id', '交易市场', 'select', 'trade_market_c_id_c_title', '要挂单的交易市场')->key('user_id', '用户id', 'text', '', '要挂单的用户id')->key('type', '交易方式', 'select', [1 => '买入', 2 => '卖出'], '买卖方式')->key('min_price', '最小价格', 'text', '', '挂单最小价格')->key('max_price', '最大价格', 'text', '', '挂单最大价格')->key('min_num', '最小数量', 'text', '', '挂单最小数量')->key('max_num', '最大数量', 'text', '', '挂单最大数量')->key('time', '执行间隔', 'text', '', '(秒) 间隔多少秒执行一次')->key('qing', '自动清理', 'text', '', '(秒) 自动清理超过多少秒没有成交的挂单 注意是会清理当前账户这个市场的所有超时的挂单 不会区分是否手动执行的挂单挂')->key('zdie_type', '涨跌方式', 'select', [1 => '上涨', 2 => '下跌', 3 => '随机'], '涨跌方式')->key('zdie_bili', '涨跌幅度', 'text', '', '(%) 对比上一笔计算  默认第一笔 读取最新成交价 如果没有成交价  不会挂单')->key('shang_price', '上次执行价格', 'text', '', '设置为 0 则从新读取最新成交价格')->key('status', '状态', 'select', [0 => '禁用', 1 => '启用'], '状态')->edit();		} else {			if (APP_DEMO) {				ajax('测试站暂时不能修改');			}			$data['market_id'] = iv('post.market_id', 'd', '交易市场 格式错误', 1);			$data['user_id'] = iv('post.user_id', 'd', '用户id 格式错误', 1);			$data['type'] = iv('post.type', 'd', '交易方式 格式错误', 1);			$data['min_price'] = iv('post.min_price', 'xnb', '最小价格 格式错误', 1);			$data['max_price'] = iv('post.max_price', 'xnb', '最大价格 格式错误', 1);			$data['min_num'] = iv('post.min_num', 'xnb', '最小数量 格式错误', 1);			$data['max_num'] = iv('post.max_num', 'xnb', '最大数量 格式错误', 1);			$data['time'] = iv('post.time', 'd', '执行间隔(秒) 格式错误', 1);			$data['qing'] = iv('post.qing', 'd', '自动清理(秒) 格式错误', 1);			$data['zdie_type'] = iv('post.zdie_type', 'd', '涨跌方式 格式错误', 1);			$data['zdie_bili'] = iv('post.zdie_bili', 'cny', '涨跌比例(%) 格式错误', 1);			$data['shang_price'] = iv('post.shang_price', 'xnb', '上次执行价格 格式错误', 1);			$data['status'] = iv('post.status', 'd', '状态格式错误', 1);			$id = iv('post.id');			if ($id) {				$data['endtime'] = date('Y-m-d H:i:s');				$res = db::table('trade_moni')->where(['id' => $id])->save($data);			} else {				$data['addtime'] = date('Y-m-d H:i:s');				$res = db::table('trade_moni')->add($data);			}			if ($res) {				ajax('操作成功', 1);			} else {				ajax('操作失败');			}		}	}	public function moni_status()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = input('post.id');		$type = input('get.type');		$builder = new builder();		$res = $builder->set_status($id, $type, 'trade_moni');		if (isset($res[1])) {			ajax('操作成功', 1);		} else {			ajax('操作失败');		}	}	public function moni_zhixing()	{		if (APP_DEMO) {			ajax('测试站暂时不能修改');		}		$id = iv('get.id', 'd', '参数错误');		$res = md('trade')->moni($id);		if (isset($res[1]) && $res[1]) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}}