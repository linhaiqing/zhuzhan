<?phpif (!defined("APP_PATH")) exit("no direct access allowed");require_once __DIR__ . '/common.php';class moveUpload{	public static function init($config, $user_config)	{		OssClient::setConfig($config);		$user_config['rootPath'] = $config['host'];		$config = ["imageActionName" => "uploadimage", "imageFieldName" => "upfile", "imageMaxSize" => 2048000, "imageAllowFiles" => [".png", ".jpg", ".jpeg", ".gif", ".bmp"], "imageCompressEnable" => true, "imageCompressBorder" => 1600, "imageInsertAlign" => "none", "imageUrlPrefix" => "", "rootPath" => "upload", "pathType" => "public", "scrawlActionName" => "uploadscrawl", "scrawlFieldName" => "upfile", "scrawlMaxSize" => 2048000, "scrawlUrlPrefix" => "", "scrawlInsertAlign" => "none", "snapscreenActionName" => "uploadimage", "snapscreenUrlPrefix" => "", "snapscreenInsertAlign" => "none", "catcherLocalDomain" => ["127.0.0.1", "localhost", "img.baidu.com"], "catcherActionName" => "catchimage", "catcherFieldName" => "source", "catcherUrlPrefix" => "", "catcherMaxSize" => 2048000, "catcherAllowFiles" => [".png", ".jpg", ".jpeg", ".gif", ".bmp"], "videoActionName" => "uploadvideo", "videoFieldName" => "upfile", "videoUrlPrefix" => "", "videoMaxSize" => 102400000, "videoAllowFiles" => [".flv", ".swf", ".mkv", ".avi", ".rm", ".rmvb", ".mpeg", ".mpg", ".ogg", ".ogv", ".mov", ".wmv", ".mp4", ".webm", ".mp3", ".wav", ".mid"], "fileActionName" => "uploadfile", "fileFieldName" => "upfile", "fileUrlPrefix" => "", "fileMaxSize" => 51200000, "fileAllowFiles" => [".png", ".jpg", ".jpeg", ".gif", ".bmp", ".flv", ".swf", ".mkv", ".avi", ".rm", ".rmvb", ".mpeg", ".mpg", ".ogg", ".ogv", ".mov", ".wmv", ".mp4", ".webm", ".mp3", ".wav", ".mid", ".rar", ".zip", ".tar", ".gz", ".7z", ".bz2", ".cab", ".iso", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".txt", ".md", ".xml"], "imageManagerActionName" => "listimage", "imageManagerListSize" => 20, "imageManagerUrlPrefix" => "", "imageManagerInsertAlign" => "none", "imageManagerAllowFiles" => [".png", ".jpg", ".jpeg", ".gif", ".bmp"], "fileManagerActionName" => "listfile", "fileManagerUrlPrefix" => "", "fileManagerListSize" => 20, "fileManagerAllowFiles" => [".png", ".jpg", ".jpeg", ".gif", ".bmp", ".flv", ".swf", ".mkv", ".avi", ".rm", ".rmvb", ".mpeg", ".mpg", ".ogg", ".ogv", ".mov", ".wmv", ".mp4", ".webm", ".mp3", ".wav", ".mid", ".rar", ".zip", ".tar", ".gz", ".7z", ".bz2", ".cab", ".iso", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".txt", ".md", ".xml"]];		if (is_array($user_config)) {			$config = array_merge($config, $user_config);		}		upload::run($config);	}}class upload{	public static $CONFIG = "";	public static function run($CONFIG)	{		self::$CONFIG = $CONFIG;		$action = @$_GET['action'];		error_reporting(E_ERROR);		header("Content-Type: text/html; charset=utf-8");		switch ($action) {			case 'config':				$result = json_encode($CONFIG);				break;			case 'uploadimage':			case 'uploadscrawl':			case 'uploadvideo':			case 'uploadfile':				$result = self::action_upload($CONFIG);				break;			case 'listimage':			case 'listfile':				$result = self::action_list($CONFIG);				break;			case 'catchimage':				$result = self::action_crawler($CONFIG);				break;			default:				$result = json_encode(['state' => '请求地址出错']);				break;		}		if (isset($_GET["callback"])) {			if (preg_match("/^[\w_]+$/", $_GET["callback"])) {				echo htmlspecialchars($_GET["callback"]) . '(' . $result . ')';			} else {				echo json_encode(['state' => 'callback参数不合法']);			}		} else {			echo $result;		}	}	public static function action_upload($CONFIG)	{		$base64 = "upload";		switch (htmlspecialchars($_GET['action'])) {			case 'uploadimage':				$config = ["rootPath" => $CONFIG['rootPath'], "hashname" => isset($CONFIG['hashname']) ? $CONFIG['hashname'] : true, "pathFormat" => isset($CONFIG['pathFormat']) ? $CONFIG['pathFormat'] : date("Ymd") . "/image/", "pathType" => $CONFIG['pathType'], "maxSize" => $CONFIG['imageMaxSize'], "allowFiles" => $CONFIG['imageAllowFiles']];				$fieldName = $CONFIG['imageFieldName'];				break;			case 'uploadscrawl':				$config = ["rootPath" => $CONFIG['rootPath'], "hashname" => isset($CONFIG['hashname']) ? $CONFIG['hashname'] : true, "pathFormat" => isset($CONFIG['pathFormat']) ? $CONFIG['pathFormat'] : date("Ymd") . "/scrawl/", "pathType" => $CONFIG['pathType'], "maxSize" => $CONFIG['scrawlMaxSize'], "allowFiles" => $CONFIG['imageAllowFiles'], "oriName" => "scrawl.png"];				$fieldName = $CONFIG['scrawlFieldName'];				$base64 = "base64";				break;			case 'uploadvideo':				$config = ["rootPath" => $CONFIG['rootPath'], "hashname" => isset($CONFIG['hashname']) ? $CONFIG['hashname'] : true, "pathFormat" => isset($CONFIG['pathFormat']) ? $CONFIG['pathFormat'] : date("Ymd") . "/video/", "maxSize" => $CONFIG['videoMaxSize'], "allowFiles" => $CONFIG['videoAllowFiles']];				$fieldName = $CONFIG['videoFieldName'];				break;			case 'uploadfile':			default:				$config = ["rootPath" => $CONFIG['rootPath'], "hashname" => isset($CONFIG['hashname']) ? $CONFIG['hashname'] : true, "pathFormat" => isset($CONFIG['pathFormat']) ? $CONFIG['pathFormat'] : date("Ymd") . "/file/", "maxSize" => $CONFIG['fileMaxSize'], "allowFiles" => $CONFIG['fileAllowFiles']];				$fieldName = $CONFIG['fileFieldName'];				break;		}		$up = new baseUpload($fieldName, $config, $base64);		return json_encode($up->getFileInfo());	}	public static function action_list($CONFIG)	{		switch ($_GET['action']) {			case 'listfile':				$allowFiles = $CONFIG['fileManagerAllowFiles'];				$listSize = $CONFIG['fileManagerListSize'];				$path = $CONFIG['rootPath'];				break;			case 'listimage':			default:				$allowFiles = $CONFIG['imageManagerAllowFiles'];				$listSize = $CONFIG['imageManagerListSize'];				$path = $CONFIG['rootPath'];		}		$allowFiles = substr(str_replace(".", "|", join("", $allowFiles)), 1);		$size = isset($_GET['size']) ? htmlspecialchars($_GET['size']) : $listSize;		$start = isset($_GET['start']) ? htmlspecialchars($_GET['start']) : 0;		$end = $start + $size;		$path = $_SERVER['DOCUMENT_ROOT'] . (substr($path, 0, 1) == "/" ? "" : "/") . $path;		$files = self::getfiles($path, $allowFiles);		if (!count($files)) {			return json_encode(["state" => "no match file", "list" => [], "start" => $start, "total" => count($files)]);		}		$len = count($files);		for ($i = min($end, $len) - 1, $list = []; $i < $len && $i >= 0 && $i >= $start; $i--) {			$list[] = $files[$i];		}		$result = json_encode(["state" => "SUCCESS", "list" => $list, "start" => $start, "total" => count($files)]);		return $result;	}	public static function getfiles($path, $allowFiles, &$files = [])	{		$ossClient = OssClient::init();		$listObjectInfo = $ossClient->listObjects(OssClient::getBucket());		$objectList = $listObjectInfo->getObjectList();		if (!empty($objectList)) {			foreach ($objectList as $objectInfo) {				$files[] = ['url' => "" . $objectInfo->getKey(), 'mtime' => $objectInfo->getLastModified()];			}		}		return $files;	}	public static function action_crawler($CONFIG)	{		set_time_limit(0);		$config = ["pathType" => $CONFIG['pathType'], "rootPath" => $CONFIG['rootPath'], "pathFormat" => $CONFIG['pathFormat'], "maxSize" => $CONFIG['catcherMaxSize'], "allowFiles" => $CONFIG['catcherAllowFiles'], "oriName" => "remote.png"];		$fieldName = $CONFIG['catcherFieldName'];		$list = [];		if (isset($_POST[$fieldName])) {			$source = $_POST[$fieldName];		} else {			$source = $_GET[$fieldName];		}		foreach ($source as $imgUrl) {			$item = new baseUpload($imgUrl, $config, "remote");			$info = $item->getFileInfo();			array_push($list, ["state" => $info["state"], "url" => $info["url"], "size" => $info["size"], "title" => htmlspecialchars($info["title"]), "original" => htmlspecialchars($info["original"]), "source" => htmlspecialchars($imgUrl)]);		}		return json_encode(['state' => count($list) ? 'SUCCESS' : 'ERROR', 'list' => $list]);	}}class baseUpload{	private $fileField;	private $file;	private $base64;	private $config;	private $oriName;	private $fileName;	private $fullName;	private $filePath;	private $fileSize;	private $fileType;	private $stateInfo;	private $stateMap = ["SUCCESS", "文件大小超出 upload_max_filesize 限制", "文件大小超出 MAX_FILE_SIZE 限制", "文件未被完整上传", "没有文件被上传", "上传文件为空", "ERROR_TMP_FILE" => "临时文件错误", "ERROR_TMP_FILE_NOT_FOUND" => "找不到临时文件", "ERROR_SIZE_EXCEED" => "文件大小超出网站限制", "ERROR_TYPE_NOT_ALLOWED" => "文件类型不允许", "ERROR_CREATE_DIR" => "目录创建失败", "ERROR_DIR_NOT_WRITEABLE" => "目录没有写权限", "ERROR_FILE_MOVE" => "文件保存时出错", "ERROR_FILE_NOT_FOUND" => "找不到上传文件", "ERROR_WRITE_CONTENT" => "写入文件内容错误", "ERROR_UNKNOWN" => "未知错误", "ERROR_DEAD_LINK" => "链接不可用", "ERROR_HTTP_LINK" => "链接不是http链接", "ERROR_HTTP_CONTENTTYPE" => "链接contentType不正确", "INVALID_URL" => "非法 URL", "INVALID_IP" => "非法 IP", "OSSUPLOADERR" => "阿里云OSS上传失败"];	public function __construct($fileField, $config, $type = "upload")	{		$config["pathType"] = trim($config["pathType"], "/");		$this->fileField = $fileField;		$this->config = $config;		$this->type = $type;		if ($type == "remote") {			$this->saveRemote();		} else if ($type == "base64") {			$this->upBase64();		} else {			$this->upFile();		}		$this->stateMap['ERROR_TYPE_NOT_ALLOWED'] = iconv('unicode', 'utf-8', $this->stateMap['ERROR_TYPE_NOT_ALLOWED']);	}	private function upFile()	{		$file = isset($_FILES[$this->fileField]) ? $_FILES[$this->fileField] : "";		if (!$file) {			$i = 0;			while (true) {				if ($file = (isset($_FILES[$this->fileField . $i]) ? $_FILES[$this->fileField . $i] : "")) {					break;				}				if ($i++ > 10) {					break;				}			}		}		$this->file = $file;		if (!$this->file) {			$this->stateInfo = $this->getStateInfo("ERROR_FILE_NOT_FOUND");			return;		}		if ($this->file['error']) {			$this->stateInfo = $this->getStateInfo($this->file['error']);			return;		} else if (!file_exists($this->file['tmp_name'])) {			$this->stateInfo = $this->getStateInfo("ERROR_TMP_FILE_NOT_FOUND");			return;		} else if (!is_uploaded_file($this->file['tmp_name'])) {			$this->stateInfo = $this->getStateInfo("ERROR_TMPFILE");			return;		}		$file_hash = md5_file($this->file['tmp_name']);		$img = file_get_contents($this->file['tmp_name']);		$this->oriName = $this->file['name'];		$this->fileSize = $this->file['size'];		$this->fileType = $this->getFileExt();		$this->fileName = $this->config['hashname'] ? $file_hash . $this->fileType : $this->oriName;		$this->fullName = $this->getFullName($file_hash);		$this->filePath = $this->file['tmp_name'];		$this->run_upload($img);	}	private function run_upload($content)	{		if (!$content) {			$this->stateInfo = "上传内容不存在!";			return;		}		if (!$this->checkSize()) {			$this->stateInfo = $this->getStateInfo("ERROR_SIZE_EXCEED");			return;		}		if (!$this->checkType()) {			$this->stateInfo = $this->getStateInfo("ERROR_TYPE_NOT_ALLOWED");			return;		}		$ossClient = OssClient::init();		$res = $ossClient->putObject(OssClient::getBucket(), $this->FullBaseName, $content);		if (isset($res['info']['url'])) {			$this->stateInfo = "SUCCESS";		} else {			$this->stateInfo = $this->getStateInfo("OSSUPLOADERR");		}	}	private function upBase64()	{		$base64Data = $_POST[$this->fileField];		$img = base64_decode($base64Data);		$file_hash = md5($img);		$this->oriName = $this->config['oriName'];		$this->fileSize = strlen($img);		$this->fileType = $this->getFileExt();		$this->fileName = $file_hash . $this->fileType;		$this->fullName = $this->getFullName($file_hash);		$this->filePath = "";		$this->run_upload($img);	}	private function saveRemote()	{		$imgUrl = htmlspecialchars($this->fileField);		$imgUrl = str_replace("&amp;", "&", $imgUrl);		$file_name = basename($imgUrl) ? basename($imgUrl) : "move.png";		$img = file_get_contents($imgUrl);		$file_hash = md5($img);		$this->oriName = $file_name;		$this->fileSize = strlen($img);		$this->fileType = $this->getFileExt();		$this->fileName = $this->config['hashname'] ? $file_hash . $this->fileType : $this->oriName;		$this->fullName = $this->getFullName($file_hash);		$this->filePath = "";		$this->run_upload($img);	}	private function getStateInfo($errCode)	{		return !$this->stateMap[$errCode] ? $this->stateMap["ERROR_UNKNOWN"] : $this->stateMap[$errCode];	}	private function getFileExt()	{		return strtolower(strrchr($this->oriName, '.'));	}	private function getFullName($hash)	{		if (!$hash) {			die("文件hash 未获取");		}		if (!preg_match("/^[0-9a-zA-Z_\/]{1,20}$/", $this->config["pathType"])) {			die("配置子目录只能是字母数字下划线组合" . $this->config["pathType"]);		}		$this->FullBaseName = $this->config["pathType"] . "/" . $this->config["pathFormat"] . $this->fileName;		return $this->config["rootPath"] . $this->FullBaseName;	}	private function checkType()	{		return in_array($this->getFileExt(), $this->config["allowFiles"]);	}	private function checkSize()	{		return $this->fileSize <= ($this->config["maxSize"]);	}	public function getFileInfo()	{		return ["state" => $this->stateInfo, "basename" => $this->fullName, "url" => $this->fullName, "title" => $this->fileName, "original" => $this->oriName, "type" => $this->fileType, "size" => $this->fileSize];	}} 