<?phpnamespace app;use Move\db;class trade extends home{	protected $market_list = [];	protected $coin_list = [];	public function __construct()	{		parent::__construct();		$this->userid = $this->userid();		if (!$this->userid) {			ajax('请登录', -99);		}		$this->market_list = parent::getMarketInfo();		$mymc_coin = new \mymc\coin();		$this->coin_list = $mymc_coin->select(1);	}	public function json()	{		$ret = [];		$market = iv('get.market');		if (empty($market) || !$this->market_list[$market]) {			ajax("market is must!");		}		$market_arr = explode("_", $market);		if (!is_array($market_arr)) {			exit();		}		$xnb = $market_arr[0];		$rmb = $market_arr[1];		$round = $this->coin_list[$xnb]['round'];		$ret['info'] = ["0" => ['id' => $this->coin_list[$xnb]['id'], 'name' => $this->coin_list[$xnb]['name'], 'title' => $this->coin_list[$xnb]['title'], 'img' => $this->host . "/uoload/" . $this->coin_list[$xnb]['img']], "1" => ['id' => $this->coin_list[$rmb]['id'], 'name' => $this->coin_list[$rmb]['name'], 'title' => $this->coin_list[$rmb]['title'], 'img' => $this->host . "/upload/" . $this->coin_list[$rmb]['img']]];		if ($this->userid) {			$user = db::table("user")->where(["id" => $this->userid])->find();			$user_coin = db::table("user_coin")->where(['userid' => $this->userid])->find();			if ($user_coin) {				$ret['finance'] = [num($user_coin[$rmb], $this->coin_list[$rmb]['round']), num($user_coin[$rmb . 'd'], $this->coin_list[$rmb]['round']), num($user_coin[$xnb], $this->coin_list[$xnb]['round']), num($user_coin[$xnb . 'd'], $this->coin_list[$xnb]['round']), num($user['zzc'], 2),];			}		}		$ret['top'] = ["new_price" => num($this->market_list[$market]['new_price'], $round), "buy_price" => num($this->market_list[$market]['buy_price'], $round), "sell_price" => num($this->market_list[$market]['sell_price'], $round), "min_price" => num($this->market_list[$market]['min_price'], $round), "max_price" => num($this->market_list[$market]['max_price'], $round), "volume" => num($this->market_list[$market]['volume'], (8 - $round)), "change" => num($this->market_list[$market]['change'], 2)];		$buy = md('trade')->buy_list($market);		$sell = array_reverse(md('trade')->sell_list($market));		$limit = 5;		if ($buy) {			foreach ($buy as $k => $v) {				if ($k >= $limit) {					break;				}				$ret['depth']['buy'][$k] = ['买' . ($k + 1), num($v['price'], $round), num($v['nums'], (8 - $round)), num($v['nums'] * $v['price'], $round),];			}		} else {			$ret['depth']['buy'] = [];		}		if ($sell) {			$sell_len = count($sell) > $limit ? $limit : count($sell);			$sellTemp = array_slice($sell, count($sell) - $sell_len, $sell_len);			$sell = $sellTemp;			foreach ($sell as $k => $v) {				if ($k >= $limit) {					break;				}				$ret['depth']['sell'][$k] = ['卖' . ($sell_len - $k), num($v['price'], $round), num($v['nums'], (8 - $round)), num($v['price'] * $v['nums'], $round),];			}		} else {			$ret['depth']['sell'] = [];		}		$ret['depth']['test'] = $sell;		$limit = 10;		if ($this->userid) {			$trade = db::table("trade")->where(["market" => $market, "userid" => $this->userid, "status" => 0])->order("`id` DESC")->limit($limit)->select();			if ($trade) {				foreach ($trade as $k => $v) {					if ($k >= $limit) {						break;					}					$ret['order'][$k] = ["addtime" => date("m-d H:i", $v["addtime"]), "type" => $v['type'], "price" => num($v['price'], $round), "num" => num($v['num'], (8 - $round)), "deal" => num($v['deal'], (8 - $round)), "id" => $v['id'],];				}			}		}		$limit = 10;		$trade_trade_log = md('trade')->log_list($market);		$trade_log = $trade_trade_log;		if ($trade_log) {			foreach ($trade_log as $k => $v) {				if ($k >= $limit) {					break;				}				$ret['trade_log'][$k] = ["addtime" => date("m-d H:i", $v["addtime"]), "type" => $v['type'], "price" => num($v['price'], $round), "num" => num($v['num'], (8 - $round)), "mum" => num($v['mum'], (8)),];			}		}		ajax($ret, 1);	}	public function up()	{		$this->check_up('APP-交易-上行');		$paypassword = iv('post.paypassword');		$market = iv('post.market', 'w_', '交易市场格式错误');		$price = iv('post.price', 'double', '交易价格格式错误');		$num = iv('post.num', 'double', '交易数量格式错误');		$type = iv('post.type', 'd', '交易方式格式错误');		$goole = iv('post.goole');		$user = db::table("user")->where(["id" => $this->userid])->find();		if (isset($user['trade_sh']) && $user['trade_sh'] == 1) {			ajax('您的账户没有通过审核暂时不能交易');		}		if ($this->config['mr_index'] != 'd') {			if ($user['tpwdsetting'] == 3) {			}			if ($user['tpwdsetting'] == 2) {				if (!check($paypassword, 'password')) {					ajax('交易密码格式错误');				}				if (hashs($paypassword) != $user['paypassword']) {					ajax('交易密码错误');				}			}			if ($user['tpwdsetting'] == 1) {				if (!session($user['id'] . 'tpwdsetting')) {					if (!check($paypassword, 'password')) {						ajax('交易格式错误');					}					if (hashs($paypassword) != $user['paypassword']) {						ajax('交易密码错误');					} else {						session($user['id'] . 'tpwdsetting', 1);					}				}			}		}		if ($user['google']) {			$arr = explode('|', $user['google']);			if ($arr[3]) {				$ga = md('user')->google();				if (!$ga->verifyCode($arr[0], $goole, 1)) {					ajax('谷歌验证失败');				}			}		}		$res = md('trade')->guadan($this->userid, $market, $price, $num, $type);		if (isset($res[1])) {			ajax($res[0], 1);		} else {			ajax($res[0]);		}	}	public function chexiao()	{		if (!$this->userid) {			ajax('请先登录');		}		$id = iv('post.id', 'd', '请选择要撤销的委托');		$trade = db::table('trade')->where(['id' => $id])->find();		if (!$trade) {			ajax('撤销委托参数错误');		}		if ($trade['userid'] != $this->userid) {			ajax('参数非法');		}		if ($trade['status'] != 0) {			ajax('当前订单不能撤销');		}		$res = md('trade')->chexiao($id);		if (isset($res[1])) {			ajax('撤销成功', 1);		} else {			ajax('撤销失败');		}	}	public function ordinary()	{		$market = iv('get.market', 'w_', '', 1);		$this->assign('market', $market);		$this->display();	}	public function ordinary_json()	{		$market = iv('get.market', 'w_', '', 1);		$time = iv('get.time', 'd', '', 1);		$timearr = [1, 3, 10, 15, 30, 60, 120, 240, 360, 720, 1440, 10080];		if (!in_array($time, $timearr)) {			$time = 5;		}		$tradeJson = db::table("trade_json")->where(["market" => $market, "type" => $time, "data#!=" => ""])->order("addtime desc")->limit(100)->select();		krsort($tradeJson);		$json_data = [];		foreach ($tradeJson as $k => $v) {			$json_data[] = json_decode($v['data'], true);		}		if ($json_data) {			ajax($json_data, 1);		} else {			ajax('行情信息查询失败');		}	}	public function depth_json()	{		$market = iv('get.market', 'w_', '', 1);		$type = iv('get.type', 'w_', '', 1);		if (!$type) $type = 'buy';		if (!$market) {			$market = md('sys_config')->get('mr_market');		}		if ($market) {			$mymz_trade = new \mymc\trade();			$depth_data = $mymz_trade->depth_data($market);			if ($type == 'buy') {				if (isset($depth_data['buy']) && $depth_data['buy']) {					$maxNums = $this->maxArrayKey($depth_data['buy'], 'nums') / 2;					$tmp = '';					foreach ($depth_data['buy'] as $k => $v) {						$or['title'] = '买' . ($k + 1);						$or['price'] = floatval($v['price']);						$or['nums'] = floatval($v['nums']);						$or['precent'] = (($v['nums'] > $maxNums) ? $maxNums : $v['nums']) / $maxNums * 100;						$tmp[] = $or;					}					$data[0] = $tmp;				} else {					$data[0] = [];				}				ajax($data[0], 1);			} else if ($type == 'sell') {				if (isset($depth_data['sell']) && $depth_data['sell']) {					$maxNums = $this->maxArrayKey($depth_data['sell'], 'nums') / 2;					$tmp = '';					foreach ($depth_data['sell'] as $k => $v) {						$or['title'] = '买' . ($k + 1);						$or['price'] = floatval($v['price']);						$or['nums'] = floatval($v['nums']);						$or['precent'] = (($v['nums'] > $maxNums) ? $maxNums : $v['nums']) / $maxNums * 100;						$tmp[] = $or;					}					$data[1] = $tmp;				} else {					$data[1] = [];				}				ajax($data[1], 1);			} else {				if (isset($depth_data['log']) && $depth_data['log']) {					$tmp = '';					foreach ($depth_data['log'] as $k => $v) {						if ($v['type'] == 1) {							$type = 'buy';						} else {							$type = 'sell';						}						$or['type'] = $type;						$or['addtime'] = date('H:i:s', $v['addtime']);						$or['price'] = floatval($v['price']);						$or['nums'] = floatval($v['num']);						$or['mum'] = floatval($v['mum']);						$tmp[] = $or;					}					$data[2] = $tmp;				} else {					$data[2] = [];				}				ajax($data[2], 1);			}		}		ajax('数据出错', 1);	}	protected function maxArrayKey($arr, $key)	{		$a = 0;		foreach ($arr as $k => $v) {			$a = max($v[$key], $a);		}		return $a;	}} 