<?phpnamespace app;use Move\db;class login extends home{	public function __construct()	{		parent::__construct();		$_GET['ajax'] = 1;	}	public function index()	{		echo "hi app login";	}	public function saoma()	{		$str = md5(parent::getRandCode(32));		mc("saoma_" . $str, -1);		header("Content-Type: text/html;charset=utf-8");		echo '<script type="text/javascript" src="/static/extend/jquery/jquery.min.js"></script><script src="/static/extend/jquery/jquery.qrcode.min.js"></script><script type="text/javascript">$(document).ready(function(){$("#saoma_login").qrcode({render: "table",size: 200,text: "' . $str . '"});window.setInterval("check_code()",1000);});function check_code(){$.get("/app/login/check_saoma/saoma_code/' . $str . '?t=" + Math.random(), function (data) {console.log(data);if(data.status){console.log(data.info);$("#saoma_ok").show();window.setTimeout("top.location.href=\'/\'",3000);}else{console.log("no found");}}, "json");}</script><div style="position: absolute;top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);-moz-transform: translate(-50%, -50%);-ms-transform: translate(-50%, -50%);-o-transform: translate(-50%, -50%);transform: translate(-50%, -50%);"><div id="saoma_ok"  style="background-color: #fefcee;position: absolute;top: 80px;left: 32px;z-index: 9999;height: 30px;line-height: 30px;padding: 5px;color: #9dca9d;display:none;">扫码登录成功,跳转中...</div><saon id="saoma_login"></saon></div>';	}	public function check_saoma()	{		$saoma_code = iv("saoma_code", 'wd', 'GET saoma_code is require');		if ($res = mc("saoma_" . $saoma_code) > 0) {			$saoma_userid = mc("saoma_" . $saoma_code);			db::table("user_log")->add(["userid" => $saoma_userid, "type" => "登录", "remark" => "APP扫码登录", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);			session('userid', $saoma_userid);			mc("saoma_" . $saoma_code, null);			ajax("扫码登录成功,跳转中..." . $res, 1);		} else {			ajax(null, 0);		}	}	public function saoma_auth()	{		$saoma_code = iv("post.saoma_code", 'wd', 'POST saoma_code is require');		$uid = $this->userid();		if (!$uid) {			ajax('请登录', -99);		}		if (session('userid') && !isset($_SERVER['HTTP_ID'])) {			ajax('扫码登录接口仅APP有效');		}		if (mc("saoma_" . $saoma_code) == -1) {			mc("saoma_" . $saoma_code, $uid);			ajax("扫码登录成功", 1);		}	}	public function submit()	{		$moble = iv("post.username", 'a', '账户格式错误');		$mobles = "+86";		$password = iv("post.password", 'password', '密码格式错误');		$users = db::table("user")->where(["username" => $moble])->find();		if (!$users) {			$users = db::table("user")->where(["email" => $moble])->find();			if (!$users) {				$users = db::table("user")->where(["moble" => $mobles . '|' . $moble])->find();				if (!$users) {					ajax('用户不存在');				} else {					if (db::table("user")->where(["moble" => $mobles . '|' . $moble])->count() > 1) {						ajax('您的手机号存在重复，禁止登录');					}					$remark = '通过手机号登录';				}			} else {				if (db::table("user")->where(["email" => $moble])->count() > 1) {					ajax('您的邮箱存在重复，禁止用户名登录');				}				$remark = '通过邮箱登录';			}		} else {			if (db::table("user")->where(["username" => $moble])->count() > 1) {				ajax('您的用户名存在重复，禁止用户名登录');			}			$remark = '通过用户名登录';		}		if ($users["status"] != 1) {			ajax('您的账户已禁止登录');		}		if ($users["password"] != hashs($password)) {			ajax('登录账户或密码错误');		}		$user_coin = db::table('user_coin')->where(['userid' => $users["id"]])->find();		if (!$user_coin) {			if (!db::table('user_coin')->add(['userid' => $users["id"]])) {				ajax('账户财产出现异常');			}		}		$user_wallet = db::table('user_wallet')->where(['userid' => $users["id"]])->find();		if (!$user_wallet) {			if (!db::table('user_wallet')->add(['userid' => $users["id"]])) {				ajax('账户钱包出现异常');			}		}		$addip = get_ip();		$addr = get_city();		if (isset($users['yidi']) && $users['yidi'] == 1) {			$user_login_log = db::table('user_log')->where(['type' => '登录'])->order('id desc')->find();			if ($user_login_log) {				if ($user_login_log['addip'] != $addip) {					session('userid_yidi', 1);				}			}		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$rs[] = db::table("user")->where(["id" => $users["id"]])->save(["logins" => ($users["logins"] + 1)]);		$rs[] = db::table("user_log")->add(["userid" => $users["id"], "type" => "登录", "remark" => $remark, "addip" => $addip, "addr" => $addr, "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			session('userid', $users["id"]);			session('home_login_username', null);			cookie("moble", $moble);			cookie("move_moble", $moble);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax('登录失败');		}		$check_time = 10;		$check_times = 5;		$username_msg = md5($moble);		$mc_key_times = md5('LOGIN_ERR_TIMES_' . $username_msg);		$mc_key_time = md5('LOGIN_ERR_TIME_' . $username_msg);		$ltimes = (int)mc($mc_key_times);		if ($ltimes >= $check_times) {			$ltime = mc($mc_key_time);			$ltime = time() - $ltime;			if ($ltime >= $check_time) {				mc($mc_key_times, 0);			} else {				$min = $check_time - $ltime;				ajax("错误次数过多,请" . $min . ' s后尝试');			}		}		if ($users) {			$user = db::table("user")->where(["id" => $users['id']])->find();			if (!($token = $user['token'])) {				$token = md5(md5(rand(0, 10000) . md5(time()), md5(uniqid())));				db::table("user")->where(["id" => $user['id']])->save(["token" => $token]);			}			db::exec("commit");			$user = db::table("user")->where(["id" => $user['id']])->find();			if (!$user['token']) {				ajax("生成 token失败!#" . $token);			}			mc(md5('APP_AUTH_ID_' . $user['id']), $token);			$status = 1;			if (!$user['paypassword']) {				$status = -97;			}			if ($user['paypassword'] && !$user['truename']) {			}			ajax(["ID" => $user['id'], "TOKEN" => $token, "msg" => ""], $status);		} else {			mc($mc_key_times, ++$ltimes);			mc($mc_key_time, time());			ajax('登录异常');		}	}	public function loginout()	{		$uid = $this->userid();		db::table("user")->where(['id' => $uid])->save(['token' => ""]);		mc(md5('APP_AUTH_ID_' . $uid), null);		session(null);		ajax('退出成功', 1);	}	public function reg_up()	{		$moble = iv('post.moble', 'moble', '手机号码格式错误');		$mobles = "+86";		$moble_verify = iv("post.moble_verify", 'dw', '验证码格式错误');		$password = iv("post.password", 'password', '密码格式错误');		$invit = iv("post.invit", 'dw', '推荐码格式错误', 1);		$_moble_code = mc("RegMoble_" . hashs($moble));		if (!$moble_verify || $moble_verify != $_moble_code) {			ajax('验证码错误');		}		if (!$this->config['reg_close']) {			ajax('系统禁止注册');		}		if (!$invit) {			$invit = session('invit');		}		if (!$invit) {			if (isset($this->config['invit_bx']) && $this->config['invit_bx'] == 1) {				ajax('推荐码必须填写');			}		}		if ($invit) {			if (!db::table("user")->where(["invit" => $invit])->find()) {				ajax('推荐码错误');			}		}		$moble = $mobles . '|' . $moble;		$res = md('user')->reg($moble, $password, $invit);		if (isset($res['1'])) {			ajax("注册成功", 1);		} else {			ajax($res['0']);		}	}	public function paypassword_up()	{		$username = iv("post.username", 'username', '用户名格式错误');		$email = iv("post.email", 'email', '邮箱格式错误');		$paypassword = iv("post.paypassword", 'password', '交易密码格式错误');		$userid_arr = parent::userid(1);		$userid = isset($userid_arr['0']) ? $userid_arr['0'] : $userid_arr;		if (!$userid) {			$str = "HTTP_ID=" . $_SERVER['HTTP_ID'] . "|HTTP_TOKEN=" . $_SERVER['HTTP_TOKEN'];			ajax('非法访问|' . $str);		}		$users = db::table('user')->where(['id' => $userid])->find();		if (!$users) {			ajax('用户不存在');		}		if ($users['paypassword'] || $users['username']) {			ajax('交易密码已经设置');		}		show(md('user')->reg_paypassword2($userid, $username, $paypassword));	}	public function truename_up()	{		$idcardtypeMap = ["1" => "身份证", "2" => "军官证", "3" => "护照", "4" => "台湾居民通行证", "5" => "港澳居民通行证", "9" => "其他",];		$idcardtype = iv("post.idcardtype", 'd', '证件类型格式错误');		$truename = iv("post.truename", 'truename', '真实姓名格式错误');		$idcard = iv("post.idcard", 'dw', '证件号码格式错误');		if (!isset($idcardtypeMap[$idcardtype])) {			ajax('证件类型错误');		}		$idcardtype = $idcardtypeMap[$idcardtype];		$userid_arr = parent::userid(1);		$users_id = isset($userid_arr['0']) ? $userid_arr['0'] : $userid_arr;		if (!$users_id) {			ajax('非法访问');		}		$users = db::table('user')->where(['id' => $users_id])->find();		if (!$users) {			ajax('用户不存在');		}		if ($users['truename']) {			ajax('真实姓名已经设置');		}		if (isset($this->config['trade_sh']) && $this->config['trade_sh'] == 1) {			db::table('user')->where(['id' => $users_id])->save(['trade_sh' => 1]);		}		if ($idcardtype == "身份证") {			$year = substr($idcard, 6, 4);			$year = intval($year);			if (date("Y") < $year || $year < "1900") {				ajax("身份证错误2");			}			$month = intval(substr($idcard, 10, 2));			$month = intval($month);			if ("12" < $month || $month = "0") {				ajax("身份证错误3");			}			$day = substr($idcard, 12, 2);			$day = intval($day);			if ("31" < $day || $day = "0") {				ajax("身份证错误4");			}			$idcard_base = substr($idcard, 0, 17);			$verify_code = substr($idcard, 17, 1);			$factor = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);			$verify_code_list = array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');			$total = 0;			for ($i = 0; $i < 17; $i++) {				$total += substr($idcard_base, $i, 1) * $factor[$i];			}			$mod = $total % 11;			if ($verify_code != $verify_code_list[$mod]) {				ajax("身份证错误");			}		}		$res = md('user')->truename_upII($users_id, $truename, $idcardtype, $idcard);		if (isset($res[1])) {			session("userid", $users_id);		}		show($res);	}	public function findpwd()	{	}	public function findpaypwd()	{	}	public function check_reg($username, $mobile, $password, $verify, $invit)	{	}	public function reg($username, $mobile, $password, $invit, $truename, $idcard, $paypassword, $reg_code)	{	}	public function xieyi()	{		$xieyi = $this->config['web_reg'];		ajax($xieyi, 1);	}	public function sendMoble()	{		parent::checkVerify();		$platform = iv('platform');		$moble = iv('moble', 'moble', '手机号码格式错误');		$mobles = "+86";		$af_moble = $moble;		$moble = $mobles . '|' . $moble;		$res = md('user')->cha_moble($moble);		if (isset($res[1])) {			ajax('手机号码已存在');		}		$code = rand(111111, 999999);		mc("RegMoble_" . hashs($af_moble), $code);		if (defined('MS_SMS') && MS_SMS) {			ajax('验证码已发送:' . $code, 1);		} else {			$sms = new \ext\sms();			$rs = $sms->send($moble, $code, "sms", 'reg');			if (isset($rs[1])) {				ajax("验证码已发送", 1);			} else {				ajax($rs[0]);			}		}	}	public function fetch_psd_send_sms()	{		parent::checkVerify();		$platform = iv('platform');		$moble = iv('moble', 'moble', '手机号码格式错误');		$mobles = "+86";		$af_moble = $moble;		$moble = $mobles . '|' . $moble;		$code = rand(111111, 999999);		mc("RegMoble_" . hashs($af_moble), $code);		if (defined('MS_SMS') && (MS_SMS == 1)) {			ajax($code, 1);		}		$sms = new \ext\sms();		$rs = $sms->send($moble, $code, "sms", 'reg');		if (isset($rs[1])) {			ajax("验证码已发送", 1);		} else {			ajax($rs[0]);		}	}	public function fetch_psd_up()	{		$moble = iv('post.moble', 'moble', '手机号码格式错误');		$mobles = "+86|";		$moble_verify = iv("post.moble_verify", 'dw', '验证码格式错误');		$password = iv("post.password", 'password', '密码格式错误');		$_moble_code = mc("RegMoble_" . hashs($moble));		if (!$moble_verify || $moble_verify != $_moble_code) {			ajax('验证码错误');		}		$user = db::table("user")->where(["moble" => $mobles . $moble])->find();		if (!$user) {			ajax('手机号不存在');		}		$hashpsd = md5(md5($password) . "MOVESAY");		if ($hashpsd == $user['paypassword']) {			ajax("新的登录密码不能和交易密码相同");		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write, #pre#user_log write");		$rs[] = db::table("user")->where(["id" => $user['id']])->set(["password" => $hashpsd]);		$rs[] = db::table("user_log")->add(["userid" => $user['id'], "type" => "找回", "remark" => "找回登录密码", "addip" => $this->get_ip(), "addr" => "未知位置", "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			ajax('密码重置成功', 1);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax('重置失败');		}	}	function get_ip()	{		static $realip;		if (isset($_SERVER)) {			if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) {				$realip = $_SERVER["HTTP_X_FORWARDED_FOR"];			} else if (isset($_SERVER["HTTP_CLIENT_IP"])) {				$realip = $_SERVER["HTTP_CLIENT_IP"];			} else {				$realip = $_SERVER["REMOTE_ADDR"];			}		} else {			if (getenv("HTTP_X_FORWARDED_FOR")) {				$realip = getenv("HTTP_X_FORWARDED_FOR");			} else if (getenv("HTTP_CLIENT_IP")) {				$realip = getenv("HTTP_CLIENT_IP");			} else {				$realip = getenv("REMOTE_ADDR");			}		}		return $realip;	}	function getCity($ip = '')	{		if ($ip == '') {			$url = "http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json";			$ip = json_decode(file_get_contents($url), true);			$data = $ip;		} else {			$url = "http://ip.taobao.com/service/getIpInfo.php?ip=" . $ip;			$ip = json_decode(file_get_contents($url));			if ((string)$ip->code == '1') {				return false;			}			$data = (array)$ip->data;		}		return $data;	}} 