<?phpnamespace api;use Move\db;class trade extends api{	public function index()	{		echo "hi api art!";	}	public function all()	{		$data = MS_DEBUG ? null : mc('api_trade_all');		if (!$data) {			$trade_market_list = db::table("trade_market")->where(["status" => 1])->select();			if (!$trade_market_list) {				$data = [];			} else {				foreach ($trade_market_list as $k => $v) {					$data[$v['name']]['new_price'] = $v['new_price'];					$data[$v['name']]['buy_price'] = $v['buy_price'];					$data[$v['name']]['sell_price'] = $v['sell_price'];					$data[$v['name']]['min_price'] = $v['min_price'];					$data[$v['name']]['max_price'] = $v['max_price'];					$data[$v['name']]['amount'] = $v['volume'];				}			}			mc('api_trade_all', $data, 10);		}		exit(json_encode($data));	}	public function ticker()	{		$market = iv('get.market');		if (!check($market, 'w_')) {			exit(json_encode(['err' => '市场名称格式错误']));		}		$data = MS_DEBUG ? null : mc('api_trade_ticker' . $market);		if (!$data) {			$trade_market = db::table("trade_market")->where(["name" => $market])->find();			if (!$trade_market) {				exit(json_encode(['err' => '市场不存在']));			}			$data['time'] = time();			$data['new_price'] = $trade_market['new_price'];			$data['buy_price'] = $trade_market['buy_price'];			$data['sell_price'] = $trade_market['sell_price'];			$data['min_price'] = $trade_market['min_price'];			$data['max_price'] = $trade_market['max_price'];			$data['amount'] = $trade_market['volume'];			mc('api_trade_ticker' . $market, $data, 10);		}		exit(json_encode($data));	}	public function depth()	{		$market = iv('get.market');		if (!check($market, 'w_')) {			exit(json_encode(['err' => '市场名称格式错误']));		}		$data = MS_DEBUG ? null : mc('api_trade_depth' . $market);		if (!$data) {			$buy = md('trade')->buy_list($market, 100);			$sell = array_reverse(md('trade')->sell_list($market, 100));			$data = [];			if ($buy) {				foreach ($buy as $k => $v) {					$data['buy'][$k]['id'] = $v['id'];					$data['buy'][$k]['price'] = $v['price'];					$data['buy'][$k]['amount'] = $v['nums'];				}			} else {				$data['buy'] = [];			}			if ($sell) {				foreach ($sell as $k => $v) {					$data['sell'][$k]['id'] = $v['id'];					$data['sell'][$k]['price'] = $v['price'];					$data['sell'][$k]['amount'] = $v['nums'];				}			} else {				$data['sell'] = [];			}			mc('api_trade_depth' . $market, $data, 10);		}		exit(json_encode($data));	}	public function trades()	{		$market = iv('get.market');		if (!check($market, 'w_')) {			exit(json_encode(['err' => '市场名称格式错误']));		}		$data = MS_DEBUG ? null : mc('api_trade_trades' . $market);		if (!$data) {			$trade_log = md('trade')->log_list($market, 100);			if ($trade_log) {				foreach ($trade_log as $k => $v) {					$data[$k]['date'] = $v['addtime'];					$data[$k]['price'] = $v['price'];					$data[$k]['amount'] = $v['num'];					$data[$k]['tid'] = $v['id'];					$data[$k]['type'] = ($v['type'] == 1) ? 'buy' : 'sell';				}				mc('api_trade_trades' . $market, $data, 10);			}		}		exit(json_encode($data));	}	public function balance()	{		$key = iv('post.key');		$nonce = iv('post.nonce');		$signature = iv('post.signature');		if (!check($key, 'dw')) {			exit(json_encode(['err' => $key . 'key err']));		}		if (!check($nonce, 'd')) {			exit(json_encode(['err' => 'nonce err']));		}		if (!check($signature, 'dw')) {			exit(json_encode(['err' => 'signature err']));		}		$api = db::table('api')->where(['key' => $key])->find();		if (!$api) {			exit(json_encode(['err' => 'The key does not exist or does not match']));		}		if ($api['status'] != 1) {			exit(json_encode(['err' => 'Key has been forbidden or not audited']));		}		if ($signature != md5($key . '&' . $api['userid'] . '&' . $nonce . '&' . $api['secret_key'])) {			exit(json_encode(['err' => 'Signature does not match']));		}		$user = db::table('user')->where(['id' => $api['userid']])->find();		if (!$user || $user['status'] != 1) {			exit(json_encode(['err' => 'The user does not exist or has been disabled']));		}		$user_coin = db::table('user_coin')->where(['userid' => $api['userid']])->find();		if (!$user_coin) {			exit(json_encode(['err' => 'Asset exception']));		}		unset($user_coin['id']);		exit(json_encode(['succ' => $user_coin]));	}	public function submit_order()	{		$key = iv('post.key');		$nonce = iv('post.nonce');		$signature = iv('post.signature');		$type = iv('post.type');		$market = iv('post.market');		$price = iv('post.price');		$amount = iv('post.amount');		if (!check($key, 'dw')) {			exit(json_encode(['err' => 'key err']));		}		if (!check($nonce, 'd')) {			exit(json_encode(['err' => 'nonce err']));		}		if (!check($signature, 'dw')) {			exit(json_encode(['err' => 'signature err']));		}		if ($type != 1 && $type != 2) {			exit(json_encode(['err' => 'type err']));		}		if (!check($market, 'w_')) {			exit(json_encode(['err' => 'market err']));		}		if (!check($price, 'double')) {			exit(json_encode(['err' => 'price err']));		}		if (!check($amount, 'double')) {			exit(json_encode(['err' => 'amount err']));		}		$api = db::table('api')->where(['key' => $key])->find();		if (!$api) {			exit(json_encode(['err' => 'The key does not exist or does not match']));		}		if ($api['status'] != 1) {			exit(json_encode(['err' => 'Key has been forbidden or not audited']));		}		if ($signature != md5($key . '&' . $api['userid'] . '&' . $nonce . '&' . $api['secret_key'])) {			exit(json_encode(['err' => 'Signature does not match']));		}		$user = db::table('user')->where(['id' => $api['userid']])->find();		if (!$user || $user['status'] != 1) {			exit(json_encode(['err' => 'The user does not exist or has been disabled']));		}		$user_coin = db::table('user_coin')->where(['userid' => $api['userid']])->find();		if (!$user_coin) {			exit(json_encode(['err' => 'Asset exception']));		}		if (isset($user['trade_sh']) && $user['trade_sh'] == 1) {			exit(json_encode(['err' => '您的账户没有通过审核暂时不能交易']));		}		$res = md('trade')->guadan($api['userid'], $market, $price, $amount, $type);		if (isset($res[1])) {			mc('mymc_trade_buy_list' . $market . '10', null);			mc('mymc_trade_sell_list' . $market . '10', null);			mc('mymc_trade_buy_list' . $market . '20', null);			mc('mymc_trade_sell_list' . $market . '20', null);			$trade_id = db::table('trade')->where(['market' => $market, 'userid' => $api['userid'], 'type' => $type])->order('id desc')->find('id');			exit(json_encode(['succ' => $trade_id]));		} else {			exit(json_encode(['err' => $res[0]]));		}	}	public function cancel_order()	{		$key = iv('post.key');		$nonce = iv('post.nonce');		$signature = iv('post.signature');		$order_id = iv('post.order_id');		if (!check($key, 'dw')) {			exit(json_encode(['err' => 'key格式错误(只能字母和数字)']));		}		if (!check($nonce, 'd')) {			exit(json_encode(['err' => 'nonce格式错误(只能数字)']));		}		if (!check($signature, 'dw')) {			exit(json_encode(['err' => 'signature格式错误(只能字母和数字)']));		}		if (!check($order_id, 'd')) {			exit(json_encode(['err' => 'order_id格式错误(只能数字)']));		}		$api = db::table('api')->where(['key' => $key])->find();		if (!$api) {			exit(json_encode(['err' => '密钥不存在或不匹配']));		}		if ($api['status'] != 1) {			exit(json_encode(['err' => 'key已禁止或未审核']));		}		if ($signature != md5($key . '&' . $api['userid'] . '&' . $nonce . '&' . $api['secret_key'])) {			exit(json_encode(['err' => '签名不匹配']));		}		$user = db::table('user')->where(['id' => $api['userid']])->find();		if (!$user || $user['status'] != 1) {			exit(json_encode(['err' => '用户不存在或已禁止']));		}		$user_coin = db::table('user_coin')->where(['userid' => $api['userid']])->find();		if (!$user_coin) {			exit(json_encode(['err' => '资产异常']));		}		$trade = db::table('trade')->where(['id' => $order_id])->find();		if (!$trade) {			exit(json_encode(['err' => '订单不存在']));		}		if ($trade['userid'] != $api['userid']) {			exit(json_encode(['err' => '订单非法']));		}		if ($trade['status'] != 0) {			exit(json_encode(['err' => '当前订单不能撤销']));		}		$res = md('trade')->chexiao($order_id);		if (isset($res[1])) {			mc('mymc_trade_buy_list' . $trade['market'], null);			mc('mymc_trade_sell_list' . $trade['market'], null);			exit(json_encode(['succ' => 'ok']));		} else {			exit(json_encode(['err' => $res[0]]));		}	}	public function list_order()	{		$key = iv('post.key');		$nonce = iv('post.nonce');		$signature = iv('post.signature');		$market = iv('post.market');		$page = iv('post.page');		if (!check($key, 'dw')) {			exit(json_encode(['err' => 'key格式错误(只能字母和数字)']));		}		if (!check($nonce, 'd')) {			exit(json_encode(['err' => 'nonce格式错误(只能数字)']));		}		if (!check($signature, 'dw')) {			exit(json_encode(['err' => 'signature格式错误(只能字母和数字)']));		}		if ($market) {			if (!check($market, 'w_')) {				exit(json_encode(['err' => 'market格式错误(例如btc_cny格式)']));			}		}		if ($page) {			if (!check($page, 'd')) {				exit(json_encode(['err' => 'page格式错误(只能数字)']));			}		} else {			$page = 0;		}		$api = db::table('api')->where(['key' => $key])->find();		if (!$api) {			exit(json_encode(['err' => '密钥不存在或不匹配']));		}		if ($api['status'] != 1) {			exit(json_encode(['err' => 'key已禁止或未审核']));		}		if ($signature != md5($key . '&' . $api['userid'] . '&' . $nonce . '&' . $api['secret_key'])) {			exit(json_encode(['err' => '签名不匹配']));		}		$user = db::table('user')->where(['id' => $api['userid']])->find();		if (!$user || $user['status'] != 1) {			exit(json_encode(['err' => '用户不存在或已禁止']));		}		$user_coin = db::table('user_coin')->where(['userid' => $api['userid']])->find();		if (!$user_coin) {			exit(json_encode(['err' => '资产异常']));		}		if ($market) {			$trade = db::table("trade")->where(["market" => $market, 'status' => 0, "userid" => $api['userid']])->order("`id` DESC")->select();		} else {			$trade = db::table("trade")->where(["userid" => $api['userid'], 'status' => 0])->order("`id` DESC")->select();		}		$data = [];		if ($trade) {			foreach ($trade as $k => $v) {				$data[$k]['id'] = $v['id'];				$data[$k]['time'] = $v['addtime'];				$data[$k]['price'] = $v['price'];				$data[$k]['amount'] = $v['num'];				$data[$k]['deal'] = $v['deal'];				$data[$k]['type'] = ($v['type'] == 1) ? 'buy' : 'sell';				$data[$k]['status'] = $v['status'];				$data[$k]['market'] = $v['market'];			}			exit(json_encode(['succ' => $data]));		} else {			exit(json_encode(['err' => '没有记录']));		}	}	public function list_trade()	{		$key = iv('post.key');		$nonce = iv('post.nonce');		$signature = iv('post.signature');		$market = iv('post.market');		$page = iv('post.page');		if (!check($key, 'dw')) {			exit(json_encode(['err' => 'key格式错误(只能字母和数字)']));		}		if (!check($nonce, 'd')) {			exit(json_encode(['err' => 'nonce格式错误(只能数字)']));		}		if (!check($signature, 'dw')) {			exit(json_encode(['err' => 'signature格式错误(只能字母和数字)']));		}		if ($market) {			if (!check($market, 'w_')) {				exit(json_encode(['err' => 'market格式错误(例如btc_cny格式)']));			}		}		if ($page) {			if (!check($page, 'd')) {				exit(json_encode(['err' => 'page格式错误(只能数字)']));			}		} else {			$page = 0;		}		$api = db::table('api')->where(['key' => $key])->find();		if (!$api) {			exit(json_encode(['err' => '密钥不存在或不匹配']));		}		if ($api['status'] != 1) {			exit(json_encode(['err' => 'key已禁止或未审核']));		}		if ($signature != md5($key . '&' . $api['userid'] . '&' . $nonce . '&' . $api['secret_key'])) {			exit(json_encode(['err' => '签名不匹配']));		}		$user = db::table('user')->where(['id' => $api['userid']])->find();		if (!$user || $user['status'] != 1) {			exit(json_encode(['err' => '用户不存在或已禁止']));		}		$user_coin = db::table('user_coin')->where(['userid' => $api['userid']])->find();		if (!$user_coin) {			exit(json_encode(['err' => '资产异常']));		}		if ($market) {			$trade = db::table("trade_log")->where(["market" => $market, "userid|peerid" => $api['userid']])->order("`id` DESC")->limit($page, 30)->select();		} else {			$trade = db::table("trade_log")->where(["userid|peerid" => $api['userid']])->order("`id` DESC")->limit($page, 30)->select();		}		if ($trade) {			foreach ($trade as $k => $v) {				$data[$k]['id'] = $v['id'];				$data[$k]['time'] = $v['addtime'];				$data[$k]['price'] = $v['price'];				$data[$k]['amount'] = $v['num'];				$data[$k]['deal'] = $v['deal'];				$data[$k]['type'] = ($v['type'] == 1) ? 'buy' : 'sell';				$data[$k]['status'] = $v['status'];				$data[$k]['market'] = $v['market'];			}			exit(json_encode(['succ' => $data]));		} else {			exit(json_encode(['err' => '没有记录']));		}	}	public function coinout()	{		$id = iv("post.id", "d", "参数错误1");		$api_code = iv("post.api_code", "dw", "参数错误2");		$coin_outlog = db::table("coin_out")->where(["id" => $id])->find();		if (!$coin_outlog) {			ajax("该转出不存在");		}		if ($api_code != API_CODE) {			ajax("非法请求");		}		$trade_market = db::table("trade_market")->where(["name" => $coin_outlog['coinname'] . "_cny"])->find();		if ($trade_market) {			$coin_outlog["new_price"] = $trade_market["new_price"];		}		$res["data"] = $coin_outlog;		$res["status"] = 1;		exit(json_encode($res));	}	public function new_market()	{		$market = iv("post.market", "w_", "参数错误1");		$api_code = iv("post.api_code", "dw", "参数错误2");		$res["trade_market"] = db::table("trade_market")->where(["name" => $market])->find();		if ($api_code != API_CODE) {			ajax("非法请求");		}		if (!$res["trade_market"]) {			ajax("市场不存在");		}		$res["status"] = 1;		exit(json_encode($res));	}} 