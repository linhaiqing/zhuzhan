<?phpnamespace model;use Move\db;use Move\ext\page;class trade extends common{	public function invit_queue()	{		$str_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));		$trade_log_arr = db::table('trade_log')->where(['invit' => 0, 'addtime#>' => $str_time])->limit(100)->select();		if (empty($trade_log_arr)) {			return ['暂无项目'];		}		if ($trade_log_arr) {			foreach ($trade_log_arr as $k => $v) {				$this->invit_jisuan($v['id']);			}		}		return ['计算完成'];	}	public function invit_jisuan($tradeid = null)	{		if (!check($tradeid, 'd')) {			return ['参数个数错误'];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user read ,#pre#trade_market read ,#pre#trade_log write ,#pre#user_coin write,#pre#user_invit write");		$trade_log = db::table('trade_log')->where(['id' => $tradeid])->find();		if (!$trade_log) {			db::exec("rollback");			db::exec("unlock tables");			return ['订单不存在'];		}		if (isset($trade_log['invit']) && $trade_log['invit']) {			db::exec("rollback");			db::exec("unlock tables");			return ['订单已经赠送'];		}		$trade_market = db::table('trade_market')->where(['name' => $trade_log['market']])->find();		if (!$trade_market) {			db::exec("rollback");			db::exec("unlock tables");			return ['市场不存在'];		}		$user_buy = db::table('user')->where(['id' => $trade_log['userid']])->find();		if (!$user_buy) {			db::exec("rollback");			db::exec("unlock tables");			return ['买家错误'];		}		$user_sell = db::table('user')->where(['id' => $trade_log['peerid']])->find();		if (!$user_sell) {			db::exec("rollback");			db::exec("unlock tables");			return ['卖家错误'];		}		$invit_buy_0 = 0;		$invit_buy_1 = 0;		$invit_buy_2 = 0;		$invit_buy_3 = 0;		$invit_sell_0 = 0;		$invit_sell_1 = 0;		$invit_sell_2 = 0;		$invit_sell_3 = 0;		if ($trade_log['fee_buy'] > 0) {			if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin']) {				if ($trade_market['invit_buy_0'] > 0) {					$invit_buy_0 = num(($trade_log['fee_buy'] / 100 * $trade_market['invit_buy_0']), 8);				}				if ($trade_market['invit_buy_1'] > 0) {					$invit_buy_1 = num(($trade_log['fee_buy'] / 100 * $trade_market['invit_buy_1']), 8);				}				if ($trade_market['invit_buy_2'] > 0) {					$invit_buy_2 = num(($trade_log['fee_buy'] / 100 * $trade_market['invit_buy_2']), 8);				}				if ($trade_market['invit_buy_3'] > 0) {					$invit_buy_3 = num(($trade_log['fee_buy'] / 100 * $trade_market['invit_buy_3']), 8);				}			}		}		if ($trade_log['fee_sell'] > 0) {			if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin']) {				if ($trade_market['invit_sell_0'] > 0) {					$invit_sell_0 = num(($trade_log['fee_sell'] / 100 * $trade_market['invit_sell_0']), 8);				}				if ($trade_market['invit_sell_1'] > 0) {					$invit_sell_1 = num(($trade_log['fee_sell'] / 100 * $trade_market['invit_sell_1']), 8);				}				if ($trade_market['invit_sell_2'] > 0) {					$invit_sell_2 = num(($trade_log['fee_sell'] / 100 * $trade_market['invit_sell_2']), 8);				}				if ($trade_market['invit_sell_3'] > 0) {					$invit_sell_3 = num(($trade_log['fee_sell'] / 100 * $trade_market['invit_sell_3']), 8);				}			}		}		$rs[] = db::table("trade_log")->where(["id" => $tradeid])->set(["invit" => 1]);		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['id'] && $invit_buy_0 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['id']])->setInc($trade_market['invit_buy_coin'], $invit_buy_0);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['id'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入赠送自己", "type" => "交易赠送", "num" => $trade_log['fee_buy'], "fee" => $invit_buy_0, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_1'] && $invit_buy_1 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_1']])->setInc($trade_market['invit_buy_coin'], $invit_buy_1);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_1'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入一代赠送", "type" => "交易赠送", "num" => $trade_log['fee_buy'], "fee" => $invit_buy_1, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_2'] && $invit_buy_2 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_2']])->setInc($trade_market['invit_buy_coin'], $invit_buy_2);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_2'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入二代赠送", "type" => "交易赠送", "num" => $trade_log['fee_buy'], "fee" => $invit_buy_2, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_3'] && $invit_buy_3 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_3']])->setInc($trade_market['invit_buy_coin'], $invit_buy_3);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_3'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入三代赠送", "type" => "交易赠送", "num" => $trade_log['fee_buy'], "fee" => $invit_buy_3, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['id'] && $invit_sell_0 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['id']])->setInc($trade_market['invit_sell_coin'], $invit_sell_0);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['id'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出赠送自己", "type" => "交易赠送", "num" => $trade_log['fee_sell'], "fee" => $invit_sell_0, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_1'] && $invit_sell_1 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_1']])->setInc($trade_market['invit_sell_coin'], $invit_sell_1);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_1'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出一代赠送", "type" => "交易赠送", "num" => $trade_log['fee_sell'], "fee" => $invit_sell_1, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_2'] && $invit_sell_2 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_2']])->setInc($trade_market['invit_sell_coin'], $invit_sell_2);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_2'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出二代赠送", "type" => "交易赠送", "num" => $trade_log['fee_sell'], "fee" => $invit_sell_2, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_3'] && $invit_sell_3 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_3']])->setInc($trade_market['invit_sell_coin'], $invit_sell_3);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_3'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出三代赠送", "type" => "交易赠送", "num" => $trade_log['fee_sell'], "fee" => $invit_sell_3, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["计算成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["计算失败" . implode("|", $rs)];		}	}	public function invit_queue_new()	{		$str_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));		$trade_log_arr = db::table('trade_log')->where(['invit' => 0, 'addtime#>' => $str_time])->limit(100)->select();		if (empty($trade_log_arr)) {			return ['暂无项目'];		}		if ($trade_log_arr) {			foreach ($trade_log_arr as $k => $v) {				$this->invit_jisuan($v['id']);			}		}		return ['计算完成'];	}	public function invit_jisuan_new($tradeid = null)	{		if (!check($tradeid, 'd')) {			return ['参数个数错误'];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user read ,#pre#trade_market read ,#pre#trade_log write ,#pre#user_coin write,#pre#user_invit write");		$trade_log = db::table('trade_log')->where(['id' => $tradeid])->find();		if (!$trade_log) {			db::exec("rollback");			db::exec("unlock tables");			return ['订单不存在'];		}		if (isset($trade_log['invit']) && $trade_log['invit']) {			db::exec("rollback");			db::exec("unlock tables");			return ['订单已经赠送'];		}		$trade_market = db::table('trade_market')->where(['name' => $trade_log['market']])->find();		if (!$trade_market) {			db::exec("rollback");			db::exec("unlock tables");			return ['市场不存在'];		}		$user_buy = db::table('user')->where(['id' => $trade_log['userid']])->find();		if (!$user_buy) {			db::exec("rollback");			db::exec("unlock tables");			return ['买家错误'];		}		$user_sell = db::table('user')->where(['id' => $trade_log['peerid']])->find();		if (!$user_sell) {			db::exec("rollback");			db::exec("unlock tables");			return ['卖家错误'];		}		$invit_buy_0 = 0;		$invit_buy_1 = 0;		$invit_buy_2 = 0;		$invit_buy_3 = 0;		$invit_sell_0 = 0;		$invit_sell_1 = 0;		$invit_sell_2 = 0;		$invit_sell_3 = 0;		$num_buy = 0;		$num_sell = 0;		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin']) {			if ($trade_market['invit_buy_coin'] == "cny") {				$num_buy = $trade_log['mum'];			} else {				$num_buy = $trade_log['num'];			}			if ($trade_market['invit_buy_0'] > 0) {				if ($trade_market['invit_buy_coin'] == "cny") {					$invit_buy_0 = num(($trade_log['mum'] / 100 * $trade_market['invit_buy_0']), 8);				} else {					$invit_buy_0 = num(($trade_log['num'] / 100 * $trade_market['invit_buy_0']), 8);				}			}			if ($trade_market['invit_buy_1'] > 0) {				if ($trade_market['invit_buy_coin'] == "cny") {					$invit_buy_1 = num(($trade_log['mum'] / 100 * $trade_market['invit_buy_1']), 8);				} else {					$invit_buy_1 = num(($trade_log['num'] / 100 * $trade_market['invit_buy_1']), 8);				}			}			if ($trade_market['invit_buy_2'] > 0) {				if ($trade_market['invit_buy_coin'] == "cny") {					$invit_buy_2 = num(($trade_log['mum'] / 100 * $trade_market['invit_buy_2']), 8);				} else {					$invit_buy_2 = num(($trade_log['num'] / 100 * $trade_market['invit_buy_2']), 8);				}			}			if ($trade_market['invit_buy_3'] > 0) {				if ($trade_market['invit_buy_coin'] == "cny") {					$invit_buy_3 = num(($trade_log['mum'] / 100 * $trade_market['invit_buy_3']), 8);				} else {					$invit_buy_3 = num(($trade_log['num'] / 100 * $trade_market['invit_buy_3']), 8);				}			}		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin']) {			if ($trade_market['invit_sell_coin'] == "cny") {				$num_sell = $trade_log['mum'];			} else {				$num_sell = $trade_log['num'];			}			if ($trade_market['invit_sell_0'] > 0) {				if ($trade_market['invit_sell_coin'] == "cny") {					$invit_sell_0 = num(($trade_log['mum'] / 100 * $trade_market['invit_sell_0']), 8);				} else {					$invit_sell_0 = num(($trade_log['num'] / 100 * $trade_market['invit_sell_0']), 8);				}			}			if ($trade_market['invit_sell_1'] > 0) {				if ($trade_market['invit_sell_coin'] == "cny") {					$invit_sell_1 = num(($trade_log['mum'] / 100 * $trade_market['invit_sell_1']), 8);				} else {					$invit_sell_1 = num(($trade_log['num'] / 100 * $trade_market['invit_sell_1']), 8);				}			}			if ($trade_market['invit_sell_2'] > 0) {				if ($trade_market['invit_sell_coin'] == "cny") {					$invit_sell_2 = num(($trade_log['mum'] / 100 * $trade_market['invit_sell_2']), 8);				} else {					$invit_sell_2 = num(($trade_log['num'] / 100 * $trade_market['invit_sell_2']), 8);				}			}			if ($trade_market['invit_sell_3'] > 0) {				if ($trade_market['invit_sell_coin'] == "cny") {					$invit_sell_3 = num(($trade_log['mum'] / 100 * $trade_market['invit_sell_3']), 8);				} else {					$invit_sell_3 = num(($trade_log['num'] / 100 * $trade_market['invit_sell_3']), 8);				}			}		}		$rs[] = db::table("trade_log")->where(["id" => $tradeid])->set(["invit" => 1]);		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['id'] && $invit_buy_0 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['id']])->setInc($trade_market['invit_buy_coin'], $invit_buy_0);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['id'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入赠送自己", "type" => "交易赠送", "num" => $num_buy, "fee" => $invit_buy_0, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_1'] && $invit_buy_1 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_1']])->setInc($trade_market['invit_buy_coin'], $invit_buy_1);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_1'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入一代赠送", "type" => "交易赠送", "num" => $num_buy, "fee" => $invit_buy_1, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_2'] && $invit_buy_2 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_2']])->setInc($trade_market['invit_buy_coin'], $invit_buy_2);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_2'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入二代赠送", "type" => "交易赠送", "num" => $num_buy, "fee" => $invit_buy_2, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_buy_kai'] && $trade_market['invit_buy_coin'] && $user_buy['invit_3'] && $invit_buy_3 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_buy['invit_3']])->setInc($trade_market['invit_buy_coin'], $invit_buy_3);			$rs[] = db::table("user_invit")->add(["userid" => $user_buy['invit_3'], "invit" => $user_buy['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "买入三代赠送", "type" => "交易赠送", "num" => $num_buy, "fee" => $invit_buy_3, "feecoin" => $trade_market['invit_buy_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['id'] && $invit_sell_0 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['id']])->setInc($trade_market['invit_sell_coin'], $invit_sell_0);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['id'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出赠送自己", "type" => "交易赠送", "num" => $num_sell, "fee" => $invit_sell_0, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_1'] && $invit_sell_1 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_1']])->setInc($trade_market['invit_sell_coin'], $invit_sell_1);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_1'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出一代赠送", "type" => "交易赠送", "num" => $num_sell, "fee" => $invit_sell_1, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_2'] && $invit_sell_2 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_2']])->setInc($trade_market['invit_sell_coin'], $invit_sell_2);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_2'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出二代赠送", "type" => "交易赠送", "num" => $num_sell, "fee" => $invit_sell_2, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if ($trade_market['invit_sell_kai'] && $trade_market['invit_sell_coin'] && $user_sell['invit_3'] && $invit_sell_3 > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $user_sell['invit_3']])->setInc($trade_market['invit_sell_coin'], $invit_sell_3);			$rs[] = db::table("user_invit")->add(["userid" => $user_sell['invit_3'], "invit" => $user_sell['id'], "gameid" => $trade_log['id'], "name" => $trade_log['market'] . "卖出三代赠送", "type" => "交易赠送", "num" => $num_sell, "fee" => $invit_sell_3, "feecoin" => $trade_market['invit_sell_coin'], "addtime" => time(), "status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["计算成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["计算失败" . implode("|", $rs)];		}	}	public static function market_list()	{		$res = db::table("trade_market")->where(["status" => 1])->order("sort asc")->select();		if ($res) {			foreach ($res as $v) {				$data[$v["name"]] = $v;			}		} else {			$data = false;		}		return $data;	}	public static function market_new_price($market = null)	{		if (!$market) {			return false;		}		return db::table("trade_market")->where(["name" => $market])->find("new_price");	}	public static function page_log($table = [], $where = [], $size = 10, $order = "`id` desc")	{		$count = db::table($table)->where($where)->count();		$page_obj = new page($count, $size);		$show = $page_obj->show();		$list = db::table($table)->where($where)->order($order)->limit($page_obj->firstRow, $page_obj->listRows)->select();		return ["list" => $list, "show" => $show];	}	public static function json_list($market = null, $time = null, $limit = 100)	{		$key = md5("move_json_list" . $market . $time . $limit);		$res = db::table("trade_json")->where(["market" => $market, "type" => $time, "data#!=" => ""])->order("id desc")->limit($limit)->select();		return $res;	}	public static function buy_list($market = null, $limit = 12)	{		$key = md5("move_buy_list" . $market . $limit);		$res = db::query("select id,price,sum(num-deal) as nums from move_trade where status=0 and type=1 and market =? group by price order by price desc limit ?;", [$market, $limit]);		return $res;	}	public static function sell_list($market = null, $limit = 12)	{		$key = md5("move_sell_list" . $market . $limit);		$res = db::query("select id,price,sum(num-deal) as nums from move_trade where status=0 and type=2 and market =? group by price order by price asc limit ?;", [$market, $limit]);		return $res;	}	public static function my_list($market = null, $userid = null, $limit = 10)	{		$res = db::table("trade")->where(["market" => $market, "userid" => $userid, "status#<>" => 2])->order("`id` DESC")->limit($limit)->select();		return $res;	}	public static function log_list($market = null, $limit = 50)	{		$res = db::table("trade_log")->where(["market" => $market])->order("`id` DESC")->limit($limit)->select();		return $res;	}	public static function zheng_num($userid = null, $xnb = null)	{		$res = db::query("select sum(num-deal)as nums from move_trade where userid=? and status=0 and type=2 and market like  ? ;", [$userid, $xnb . "_%"]);		$aaa = db::query("select sum(num-deal)as nums from move_trade where userid=? and status=0 and type=1 and market like  ? ;", [$userid, "%_" . $xnb]);		$data = 0;		if (isset($res[0]["nums"]) && $res[0]["nums"] > 0) {			$data = $data + $res[0]["nums"];		}		if (isset($aaa[0]["nums"]) && $aaa[0]["nums"] > 0) {			$data = $data + $aaa[0]["nums"];		}		return $data;	}	public static function jin_num($userid = null, $xnb = null)	{		$kaishi_time = mktime(0, 0, 0, date("m"), date("d"), date("Y"));		$res = db::query("select sum(num)as nums from move_trade where userid=? and status <> 2 and  type =2 AND addtime>= ? and market like  ? ;", [$userid, $kaishi_time, $xnb . "_%"]);		$aaa = db::query("select sum(num)as nums from move_trade where userid=? and status <> 2 and  type =1 AND addtime>= ? and market like  ? ;", [$userid, $kaishi_time, "%_" . $xnb]);		$data = 0;		if (isset($res[0]["nums"]) && $res[0]["nums"] > 0) {			$data = $data + $res[0]["nums"];		}		if (isset($aaa[0]["nums"]) && $aaa[0]["nums"] > 0) {			$data = $data + $aaa[0]["nums"];		}		return $data;	}	public static function chexiao($id = null)	{		if (!check($id, "d")) {			return ["撤销参数错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#trade write ,#pre#sys_err write , #pre#user_coin write , #pre#coin read , #pre#trade_market read");		$trade = db::table("trade")->where(["id" => $id])->find();		if (!$trade) {			db::exec("unlock tables");			return ["订单不存在"];		}		if ($trade["status"] != 0) {			db::exec("unlock tables");			return ["订单不能撤销"];		}		$xnb = explode("_", $trade["market"])[0];		$rmb = explode("_", $trade["market"])[1];		if (!$xnb) {			db::exec("unlock tables");			return ["卖出市场错误", ""];		}		if (!$rmb) {			db::exec("unlock tables");			return ["买入市场错误", ""];		}		$market_list = self::market_list();		$fee_buy = $market_list[$trade["market"]]["fee_buy"];		$fee_sell = $market_list[$trade["market"]]["fee_sell"];		if ($fee_buy < 0) {			db::exec("unlock tables");			return ["买入手续费错误"];		}		if ($fee_sell < 0) {			db::exec("unlock tables");			return ["卖出手续费错误"];		}		if ($trade["type"] == 1) {			$mun = round(($trade["num"] - $trade["deal"]) * $trade["price"] / 100 * (100 + $fee_buy), 8);			$user_buy = db::table("user_coin")->where(["userid" => $trade["userid"]])->find();			if (round($user_buy[$rmb . "d"], 8) >= round($mun, 8)) {				$save_buy_rmb = $mun;			} else {				if (round(($user_buy[$rmb . "d"] + 1), 8) >= round($mun, 8)) {					$save_buy_rmb = $user_buy[$rmb . "d"];				} else {					db::exec("rollback");					db::exec("unlock tables");					db::table("sys_err")->add(["name" => "trade", "value" => "订单ID(" . $trade["id"] . ")撤销失败"]);					db::table("trade")->where(["id" => $id])->save(["status" => 2]);					return ["撤销错误，进行错误处理"];				}			}			if ($save_buy_rmb < 0) {				db::exec("unlock tables");				return ["撤销失败a"];			}			$rs[] = db::table("user_coin")->where(["userid" => $trade["userid"]])->setInc($rmb, $save_buy_rmb);			$rs[] = db::table("user_coin")->where(["userid" => $trade["userid"]])->setDec($rmb . "d", $save_buy_rmb);			$rs[] = db::table("trade")->where(["id" => $trade["id"]])->save(["status" => 2]);		} elseif ($trade["type"] == 2) {			$mun = round(($trade["num"] - $trade["deal"]), 8);			$user_sell = db::table("user_coin")->where(["userid" => $trade["userid"]])->find();			if (round($user_sell[$xnb . "d"], 8) >= round($mun, 8)) {				$save_sell_xnb = $mun;			} else {				if (round(($user_sell[$xnb . "d"] + 1), 8) >= round($mun, 8)) {					$save_sell_xnb = $user_sell[$xnb . "d"];				} else {					db::exec("rollback");					db::exec("unlock tables");					db::table("sys_err")->add(["name" => "trade", "value" => "订单ID(" . $trade["id"] . ")撤销失败"]);					db::table("trade")->where(["id" => $id])->save(["status" => 2]);					return ["撤销错误，进行错误处理"];				}			}			if ($save_sell_xnb < 0) {				return ["撤销失败b"];			}			$rs[] = db::table("user_coin")->where(["userid" => $trade["userid"]])->setInc($xnb, $save_sell_xnb);			$rs[] = db::table("user_coin")->where(["userid" => $trade["userid"]])->setDec($xnb . "d", $save_sell_xnb);			$rs[] = db::table("trade")->where(["id" => $trade["id"]])->save(["status" => 2]);		} else {			db::exec("rollback");			return ["撤销失败3", ""];		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["撤销成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["撤销失败4|" . implode("|", $rs)];		}	}	public static function dapan($market = null)	{		return true;	}	public function moni($moni_id = null)	{		if ($moni_id) {			$moni = db::table('trade_moni')->where(['id' => $moni_id])->find();			if (!$moni) {				return ['项目不存在'];			}			if (!$moni['market_id']) {				return ['交易市场配置错误'];			}			if (!$moni['user_id']) {				return ['交易用户配置错误'];			}			if (!$moni['type']) {				return ['交易方式配置错误'];			}			if ($moni['min_price'] < 0) {				return ['最小价格配置错误'];			}			if ($moni['max_price'] < 0) {				return ['最大价格配置错误'];			}			if ($moni['min_num'] < 0) {				return ['最小数量配置错误'];			}			if ($moni['max_num'] < 0) {				return ['最大数量配置错误'];			}			if ($moni['zdie_type'] < 0) {				return ['涨跌方式配置错误'];			}			if ($moni['zdie_bili'] < 0) {				return ['涨跌比例配置错误'];			}			$trade_market = db::table('trade_market')->where(['id' => $moni['market_id']])->find();			if (!$trade_market) {				return ['交易市场不存在'];			}			if (!$trade_market['status']) {				return ['交易市场没有开启'];			}			if (!$trade_market['trade']) {				return ['交易市场禁止交易'];			}			if (!$trade_market['new_price']) {				return ['交易市场没有最新成交价'];			}			$user = db::table('user')->where(['id' => $moni['user_id']])->find();			if (!$user) {				return ['用户不存在'];			}			if (!$user['status']) {				return ['用户已禁用'];			}			$user_coin = db::table('user_coin')->where(['userid' => $moni['user_id']])->find();			if (!$user_coin) {				return ['用户财产不存在'];			}			if ($moni['shang_price'] > 0) {				$price = $moni['shang_price'];			} else {				$price = $trade_market['new_price'];			}			if ($moni['zdie_type'] == 1) {				$price = num($price * (100 + $moni['zdie_bili']) / 100, 8);			}			if ($moni['zdie_type'] == 2) {				$price = num($price * (100 - $moni['zdie_bili']) / 100, 8);			}			if ($moni['zdie_type'] == 3) {				if (rand(1, 2) == 1) {					$price = num($price * (100 - $moni['zdie_bili']) / 100, 8);				} else {					$price = num($price * (100 + $moni['zdie_bili']) / 100, 8);				}			}			if ($price > $moni['max_price']) {				$price = $moni['max_price'];			}			if ($price < $moni['min_price']) {				$price = $moni['min_price'];			}			$num = num(rand($moni['min_num'] * 100000000, $moni['max_num'] * 100000000) / 100000000, 8);			$res = md('trade')->guadan($moni['user_id'], $trade_market['name'], $price, $num, $moni['type']);			if (isset($res[1])) {				db::table('trade_moni')->where(['id' => $moni_id])->save(['shang_time' => date('Y-m-d H:i:s'), 'shang_price' => $price]);				db::exec("commit");				$mymz_trade = new \mymc\trade();				$mymz_trade->clear_mr($trade_market['name']);				return ['交易成功' . $price, 1];			} else {				return ['交易失败 ' . $res[0]];			}		}		$all_moni = mc('moble_trade_moni_all_moni');		if (!$all_moni) {			$all_moni = db::table('trade_moni')->where(['status' => 1])->select();			mc('moble_trade_moni_all_moni', $all_moni);		}		if (!$all_moni) {			return ['没有模拟任务'];		}		$err = '';		foreach ($all_moni as $k => $v) {			if (!$v['market_id']) {				$err .= 'market_id';				continue;			}			if (!$v['user_id']) {				$err .= 'user_id';				continue;			}			if (!$v['type']) {				$err .= 'type';				continue;			}			if ($v['min_price'] < 0) {				$err .= 'min_price';				continue;			}			if ($v['max_price'] < 0) {				$err .= 'max_price';				continue;			}			if ($v['min_num'] < 0) {				$err .= 'min_num';				continue;			}			if ($v['max_num'] < 0) {				$err .= 'max_num';				continue;			}			if ($v['zdie_type'] < 0) {				$err .= 'zdie_type';				continue;			}			if ($v['zdie_bili'] < 0) {				$err .= 'zdie_bili';				continue;			}			if (strtotime($v['shang_time']) > 0 && (strtotime($v['shang_time']) + $v['time']) > time()) {				$err .= 'shang_time';				continue;			}			$trade_market = db::table('trade_market')->where(['id' => $v['market_id']])->find();			if (!$trade_market) {				$err .= 'trade_market';				continue;			}			if (!$trade_market['status']) {				$err .= 'trade_market_status';				continue;			}			if (!$trade_market['trade']) {				$err .= 'trade_market_trade';				continue;			}			if (!$trade_market['new_price']) {				$err .= 'trade_market_new_price';				continue;			}			$user = db::table('user')->where(['id' => $v['user_id']])->find();			if (!$user) {				$err .= 'user';				continue;			}			if (!$user['status']) {				$err .= 'status';				continue;			}			$user_coin = db::table('user_coin')->where(['userid' => $v['user_id']])->find();			if (!$user_coin) {				$err .= 'user_coin';				continue;			}			if ($v['shang_price'] > 0) {				$price = $v['shang_price'];			} else {				$price = $trade_market['new_price'];			}			if ($v['zdie_type'] == 1) {				$price = num($price * (100 + $v['zdie_bili']) / 100, 8);			}			if ($v['zdie_type'] == 2) {				$price = num($price * (100 - $v['zdie_bili']) / 100, 8);			}			if ($v['zdie_type'] == 3) {				if (rand(1, 2) == 1) {					$price = num($price * (100 - $v['zdie_bili']) / 100, 8);				} else {					$price = num($price * (100 + $v['zdie_bili']) / 100, 8);				}			}			if ($price > $v['max_price']) {				if ($v['type'] == 1) {					$price = db::table('trade')->where(['market' => $trade_market['name'], 'type' => 1, 'status' => 0])->max('price');				} else {					$price = db::table('trade')->where(['market' => $trade_market['name'], 'type' => 2, 'status' => 0])->min('price');				}				if ($price > $v['max_price']) {					$price = $v['min_price'];				}			}			if ($price < $v['min_price']) {				if ($v['type'] == 1) {					$price = db::table('trade')->where(['market' => $trade_market['name'], 'type' => 1, 'status' => 0])->max('price');				} else {					$price = db::table('trade')->where(['market' => $trade_market['name'], 'type' => 2, 'status' => 0])->min('price');				}				if ($price < $v['min_price']) {					$price = $v['max_price'];				}			}			$num = num(rand($v['min_num'] * 100000000, $v['max_num'] * 100000000) / 100000000, 8);			$res = md('trade')->guadan($v['user_id'], $trade_market['name'], $price, $num, $v['type']);			if (isset($res[1])) {				db::table('trade_moni')->where(['id' => $v['id']])->save(['shang_time' => date('Y-m-d H:i:s'), 'shang_price' => $price]);				db::exec("commit");				$mymz_trade = new \mymc\trade();				$mymz_trade->clear_mr($trade_market['name']);				mc('moble_trade_moni_all_moni', null);				$err .= 'ok';			} else {				$err .= $res[0];				continue;			}			$err .= '|' . $price;			if ($v['qing'] > 0) {				$che_trade = db::table('trade')->where(['market' => $trade_market['name'], 'userid' => $v['user_id'], 'type' => $v['type'], 'status' => 0, 'addtime#<' => (time() - $v['qing'])])->select();				if ($che_trade) {					foreach ($che_trade as $kk => $vv) {						$res = $this->chexiao($vv['id']);						if (isset($res[1])) {							$err .= '|che' . $vv['id'];						} else {							$err .= '|che_err' . $vv['id'];						}					}				}			}		}		return ['任务计算完成' . $err, 1];	}}