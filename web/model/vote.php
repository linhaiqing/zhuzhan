<?phpnamespace model;use Move\db;class vote extends common{	public function up($uesrid, $id, $type, $ext)	{		if (!$uesrid || !check($uesrid, "d")) {			return ["uesrid格式错误"];		}		if (!$id || !check($id, "d")) {			return ["id格式错误"];		}		if (!$type || !check($type, "d")) {			return ["投票类型格式错误"];		}		if (!$ext || !check($ext, "a")) {			return ["投票原因格式错误"];		}		if (!$type || !check($type, "d") && $type != 1 && $type != 2) {			return ["投票类型格式错误2"];		}		if (!$ext || !check($ext, "a") || mb_strlen($ext) > 20) {			return ["投票原因格式错误2"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables  #pre#vote write ,#pre#vote_log write,#pre#user write");		$user = db::table("user")->where(["id" => $uesrid])->find();		if (!$user) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户不存在"];		}		$vote = db::table("vote")->where(["id" => $id])->find();		if (!$vote) {			db::exec("rollback");			db::exec("unlock tables");			return ["币种不存在"];		}		$vote_log = db::table("vote_log")->where(["userid" => $uesrid, "coinid" => $id])->find();		if ($vote_log) {			db::exec("rollback");			db::exec("unlock tables");			return ["您已经投票过"];		}		if ($type == 1) {			$rs[] = db::table("vote")->where(["id" => $id])->set(["zc#+" => 1, "zj#+" => 1]);		} else {			$rs[] = db::table("vote")->where(["id" => $id])->set(["fd#+" => 1, "zj#+" => 1]);		}		$rs[] = db::table("vote_log")->add(["coinid" => $id, "userid" => $uesrid, "type" => $type, "ext" => $ext, "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["投票成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["投票失败"];		}	}}