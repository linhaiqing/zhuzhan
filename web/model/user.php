<?phpnamespace model;use Move\db;use Move\ext\google;use Move\ext\client;class user extends common{	public static $err = '';	public static function getInfo($userid = null)	{		if (!$userid || !check($userid, "d")) {			self::$err = '用户id格式错误';			return false;		}		return db::table("user")->where(["id" => $userid])->find();	}	public static function addData($addData = [])	{		if (!$addData) {			self::$err = '数据格式错误';			return false;		}		return db::table("user_log")->add([$addData]);	}	public static function setSave($where = [], $data = [])	{		if (!$where || !$data) {			self::$err = '数据参数错误';			return false;		}		return db::table("user")->where($where)->save($data);	}	public function yidi_up($userid, $yidi, $paypassword)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if ($yidi != 1 && $yidi != 0) {			return ["验证方式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		$type = '修改';		$addip = get_ip();		$addr = get_city();		$remark = '修改异地登录验证方式';		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write, #pre#user_log write");		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			db::exec("rollback");			db::exec("unlock tables");			return ["交易密码错误"];		}		$rs[] = db::table("user")->where(["id" => $userid])->save(["yidi" => $yidi]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => $type, "remark" => $remark, "addip" => $addip, "addr" => $addr, "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ['修改成功', 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["修改失败"];		}	}	public function set_password($userid, $oldpassword, $newpassword)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$oldpassword || !check($oldpassword, "password")) {			return ["旧密码格式错误"];		}		if (!$newpassword || !check($newpassword, "password")) {			return ["新密码格式错误"];		}		if ($oldpassword == $newpassword) {			return ["新密码不能和旧密码相同"];		}		$type = '修改';		$addip = get_ip();		$addr = get_city();		$remark = '修改登录密码';		$rs = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["password"] != hashs($oldpassword)) {			db::exec("rollback");			db::exec("unlock tables");			return ["旧密码错误"];		}		if ($user["password"] == hashs($newpassword)) {			db::exec("rollback");			db::exec("unlock tables");			return ["新密码不能和旧密码相同"];		}		if ($user["paypassword"] == hashs($newpassword)) {			db::exec("rollback");			db::exec("unlock tables");			return ["新密码不能和交易密码相同"];		}		$rs[] = db::table("user")->where(["id" => $userid])->save(["password" => hashs($newpassword)]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => $type, "remark" => $remark, "addip" => $addip, "addr" => $addr, "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public static function reg_paypassword2($userid = null, $username = null, $paypassword = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$username || !check($username, "username")) {			return ["用户名格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		if (db::table("user")->where(["username" => $username])->find()) {			return ["用户名已存在"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write,#pre#sys_config write,#pre#user_coin write,#pre#user_invit write");		$user = [];		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["password"] == hashs($paypassword)) {			db::exec("unlock tables");			return ["交易密码不能和登录相同"];		}		$config = md('sys_config')->lists();		$rs = [];		$rs[1] = db::table("user")->where(["id" => $userid])->save(["username" => $username, "paypassword" => hashs($paypassword)]);		$rs[2] = db::table("user_log")->add(["userid" => $userid, "type" => "注册", "remark" => "新用户注册", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		$invit_reg_1 = 0;		$invit_reg_2 = 0;		$invit_reg_3 = 0;		if ($config["reg_invit"] && $config["reg_coin"]) {			if ($config["reg_invit_1"] > 0) {				$invit_reg_1 = $config["reg_invit_1"];			}			if ($config["reg_invit_2"] > 0) {				$invit_reg_2 = $config["reg_invit_2"];			}			if ($config["reg_invit_3"] > 0) {				$invit_reg_3 = $config["reg_invit_3"];			}		}		if ($config["reg_invit"] && $config["reg_invit_fee"] && $config["reg_coin"]) {			$fee = $config["reg_invit_fee"];		} else {			$fee = 0;		}		$ling = 0;		if ($fee > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $userid])->setInc($config["reg_coin"], $fee);			$rs[] = db::table("user_invit")->add(["userid" => $userid, "invit" => $ling, "name" => "注册赠送", "type" => "注册赠送", "num" => $ling, "fee" => $fee, "feecoin" => $config["reg_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_reg_1 && $user["invit_1"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_1"]])->setInc($config["reg_coin"], $invit_reg_1);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_1"], "invit" => $userid, "name" => "一代注册赠送", "type" => "注册赠送", "num" => $ling, "fee" => $invit_reg_1, "feecoin" => $config["reg_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_reg_2 && $user["invit_2"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_2"]])->setInc($config["reg_coin"], $invit_reg_2);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_2"], "invit" => $userid, "name" => "二代注册赠送", "type" => "注册赠送", "num" => $ling, "fee" => $invit_reg_2, "feecoin" => $config["reg_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_reg_3 && $user["invit_3"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_3"]])->setInc($config["reg_coin"], $invit_reg_3);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_3"], "invit" => $userid, "name" => "三代注册赠送", "type" => "注册赠送", "num" => $ling, "fee" => $invit_reg_3, "feecoin" => $config["reg_coin"], "addtime" => time(), "status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", $userid];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function login($users, $remark, $addip, $addr)	{		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$rs[] = db::table("user")->where(["id" => $users["id"]])->save(["logins" => ($users["logins"] + 1)]);		$rs[] = db::table("user_log")->add(["userid" => $users["id"], "type" => "登录", "remark" => $remark, "addip" => $addip, "addr" => $addr, "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ['登录成功', 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ['登录失败'];		}	}	public function info($userid = null)	{		if ($userid === null) {			$userid = session("userid");		}		if (!$userid) {			return false;		}		$res = db::table("user")->where(["id" => $userid])->find();		if (is_array($res)) {			return $res;		} else {			return false;		}	}	public function get_info($userid = null)	{		if ($userid === null) {			$userid = session("userid");		}		if (!$userid) {			return false;		}		$res = db::table("user")->where(["id" => $userid])->find();		if (is_array($res)) {			return $res;		} else {			return false;		}	}	public function get_coin_info($userid = NULL)	{		if ($userid === null) {			$userid = session("userid");		}		if (!$userid) {			return false;		}		$res = db::table("user_coin")->where(["userid" => $userid])->find();		if (!empty($res)) {			return $res;		} else {			return false;		}	}	public function set_paypassword($userid = null, $oldpaypassword = null, $newpaypassword = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$oldpaypassword || !check($oldpaypassword, "password")) {			return ["旧密码格式错误"];		}		if (!$newpaypassword || !check($newpaypassword, "password")) {			return ["新密码格式错误"];		}		if ($oldpaypassword == $newpaypassword) {			return ["新密码不能和旧密码相同"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($oldpaypassword)) {			db::exec("unlock tables");			return ["旧密码错误"];		}		if ($user["password"] == hashs($newpaypassword)) {			db::exec("unlock tables");			return ["新密码不能和登录相同"];		}		$rs = [];		$rs[] = db::table("user")->where(["id" => $userid])->save(["paypassword" => hashs($newpaypassword)]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "修改", "remark" => "修改交易密码", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function set_tpwdsetting($userid = null, $paypassword = null, $tpwdsetting = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		if ($tpwdsetting != 1 && $tpwdsetting != 2 && $tpwdsetting != 3) {			return ["密码输入方式错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			db::exec("unlock tables");			return ["交易密码错误"];		}		$rs = [];		$rs[] = db::table("user")->where(["id" => $userid])->save(["tpwdsetting" => $tpwdsetting]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "修改", "remark" => "修改密码输入方式", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function set_moble($userid = null, $moble = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$moble || mb_strlen($moble) > 20) {			return ["手机号码格式错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			db::exec("unlock tables");			return ["用户不存在"];		}		if ($user["moble"] == $moble) {			return ["手机号码没有改变"];		}		if (db::table("user")->where(["moble" => $moble])->find()) {			return ["手机号码已存在"];		}		$rs = [];		$rs[] = db::table("user")->where(["id" => $userid])->save(["moble" => $moble]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "修改", "remark" => "修改手机号码", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function cha_moble($moble)	{		if (!$moble || mb_strlen($moble) > 20) {			return ["手机号码格式错误"];		}		if (db::table("user")->where(["moble" => $moble])->find()) {			return ["存在", 1];		} else {			return ["不存在"];		}	}	public function reg($moble = null, $password = null, $invit = null)	{		if (!$moble || mb_strlen($moble) > 20) {			return ["手机号码格式错误"];		}		if (!$password || !check($password, "password")) {			return ["密码格式错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user write,#pre#user_log write,#pre#user_coin write,#pre#user_wallet write");		if (db::table("user")->where(["moble" => $moble])->find()) {			db::exec("unlock tables");			return ["手机号码已存在"];		}		$invit_1 = 0;		$invit_2 = 0;		$invit_3 = 0;		if ($invit) {			$user_invit = db::table("user")->where(["invit" => $invit])->find();			if ($user_invit) {				$invit_1 = $user_invit["id"];				$invit_2 = $user_invit["invit_1"];				$invit_3 = $user_invit["invit_2"];			}		}		$userid = db::table("user")->add(["moble" => $moble, "password" => hashs($password), "addip" => get_ip(), "addr" => get_city(), "invit" => $this->tradeno(), "invit_1" => $invit_1, "invit_2" => $invit_2, "invit_3" => $invit_3, "tpwdsetting" => 2, "addtime" => time(), "status" => 1]);		if (!$userid) {			db::exec("rollback");			db::exec("unlock tables");			return ["注册失败"];		}		$rs = [];		$rs[] = db::table("user_coin")->add(["userid" => $userid]);		$rs[] = db::table("user_wallet")->add(["userid" => $userid]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "添加", "remark" => "注册账号，成功id " . $userid, "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["注册成功", $userid];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["注册失败"];		}	}	public function truename_upII($userid = null, $truename = null, $idcardtype = null, $idcard = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$idcardtype || mb_strlen($idcardtype) > 20) {			return ["证件类型格式错误"];		}		if (!$truename || !check($truename, "truename")) {			return ["真实姓名格式错误"];		}		if (!$idcard || !check($idcard, "dw")) {			return ["证件号码格式错误"];		}		$config = md('sys_config')->lists();		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write,#pre#user_log write,#pre#user_img write");		$usercheck = db::table('user')->where(['id' => $userid])->find();		if (empty($usercheck)) {			db::exec("unlock tables");			return ["用户不存在"];		}		if ($usercheck['idcard_rz']) {			db::exec("unlock tables");			return ["你已提交实名认证"];		}		if (isset($config['idrard_img_rz']) && !$config['idrard_img_rz']) {			$idcard_rz = 1;		} else {			$idcard_rz = 2;		}		$rs[] = db::table('user')->where(['id' => $userid])->save(['truename' => $truename, 'idcard' => $idcard, 'idcardtype' => $idcardtype, 'idcard_rz' => $idcard_rz]);		$rs[] = db::table('user_log')->add(['userid' => $userid, 'type' => '实名认证', 'remark' => '提交实名认证', "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function fd_password($moble = null, $password = null)	{		if (!$moble || mb_strlen($moble) > 50) {			return ["手机号码格式错误"];		}		if (!$password || !check($password, "password")) {			return ["密码格式错误"];		}		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["moble|email" => $moble])->find();		if (!$user) {			return ["用户不存在"];		}		if (!$user["status"]) {			return ["用户已禁用"];		}		if ($user["paypassword"] == hashs($password)) {			db::exec("unlock tables");			return ["新密码不能和交易密码相同"];		}		$rs = [];		$rs[1] = db::table("user")->where(["id" => $user["id"]])->save(["password" => hashs($password)]);		$rs[2] = db::table("user_log")->add(["userid" => $user["id"], "type" => "找回", "remark" => "通过手机找回登录密码", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", $user["id"]];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function fd_paypassword($moble = null, $paypassword = null)	{		if (!$moble || mb_strlen($moble) > 50) {			return ["手机号码格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["密码格式错误"];		}		db::exec("set autocommit=0");		db::exec("lock tables #pre#user write,#pre#user_log write");		$user = db::table("user")->where(["moble|email" => $moble])->find();		if (!$user) {			return ["用户不存在"];		}		if (!$user["status"]) {			return ["用户已禁用"];		}		if ($user["password"] == hashs($paypassword)) {			db::exec("unlock tables");			return ["新密码不能和登录密码相同"];		}		$rs = [];		$rs[] = db::table("user")->where(["id" => $user["id"]])->save(["paypassword" => hashs($paypassword)]);		$rs[] = db::table("user_log")->add(["userid" => $user["id"], "type" => "找回", "remark" => "通过手机找回交易密码", "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", $user["id"]];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function paiming($userid = null)	{		if (!$userid) {			return false;		}		$res = db::table("user")->where(["id" => $userid])->find();		if (is_array($res)) {			if ($res["zzc"] > 0) {				$paiming = db::table("user")->where(["zzc#>" => $res["zzc"]])->count();				return $paiming + 1;			} else {				return 0;			}		} else {			return false;		}	}	public function google()	{		$google = google::init();		return $google;	}	public static function add_goods($userid = null, $name = null, $truename = null, $moble = null, $prov = null, $city = null, $addr = null, $paypassword = null)	{		if (!check($userid, "d")) {			return ["用户id格式错误.userid"];		}		if (!check($name, "a") || mb_strlen($name) > 20) {			return ["备注名称格式错误.name"];		}		if (!check($truename, "truename") || mb_strlen($truename) > 10) {			return ["联系姓名格式错误.truename"];		}		if (!check($moble, "moble") || mb_strlen($moble) > 12) {			return ["联系电话格式错误.moble"];		}		if (!check($prov, "a") || mb_strlen($prov) > 12) {			return ["省份格式错误.prov"];		}		if (!check($city, "a") || mb_strlen($city) > 12) {			return ["城市格式错误.city"];		}		if (!check($addr, "a") || mb_strlen($addr) > 50) {			return ["联系地址格式错误.addr"];		}		if (!check($paypassword, "password")) {			return ["交易密码格式错误.paypassword"];		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user_goods write,#pre#user_log write");		$rs = [];		$rs[] = db::table("user_goods")->add(["userid" => $userid, "name" => $name, "truename" => $truename, "moble" => $moble, "prov" => $prov, "city" => $city, "addr" => $addr, "addtime" => time(), "status" => 1]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "添加", "remark" => "添加联系地址，备注名称" . $name, "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function del_goods($userid = null, $id = null, $paypassword = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$id || !check($id, "d")) {			return ["地址id格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user_log write,#pre#user_goods write");		$goods = db::table("user_goods")->where(["id" => $id])->find();		if (!$goods) {			db::exec("unlock tables");			return ["地址不存在"];		}		if ($goods["userid"] != $userid) {			return ["非法访问"];		}		$rs = [];		$rs[] = db::table("user_goods")->where(["id" => $id])->delete();		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "删除", "remark" => "删除联系地址，备注名称" . $goods["name"], "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function add_qianbao($userid = null, $name = null, $coinname = null, $addr = null, $paypassword = null, $memo = null, $type = null)	{		if (!check($userid, "d")) {			return ["用户id格式错误.userid"];		}		if (!check($name, "a") || mb_strlen($name) > 20) {			return ["备注名称格式错误.name"];		}		if (!check($coinname, "w") || mb_strlen($coinname) > 10) {			return ["币种格式错误.coinname"];		}		if ($type && !check($type, "d")) {			return ["钱包类型错误"];		}		if (!check($paypassword, "password")) {			return ["交易密码格式错误.paypassword"];		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user_qianbao write,#pre#user_log write,,#pre#coin write");		if (db::table("user_qianbao")->where(["userid" => $userid, "coinname" => $coinname])->count() >= 9) {			db::exec("unlock tables");			return ["每个币种最多只能添加10个地址"];		}		$status = 1;		$round = 0;		if ($type) {			$status = 0;			$coin = db::table('coin')->where(['name' => $coinname])->find();			$round = rand(($coin['round_min'] * 100000000), ($coin['round_max'] * 100000000)) / 100000000;			$round = round($round, $coin['round']);		}		$rs = [];		$rs[] = db::table("user_qianbao")->add(["userid" => $userid, "name" => $name, "coinname" => $coinname, "addr" => $addr, "memo" => $memo, "addtime" => time(), "status" => 1]);		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "添加", "remark" => "添加钱包地址，备注名称" . $name, "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1, $round];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function del_qianbao($userid = null, $id = null, $paypassword = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$id || !check($id, "d")) {			return ["地址id格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user_log write,#pre#user_qianbao write");		$qianbao = db::table("user_qianbao")->where(["id" => $id])->find();		if (!$qianbao) {			db::exec("unlock tables");			return ["地址不存在"];		}		if ($qianbao["userid"] != $userid) {			return ["非法访问"];		}		$rs = [];		$rs[] = db::table("user_qianbao")->where(["id" => $id])->delete();		$rs[] = db::table("user_log")->add(["userid" => $userid, "type" => "删除", "remark" => "删除钱包地址，备注名称" . $qianbao["name"], "addip" => get_ip(), "addr" => get_city(), "addtime" => time(), "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function info_by_username($username)	{		$res = db::table("user")->where(["username" => $username])->find();		if (is_array($res)) {			return $res;		} else {			return false;		}	}	public function check_email($email)	{		if (db::table("user")->where(["email" => $email])->find()) {			return true;		} else {			return false;		}	}	public function check_username($username)	{		if (db::table("user")->where(["username" => $username])->find()) {			return true;		} else {			return false;		}	}	public function del($uid)	{		if (!$uid) {			return false;		}		if (db::table("user")->where(["uid" => $uid])->delete()) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function invit($where = null, $order = null, $field = null)	{		$res = db::table("user")->where($where)->order($order)->field($field)->select();		return $res;	}	public function set_google($uid, $google)	{		if (db::table("user")->where(["id" => $uid])->save(["google" => $google])) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function set_email($userid, $email)	{		if (self::check_email($email)) {			return [0, "邮箱账号已存在"];		}		if (db::table("user")->where(["id" => $userid])->save(["email" => $email])) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function set_details($userid = null, $data = [])	{		if (db::table("user")->where(["id" => $userid])->save($data)) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function set_alipay($uid, $alipay)	{		if (db::table("user")->where(["id" => $uid])->save(["alipay" => $alipay])) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function set_truename($uid, $truename, $idcard)	{		if (db::table("user")->where(["id" => $uid])->save(["truename" => $truename, "idcard" => $idcard])) {			return [1, "操作成功"];		} else {			return [0, "操作失败"];		}	}	public function zzc($zzc = null)	{		if (!$zzc) {			return false;		}		$userid = session("userid");		if (!$userid) {			return false;		}		$res = db::table("user")->where(["id" => $userid])->save(["zzc" => $zzc]);		if ($res) {			return true;		} else {			return false;		}	}	public static function login_log($userid = null)	{		if (!$userid) {			return false;		}		$remark = "通过手机号登录";		$addip = get_ip();		if (!$addip) {			return false;		}		$addr = get_city($addip);		if (!$addr) {			return false;		}		$res = db::table("user_log")->add(["userid" => $userid, "type" => "登录", "remark" => $remark, "addip" => $addip, "addr" => $addr, "sort" => 0, "addtime" => time(), "endtime" => time(), "status" => 1]);		if (!$res) {			return false;		} else {			return true;		}	}	public function tradeno()	{		while (true) {			$tradeno = substr(str_shuffle("ABCDEFGHIJKLMNPQRSTUVWXYZ"), 0, 2) . substr(str_shuffle(str_repeat("123456789", 4)), 0, 6);			if (!db::table("user")->where(["invit" => $tradeno])->find()) {				return $tradeno;			}		}	}	public function get_wallet_addr($coinname = null)	{		if (!$coinname) {			return 'coinname err';		}		$user_wallet = db::table("user_wallet")->where(["userid" => session("userid")])->find($coinname);		if (!$user_wallet) {			$user_wallet = self::add_wallet_addr(session("userid"), $coinname);		}		return $user_wallet;	}	public static function add_wallet_addr($userid = null, $coinname = null)	{		if (!$userid || !check($userid, "d")) {			return "用户id格式错误";		}		if (!$coinname || !check($coinname, "w")) {			return "币种名称格式错误";		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return "用户不存在";		}		$coin = db::table("coin")->where(["name" => $coinname])->find();		if (!$coin) {			return "币种不存在";		}		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_wallet write");		$user_wallet = db::table("user_wallet")->where(["userid" => $userid])->find();		if (!$user_wallet) {			if (db::table("user_wallet")->add(["userid" => $userid])) {				$user_wallet = db::table("user_wallet")->where(["userid" => $userid])->find();			} else {				db::exec("unlock tables");				return "钱包地址生成出错";			}		}		if (!$user_wallet[$coinname]) {			if ($coin["wallet"] == "tsb") {				return isset($coin["tsb_addr"]) ? $coin["tsb_addr"] : "";			}			$qianbao = '';			if ($coin["wallet"] == "rgb") {				$qianbao = md5($userid . $coinname);			}			if ($coin["wallet"] == "qbb") {				if (!$coin["dj_yh"] || !$coin["dj_mm"] || !$coin["dj_zj"] || !$coin["dj_dk"]) {					db::exec("unlock tables");					return "钱包对接配置异常";				}				$client = new client($coin["dj_yh"], $coin["dj_mm"], $coin["dj_zj"], $coin["dj_dk"], 5, [], 1);				if (!$client) {					db::exec("unlock tables");					return "钱包链接失败";				}				$qianbao = $client->execute("getnewaddress", [$user["username"]]);				if (!$qianbao) {					db::exec("unlock tables");					return "生成钱包地址出错";				}			}			if (!$qianbao) {				db::exec("unlock tables");				return "生成钱包地址异常";			}			if (db::table("user_wallet")->where(["userid" => $userid])->save([$coinname => $qianbao])) {				db::exec("commit");				db::exec("unlock tables");				return $qianbao;			} else {				db::exec("rollback");				db::exec("unlock tables");				return "更新钱包地址异常";			}		} else {			db::exec("unlock tables");			return $user_wallet[$coinname];		}	}	public function delete_user($id)	{		if (empty($id)) {			return ['操作失败'];		}		db::exec('set autocommit=0');		db::exec('lock tables  #pre#user write ,#pre#user_coin  write,#pre#user_wallet  write');		foreach ($id as $k => $v) {			$rs[] = db::table('user')->where(['id' => $v])->delete();			if (db::table('user_coin')->where(['userid' => $v])->find()) {				$rs[] = db::table('user_coin')->where(['userid' => $v])->delete();			}			if (db::table('user_wallet')->where(['userid' => $v])->find()) {				$rs[] = db::table('user_wallet')->where(['userid' => $v])->delete();			}		}		if (check_arr($rs)) {			db::exec('commit');			db::exec('unlock tables');			return ['操作成功', 1];		} else {			db::exec('rollback');			db::exec('unlock tables');			return ['操作失败'];		}	}	public function email_config()	{		if (!$arr = mc('mcemail_config')) {			$data = db::table("sys_email")->select();			if (empty($data)) {			} else {				foreach ($data as $k => $v) {					$arr[$v['name']] = $v['value'];				}			}			mc('mcemail_config', $arr);		}		return $arr;	}}