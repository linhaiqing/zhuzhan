<?phpnamespace model;use home\ajax;use Move\db;use Move\ext\google;use Move\ext\client;use Move\ext\page;class finan extends common{	public function wanneng($username, $num, $coinname)	{		if (!$username || !check($username, "username")) {			return ["用户名格式错误"];		}		if (!$num || !check($num, "xnb")) {			return ["数量格式错误"];		}		if (!$coinname || !check($coinname, "w")) {			return ["币种格式错误"];		}		$user = db::table("user")->where(["username" => $username])->find();		if (!$user) {			return ["用户不存在"];		}		$coin = db::table("coin")->where(["name" => $coinname])->find();		if (!$coin) {			return ["币种不存在"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write,#pre#finan_pay write ,#pre#coin_in write");		$user_coin = db::table("user_coin")->where(["userid" => $user['id']])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		if ($coin['wallet'] == "rmb") {			$rs[] = db::table('user_coin')->where(['userid' => $user['id']])->setInc($coinname, $num);			$rs[] = db::table('finan_pay')->add(['userid' => $user['id'], 'num' => $num, 'mum' => $num, 'coinname' => $coinname, 'type' => "", 'tradeno' => "系统", 'addtime' => time(), 'endtime' => time(), 'status' => 2]);		} else {			$rs[] = db::table('user_coin')->where(['userid' => $user['id']])->setInc($coinname, $num);			$rs[] = db::table('coin_in')->add(['userid' => $user['id'], 'num' => $num, 'mum' => $num, 'coinname' => $coinname, 'type' => "系统", 'addtime' => time(), 'endtime' => time(), 'status' => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["充值成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["充值失败"];		}	}	public function kouqian($username, $num, $coinname)	{		if (!$username || !check($username, "username")) {			return ["用户名格式错误"];		}		if (!$num || !check($num, "xnb")) {			return ["数量格式错误"];		}		if (!$coinname || !check($coinname, "w")) {			return ["币种格式错误"];		}		$user = db::table("user")->where(["username" => $username])->find();		if (!$user) {			return ["用户不存在"];		}		$coin = db::table("coin")->where(["name" => $coinname])->find();		if (!$coin) {			return ["币种不存在"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write,#pre#finan_pay write ,#pre#coin_in write");		$user_coin = db::table("user_coin")->where(["userid" => $user['id']])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		if ($user_coin[$coinname] < $num) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户余额不足"];		}		if ($coin['wallet'] == "rmb") {			$rs[] = db::table('user_coin')->where(['userid' => $user['id']])->setDec($coinname, $num);			$rs[] = db::table('finan_pay')->add(['userid' => $user['id'], 'num' => $num, 'mum' => $num, 'coinname' => $coinname, 'type' => "", 'tradeno' => "系统扣除", 'addtime' => time(), 'endtime' => time(), 'status' => 2]);		} else {			$rs[] = db::table('user_coin')->where(['userid' => $user['id']])->setDec($coinname, $num);			$rs[] = db::table('coin_in')->add(['userid' => $user['id'], 'num' => $num, 'mum' => $num, 'coinname' => $coinname, 'type' => "系统扣除", 'addtime' => time(), 'endtime' => time(), 'status' => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["充值成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["充值失败"];		}	}	public function coinin_queren($id)	{		if (!$id || !check($id, "d")) {			return ["参数错误"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user read ,#pre#coin read ,#pre#user_coin write,#pre#coin_in write,#pre#user_qianbao write");		$coin_in = db::table("coin_in")->where(["id" => $id])->find();		if (!$coin_in || $coin_in["status"] != 0) {			db::exec("rollback");			db::exec("unlock tables");			return ["已经处理禁止再次操作"];		}		$user = db::table("user")->where(["id" => $coin_in["userid"]])->find();		if (!$user) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户不存在"];		}		$coin = db::table("coin")->where(["name" => $coin_in['coinname']])->find();		if (!$coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["币种不存在"];		}		$user_coin = db::table("user_coin")->where(["userid" => $user['id']])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		$rs[] = db::table("user_coin")->where(["userid" => $coin_in["userid"]])->setInc($coin_in['coinname'], $coin_in["num"]);		$rs[] = db::table("coin_in")->where(["id" => $coin_in["id"]])->save(["status" => 1, "mum" => $coin_in["num"], "endtime" => time()]);		if ($coin['wallet'] == 'newcoin') {			$rs[] = db::table('user_qianbao')->where(['addr' => $coin_in['zhuanchu']])->save(['status' => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["处理成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["处理失败"];		}	}	public function coinin_loudan_daohzhang($username, $coinname, $txid, $num)	{		if (!$username || !check($username, "username")) {			return ["address参数错误"];		}		if (!$coinname || !check($coinname, "w")) {			return ["币种参数错误"];		}		if (!$txid || !check($txid, "dw")) {			return ["txid参数错误"];		}		if (!$num || !check($num, "xnb")) {			return ["num参数错误"];		}		$user = db::table("user")->where(["username" => $username])->find();		if (!$user) {			return ["用户不存在"];		}		$coin = db::table("coin")->where(["name" => $coinname])->find();		if (!$coin) {			return ["币种不存在"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write,#pre#coin_in write");		$coin_in = db::table("coin_in")->where(["txid" => $txid])->find();		if ($coin_in) {			db::exec("rollback");			db::exec("unlock tables");			return ["记录已经存在"];		}		$user_coin = db::table("user_coin")->where(["userid" => $user['id']])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		$rs[] = db::table("user_coin")->where(["userid" => $user['id']])->setInc($coinname, $num);		$rs[] = db::table("coin_in")->add(["userid" => $user['id'], "coinname" => $coinname, "zhuanchu" => "", "txid" => $txid, "queren" => $coin['zr_dz'], "num" => $num, "mum" => $num, "fee" => 0, "addtime" => time(), "type" => "站外", "status" => 1]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["到账成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["到账失败"];		}	}	public function coinout_chexiao($id)	{		if (!$id || !check($id, "d")) {			return ["参数错误"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#user read ,#pre#coin read ,#pre#user_coin write,#pre#coin_out write");		$coin_out = db::table("coin_out")->where(["id" => $id])->find();		if (!$coin_out || $coin_out["status"] != 0) {			db::exec("rollback");			db::exec("unlock tables");			return ["已经处理禁止再次操作"];		}		$user = db::table("user")->where(["id" => $coin_out["userid"]])->find();		if (!$user) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户不存在"];		}		$coin = db::table("coin")->where(["name" => $coin_out['coinname']])->find();		if (!$coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["币种不存在"];		}		$user_coin = db::table("user_coin")->where(["userid" => $user['id']])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		$rs[] = db::table("user_coin")->where(["userid" => $coin_out["userid"]])->setInc($coin_out['coinname'], $coin_out["num"]);		$rs[] = db::table("coin_out")->where(["id" => $coin_out["id"]])->save(["status" => 3]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["处理成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["处理失败"];		}	}	public function coin_out_up($userid = null, $coinname = null, $num = null, $type = null, $goole = null, $paypassword = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$coinname || !check($coinname, "w")) {			return ["币种格式错误"];		}		if (!$num || !check($num, "xnb")) {			return ["转出数量格式错误"];		}		if (!$type || !check($type, "d")) {			return ["提现地址格式错误"];		}		if ($goole && !check($goole, "d")) {			return ["谷歌验证码格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		if ($goole) {			$google_check_arr = explode("|", $user["google"]);			if (isset($google_check_arr[2]) && $google_check_arr[2] == 1) {				$ga = google::init();				if (!$ga->verifyCode($google_check_arr[0], $goole, 1)) {					return ["谷歌验证失败"];				}			}		}		$coin = db::table("coin")->where(["name" => $coinname])->find();		if (!$coin) {			return ["币种不存在"];		}		if ($coin["status"] != 1) {			return ["币种已经关闭"];		}		if ($coin["zc_jz"] != 1) {			return ["币种禁止转出"];		}		$user_qianbao = db::table("user_qianbao")->where(["id" => $type])->find();		if (!$user_qianbao) {			return ["转出地址错误"];		}		if (!$user_qianbao["addr"]) {			return ["转出地址不正常"];		}		if ($user_qianbao["coinname"] != $coinname) {			return ["转出地址异常"];		}		if ($user_qianbao["userid"] != $userid) {			return ["非法访问"];		}		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#coin_out write ,#pre#coin_in write , #pre#user_coin  write ,  #pre#user_wallet  read,#pre#user  read");		$user_coin = db::table("user_coin")->where(["userid" => $userid])->find();		if (!$user_coin) {			db::exec("rollback");			db::exec("unlock tables");			return ["用户财产错误"];		}		if ($user_coin[$coinname] < $num) {			db::exec("rollback");			db::exec("unlock tables");			return ["账户可用余额不足"];		}		$out_min = $coin["zc_min"];		if ($out_min <= 0) {			$out_min = 1;		}		if ($num < $out_min) {			db::exec("rollback");			db::exec("unlock tables");			return ["每次转出数量不能小于" . $out_min];		}		$out_max = $coin["zc_max"];		if ($out_max <= 0) {			$out_max = 100000;		}		if ($num > $out_max) {			db::exec("rollback");			db::exec("unlock tables");			return ["每次转出数量不能大于" . $out_max];		}		$user_wallet = db::table("user_wallet")->where(["userid" => $userid])->find();		if (!$user_wallet) {			db::exec("rollback");			db::exec("unlock tables");			return ["我的地址错误"];		}		if (($coin["wallet"] != "tsb") && $coin["wallet"] != "newcoin" && ($coin["wallet"] != "deth") && ($coin["wallet"] != "wyc") && ($coin["wallet"] != "asch")) {			if (!$user_wallet[$coinname]) {				db::exec("rollback");				db::exec("unlock tables");				return ["我的币种地址错误1"];			}		}		if ($coin["wallet"] == "deth" && !$user_wallet['eth']) {			db::exec("rollback");			db::exec("unlock tables");			return ["我的币种地址错误2"];		}		$ling = 0;		$out_fee = $coin["zc_fee"];		$fee = num(($num / 100 * $out_fee), 8);		if (isset($coin["zc_fee_limit"]) && $coin["zc_fee_limit"]) {			$fee = $fee + $coin["zc_fee_limit"];		}		$mum = num(($num - $fee), 8);		if ($mum <= 0) {			db::exec("rollback");			db::exec("unlock tables");			return ["实际转出数量错误"];		}		if ($coin["wallet"] == "rgb") {			$duifang = db::table("user_wallet")->where([$coinname => $user_qianbao["addr"]])->find();			if (!$duifang) {				db::exec("rollback");				db::exec("unlock tables");				return ["对方地址不存在站内"];			}			if ($fee <= 0) {				if ($duifang["userid"] == $userid) {					db::exec("rollback");					db::exec("unlock tables");					return ["不能自己给自己转账"];				}			}			if (!db::table("user")->where(["id" => $duifang["userid"]])->find()) {				db::exec("rollback");				db::exec("unlock tables");				return ["对方账户异常"];			}			if (!db::table("user_coin")->where(["userid" => $duifang["userid"]])->find()) {				db::exec("rollback");				db::exec("unlock tables");				return ["对方财产异常"];			}			$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);			$rs[] = db::table("user_coin")->where(["userid" => $duifang["userid"]])->setInc($coinname, $mum);			$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);			$rs[] = db::table("coin_in")->add(["userid" => $duifang["userid"], "coinname" => $coinname, "num" => $mum, "zhuanchu" => $user_wallet[$coinname], "fee" => $ling, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);		} elseif ($coin["wallet"] == "qbb") {			$duifang = db::table("user_wallet")->where([$coinname => $user_qianbao["addr"]])->find();			if ($duifang) {				if ($fee <= 0) {					if ($duifang["userid"] == $userid) {						db::exec("rollback");						db::exec("unlock tables");						return ["不能自己给自己转账"];					}				}				if (!db::table("user")->where(["id" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方用户异常"];				}				if (!db::table("user_coin")->where(["userid" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方财产异常"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("user_coin")->where(["userid" => $duifang["userid"]])->setInc($coinname, $mum);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);				$rs[] = db::table("coin_in")->add(["userid" => $duifang["userid"], "coinname" => $coinname, "num" => $mum, "zhuanchu" => $user_wallet[$coinname], "fee" => $ling, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);			} else {				if (!$coin["dj_yh"] || !$coin["dj_mm"] || !$coin["dj_zj"] || !$coin["dj_dk"]) {					db::exec("rollback");					db::exec("unlock tables");					return ["钱包对接配置异常:qqb"];				}				$client = new client($coin["dj_yh"], $coin["dj_mm"], $coin["dj_zj"], $coin["dj_dk"], 5, [], 1);				if (!$client) {					db::exec("rollback");					db::exec("unlock tables");					return ["钱包链接失败"];				}				$getinfo = $client->execute("getinfo");				if (!$getinfo) {					db::exec("rollback");					db::exec("unlock tables");					return ["获取钱包信息失败"];				}				if (!isset($coin["zc_addr"]) || $coin["zc_addr"] != 0) {					if (!$client->execute("validateaddress", $user_qianbao["addr"])) {						db::exec("rollback");						db::exec("unlock tables");						return ["对方地址不存在站外"];					}				}				if ($getinfo["balance"] < $num) {					if ($client->execute("getbalance") < $num) {						db::exec("rollback");						db::exec("unlock tables");						return ["钱包余额不足"];					}				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站外", "status" => $ling]);			}		} else if ($coin["wallet"] == "gxb") {			$isZhannei = $coin['dj_yh'] == $user_qianbao['addr'];			if ($isZhannei) {				if ($fee <= 0) {					if ($user_qianbao["memo"] == $userid) {						db::exec("rollback");						db::exec("unlock tables");						return ["不能自己给自己转账"];					}				}				if (!db::table("user")->where(["id" => $user_qianbao["memo"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方用户异常"];				}				if (!db::table("user_coin")->where(["userid" => $user_qianbao["memo"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方财产异常"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("user_coin")->where(["userid" => $user_qianbao["memo"]])->setInc($coinname, $mum);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);				$rs[] = db::table("coin_in")->add(["userid" => $user_qianbao["memo"], "coinname" => $coinname, "num" => $mum, "zhuanchu" => $user_wallet[$coinname], "fee" => $ling, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);			} else {				if (!$coin["dj_mm"] || !$coin["dj_zj"] || !$coin["dj_dk"] || !$coin["dj_yh"]) {					db::exec("rollback");					db::exec("unlock tables");					return ["钱包对接配置异常:gxb"];				}				$gxb = new \ext\coin\gxb($coin['dj_zj'], $coin['dj_dk'], $coin['dj_yh'], $coin['dj_mm']);				if (!$gxb) {					db::exec("rollback");					db::exec("unlock tables");					return [" 链接钱包失败"];				}				$duijie_success = $gxb->check_success();				if (!$duijie_success) {					db::exec("rollback");					db::exec("unlock tables");					return ["账户异常"];				}				$balance = @$gxb->get_balance()[0]['amount'] / 100000;				if (!$balance || $balance < $num) {					db::exec("rollback");					db::exec("unlock tables");					return ["系统钱包余额不足"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "memo" => $user_qianbao["memo"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站外", "status" => $ling]);			}		} else if ($coin["wallet"] == "eth" || $coin["wallet"] == "deth") {			$duifang = db::table("user_wallet")->where(['eth' => $user_qianbao["addr"]])->find();			if ($duifang) {				if ($fee <= 0) {					if ($duifang["userid"] == $userid) {						db::exec("rollback");						db::exec("unlock tables");						return ["不能自己给自己转账"];					}				}				if (!db::table("user")->where(["id" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方用户异常"];				}				if (!db::table("user_coin")->where(["userid" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方财产异常"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("user_coin")->where(["userid" => $duifang["userid"]])->setInc($coinname, $mum);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);				$rs[] = db::table("coin_in")->add(["userid" => $duifang["userid"], "coinname" => $coinname, "num" => $mum, "zhuanchu" => $user_wallet[$coinname], "fee" => $ling, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);			} else {				if (!$coin["dj_zj"] || !$coin["dj_dk"]) {					db::exec("rollback");					db::exec("unlock tables");					return ["钱包对接配置异常:eth"];				}				$host = $coin['dj_zj'];				$port = $coin["dj_dk"];				$password = $coin['dj_jm'];				$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=version';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				if (isset($qianbao['status']) && $qianbao['status'] == 1) {					if ($qianbao['msg']['total'] < $num && $coin["name"] != 'wkc') {						db::exec("rollback");						db::exec("unlock tables");						return ['钱包余额不足'];					}				} else {					db::exec("rollback");					db::exec("unlock tables");					return [" 获取钱包信息失败 "];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站外", "status" => $ling]);			}		} else if (($coin["wallet"] == 'wyc') || ($coin["wallet"] == 'asch')) {			$duifang = db::table("user_wallet")->where(['eth' => $user_qianbao["addr"]])->find();			if ($duifang) {				if ($fee <= 0) {					if ($duifang["userid"] == $userid) {						db::exec("rollback");						db::exec("unlock tables");						return ["不能自己给自己转账"];					}				}				if (!db::table("user")->where(["id" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方用户异常"];				}				if (!db::table("user_coin")->where(["userid" => $duifang["userid"]])->find()) {					db::exec("rollback");					db::exec("unlock tables");					return ["对方财产异常"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("user_coin")->where(["userid" => $duifang["userid"]])->setInc($coinname, $mum);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);				$rs[] = db::table("coin_in")->add(["userid" => $duifang["userid"], "coinname" => $coinname, "num" => $mum, "zhuanchu" => $user_wallet[$coinname], "fee" => $ling, "mum" => $mum, "addtime" => time(), "type" => "站内", "status" => 1]);			} else {				if (!$coin["tsb_addr"] || !$coin["dj_mm"]) {					db::exec("rollback");					db::exec("unlock tables");					return ["钱包对接配置异常:wyc"];				}				$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);				$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站外", "status" => $ling]);			}		} else if ($coin["wallet"] == "tsb" || $coin["wallet"] == "newcoin") {			$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);			$rs[] = db::table("coin_out")->add(["userid" => $userid, "num" => $num, "coinname" => $coinname, "username" => $user_qianbao["addr"], "fee" => $fee, "mum" => $mum, "addtime" => time(), "type" => "站外", "status" => 0]);		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["币种类型错误"];		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败"];		}	}	public function out_huakuan()	{		$id = iv("get.id");		if (empty($id)) {			ajax("请选择要操作的数据!");		}		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write,#pre#finan_out write");		$out = db::table("finan_out")->where(["id" => $id])->find();		if ($out["status"] != 0 && $out["status"] != 3) {			ajax("已经处理，禁止再次操作！");		}		$rs = [];		$rs[] = db::table("finan_out")->where(["id" => $out["id"]])->save(["status" => 1, "endtime" => time()]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			ajax("操作成功！", 1);		} else {			db::exec("rollback");			db::exec("unlock tables");			ajax("操作失败！");		}	}	public function out_up($userid = null, $type = null, $num = null, $goole = null, $paypassword = null, $coinname = null)	{		if (!$userid || !check($userid, "d")) {			return ["用户id格式错误"];		}		if (!$type || !check($type, "d")) {			return ["提现地址格式错误"];		}		if (!$num || !check($num, "cny")) {			return ["提现金额格式错误"];		}		if ($goole && !check($goole, "d")) {			return ["谷歌验证码格式错误"];		}		if ($coinname && !check($coinname, "w")) {			return ["币种格式错误"];		}		if (!$paypassword || !check($paypassword, "password")) {			return ["交易密码格式错误"];		}		$out_coin = md('sys_config')->get('out_coin');		$out_coin_fee = md('sys_config')->get('out_coin_fee');		$user = db::table("user")->where(["id" => $userid])->find();		if (!$user) {			return ["用户不存在"];		}		if ($user["paypassword"] != hashs($paypassword)) {			return ["交易密码错误"];		}		if ($goole) {			$google_check_arr = explode("|", $user["google"]);			if (isset($google_check_arr[2]) && $google_check_arr[2] == 1) {				$ga = google::init();				if (!$ga->verifyCode($google_check_arr[0], $goole, 1)) {					db::exec("unlock tables");					return ["谷歌验证失败"];				}			}		}		$out_min = md('sys_config')->get('out_min');		$out_max = md('sys_config')->get('out_max');		$out_bei = md('sys_config')->get('out_bei');		$out_fee = md('sys_config')->get('out_fee');		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#finan_out write , #pre#user_coin  write , #pre#user_bank write ");		$user_bank = db::table("user_bank")->where(["id" => $type])->find();		if (!$user_bank) {			db::exec("unlock tables");			return ["提现地址错误"];		}		if (!$user_bank["coinname"]) {			$user_bank["coinname"] = 'cny';		}		if (($user_bank["coinname"] != $coinname)) {			db::exec("unlock tables");			return ["币种错误"];		}		$user_coin = db::table("user_coin")->where(["userid" => $userid])->find();		if (!$user_coin) {			db::exec("unlock tables");			return ["用户财产错误"];		}		if ($user_coin[$coinname] < $num) {			db::exec("unlock tables");			return ["账户可用余额不足"];		}		if ($out_coin_fee && $out_coin_fee > 0 && $out_coin) {			$out_coin_num = num($num / 100 * $out_coin_fee, 8);			if ($out_coin_num > 0) {				if ($user_coin[$out_coin] < $out_coin_num) {					db::exec("unlock tables");					return ["额外币种余额不足" . $out_coin];				}				if ($out_coin == $coinname && $user_coin[$out_coin] < ($out_coin_num + $num)) {					db::exec("unlock tables");					return ["账户可用余额不足"];				}			}		} else {			$out_coin_num = 0;		}		if ($out_min <= 0) {			$out_min = 1;		}		if ($num < $out_min) {			db::exec("unlock tables");			return ["每次提现金额不能小于" . $out_min];		}		if ($out_max <= 0) {			$out_max = 100000;		}		if ($num > $out_max) {			db::exec("unlock tables");			return ["每次提现金额不能大于" . $out_max];		}		$ling = 0;		if ($out_bei > 0) {			$yushu = $num % $out_bei;			if ($yushu != $ling) {				db::exec("unlock tables");				return ["每次提现金额必须是" . $out_bei . "的整倍数"];			}		}		if ($out_fee > 0) {			$fee = num(($num / 100 * $out_fee), 2);			$mum = num(($num - $fee), 2);		} else {			$fee = 0;			$mum = $num;		}		if ($out_coin_num > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($out_coin, $out_coin_num);		}		$rs[] = db::table("user_coin")->where(["userid" => $userid])->setDec($coinname, $num);		$rs[] = db::table("finan_out")->add(["userid" => $userid, "num" => $num, "name" => $user_bank["name"], "truename" => $user["truename"], "coinname" => $coinname, "bank" => $user_bank["bank"], "bankprov" => $user_bank["bankprov"], "bankcity" => $user_bank["bankcity"], "bankaddr" => $user_bank["bankaddr"], "bankcard" => $user_bank["bankcard"], "out_coin" => $out_coin, "out_coin_fee" => $out_coin_num, "fee" => $fee, "mum" => $mum, "addtime" => time(), "endtime" => time(), "status" => $ling]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["提现申请成功", 1];		} else {			db::exec("rollback");			return ["提现申请失败"];		}	}	public function pay_chexiao($id = null, $userid = null)	{		db::exec("set autocommit=0");		db::exec("lock tables #pre#finan_out write , #pre#user_coin  write");		$out = db::table("finan_out")->where(["id" => $id])->find();		if (!$out) {			return ["提现订单不存在"];		}		if ($userid !== null && $out["userid"] != $userid) {			return ["非法操作"];		}		if ($out["status"] != 0 && $out["status"] != 3) {			return ["订单不能撤销"];		}		if (!isset($out["coinname"])) {			return ["提现币种错误"];		}		$rs = [];		if (isset($out["out_coin"]) && $out["out_coin"] && isset($out["out_coin_fee"]) && $out["out_coin_fee"] > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $out["userid"]])->setInc($out["out_coin"], $out["out_coin_fee"]);		}		$rs[] = db::table("user_coin")->where(["userid" => $out["userid"]])->setInc($out["coinname"], $out["num"]);		$rs[] = db::table("finan_out")->where(["id" => $out["id"]])->save(["status" => 2]);		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["提现撤销成功", 1];		} else {			db::exec("rollback");			return ["提现撤销失败"];		}	}	public function tradeno()	{		while (true) {			$tradeno = substr(str_shuffle("ABCDEFGHIJKLMNPQRSTUVWXYZ"), 0, 2) . substr(str_shuffle(str_repeat("123456789", 4)), 0, 6);			if (!db::table("finan_pay")->where(["tradeno" => $tradeno])->find()) {				return $tradeno;			}		}	}	public function page_coin_in($where = [], $size = 20)	{		$count = db::table("coin_in")->where($where)->count();		$PageObj = new page($count, $size);		$show = $PageObj->show();		$list = db::table("coin_in")->where($where)->order("`id` desc")->limit($PageObj->firstRow, $PageObj->listRows)->select();		return ["list" => $list, "show" => $show];	}	public function movepay($tradeno = null, $num = null, $movepay = null)	{		if (!$movepay && $movepay != md5("movesay")) {			return -1;		}		if (!$tradeno) {			return -2;		} else {			$tradeno = strtoupper($tradeno);		}		if (!$num) {			return -3;		}		$config = md('sys_config')->lists();		$rs = [];		db::exec("set autocommit=0");		db::exec("lock tables #pre#finan_pay write ,#pre#user read ,#pre#user_coin write,#pre#user_invit write");		$finan_pay = db::table("finan_pay")->where(["tradeno" => $tradeno])->find();		if (!$finan_pay) {			db::exec("unlock tables");			return -4;		}		if ($finan_pay["status"] != 0 && $finan_pay["status"] != 3) {			db::exec("unlock tables");			return -5;		}		if ($finan_pay["num"] != $num) {			db::exec("unlock tables");			return -6;		}		$user = db::table("user")->where(["id" => $finan_pay["userid"]])->find();		if (!$user) {			db::exec("unlock tables");			return -7;		}		$user_coin = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->find();		if (!$user_coin) {			db::exec("unlock tables");			return -8;		}		$invit_fee = 0;		$invit_1 = 0;		$invit_2 = 0;		$invit_3 = 0;		if ($config["pay_invit"] && $config["pay_coin"]) {			if ($config["pay_invit_1"] > 0) {				$invit_1 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_1"]), 2);			}			if ($config["pay_invit_2"] > 0) {				$invit_2 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_2"]), 2);			}			if ($config["pay_invit_3"] > 0) {				$invit_3 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_3"]), 2);			}			if ($config["pay_invit_fee"] > 0) {				$invit_fee = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_fee"]), 2);			}		}		$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc("cny", $finan_pay["num"]);		$rs[] = db::table("finan_pay")->where(["id" => $finan_pay["id"]])->save(["status" => 1, "mum" => $finan_pay["num"], "endtime" => time()]);		if ($invit_fee > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc($config["pay_coin"], $invit_fee);			$rs[] = db::table("user_invit")->add(["userid" => $finan_pay["userid"], "invit" => 0, "name" => "充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_fee, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_1 && $user["invit_1"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_1"]])->setInc($config["pay_coin"], $invit_1);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_1"], "invit" => $user["id"], "name" => "一代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_1, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_2 && $user["invit_2"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_2"]])->setInc($config["pay_coin"], $invit_2);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_2"], "invit" => $user["id"], "name" => "二代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_2, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_3 && $user["invit_3"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_3"]])->setInc($config["pay_coin"], $invit_3);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_3"], "invit" => $user["id"], "name" => "三代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_3, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return 1;		} else {			db::exec("rollback");			db::exec("unlock tables");			return -9;		}	}	public static function pay_queren($id = null)	{		if (empty($id)) {			return ["请选择要操作的数据!"];		}		$finan_pay = db::table("finan_pay")->where(["id" => $id])->find();		if ($finan_pay["status"] != 0 && $finan_pay["status"] != 3) {			return ["已经处理，禁止再次操作！"];		}		$user = db::table("user")->where(["id" => $finan_pay["userid"]])->find();		if (!$user) {			return ["用户错误"];		}		$invit_pay_1 = 0;		$invit_pay_2 = 0;		$invit_pay_3 = 0;		$config = md('sys_config')->lists();		if ($finan_pay["num"] < 0) {			return ["金额错误"];		}		if ($config["pay_invit"] && $config["pay_coin"]) {			if ($config["pay_invit_1"] > 0) {				$invit_pay_1 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_1"]), 2);			}			if ($config["pay_invit_2"] > 0) {				$invit_pay_2 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_2"]), 2);			}			if ($config["pay_invit_3"] > 0) {				$invit_pay_3 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_3"]), 2);			}		}		if ($config["pay_invit"] && $config["pay_invit_fee"] && $config["pay_coin"]) {			$fee = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_fee"]), 2);		} else {			$fee = 0;		}		db::exec("set autocommit=0");		db::exec("lock tables #pre#user_coin write,#pre#finan_pay write,#pre#user_invit write");		$finan_pay = db::table("finan_pay")->where(["id" => $id])->find();		if ($finan_pay["status"] != 0 && $finan_pay["status"] != 3) {			db::exec("rollback");			db::exec("unlock tables");			return ["已经处理，禁止再次操作！"];		}		$rs = [];		$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc($finan_pay["coinname"], $finan_pay["num"]);		$rs[] = db::table("finan_pay")->where(["id" => $finan_pay["id"]])->save(["status" => 2, "mum" => $finan_pay["num"], "endtime" => time()]);		if ($fee > 0) {			$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc($config["pay_coin"], $fee);			$rs[] = db::table("finan_pay")->where(["id" => $finan_pay["id"]])->save(["status" => 2, "fee" => $fee, "feecoin" => $config["pay_coin"], "endtime" => time()]);			$rs[] = db::table("user_invit")->add(["userid" => $finan_pay["userid"], "invit" => 0, "name" => "充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $fee, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_pay_1 && $user["invit_1"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_1"]])->setInc($config["pay_coin"], $invit_pay_1);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_1"], "invit" => $user["id"], "name" => "一代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_pay_1, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_pay_2 && $user["invit_2"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_2"]])->setInc($config["pay_coin"], $invit_pay_2);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_2"], "invit" => $user["id"], "name" => "二代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_pay_2, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if ($invit_pay_3 && $user["invit_3"]) {			$rs[] = db::table("user_coin")->where(["userid" => $user["invit_3"]])->setInc($config["pay_coin"], $invit_pay_3);			$rs[] = db::table("user_invit")->add(["userid" => $user["invit_3"], "invit" => $user["id"], "name" => "三代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_pay_3, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["操作成功！", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["操作失败！"];		}	}}