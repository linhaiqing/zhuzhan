<?phpnamespace model;use home\email;use home\safe_alert;use Move\db;use Move\ext\page;use Move\ext\client;class queue extends common{	public function test()	{		$res = db::table("coin")->where(["status" => 1, "wallet" => "gxb", "zr_jz" => 1])->find();		if (!$res) {			return ['没有币种'];		}		if (!$res["dj_zj"] || !$res["dj_dk"] || !$res['dj_mm']) {			return [" 对接参数错误 " . $res["name"]];		}		$gxb = new \ext\coin\gxb($res['dj_zj'], $res['dj_dk'], $res['dj_yh'], $res['dj_mm']);		if (!$gxb) {			return ["链接钱包失败 " . $res["name"]];		}		return $gxb->get_trade_history(10);	}	public function sms_jk()	{		$moble = md('sys_config')->get('qt_moble');		if ($moble) {			db::exec("set autocommit = 0");			db::exec("lock tables #pre#sys_err write");			$res = db::table("sys_err")->where(["name" => "sms", "sms" => 0])->find();			if ($res) {				db::table("sys_err")->where(["sms" => 0])->save(["sms" => 1]);				db::exec("commit");				db::exec("unlock tables");				if (MS_CODE == "95D3A7E98EE9F913B462B87C73DS") {					return ["本地环境 " . $res["id"]];				}				$sms = new \ext\sms();				if ($sms->send("+86|" . $moble, $res["id"], "sms", 'jiankong')) {					return ["短信发送成功", 1];				} else {					return ["短信发送失败"];				}			} else {				db::exec("unlock tables");				return ["没有异常"];			}		}	}	public function yichang_push()	{		$moble = md('sys_config')->get('open_err_push');		if ($moble) {			db::exec("set autocommit = 0");			db::exec("lock tables #pre#sys_err write");			$res = db::table("sys_err")->where(["name" => "sms", "sms" => 0])->find();			if ($res) {				db::table("sys_err")->where(["sms" => 0])->save(["sms" => 1]);				db::exec("commit");				db::exec("unlock tables");				if (MS_CODE == "95D3A7E98EE9F913B462B87C73DS") {					return ["本地环境 " . $res["id"]];				}				$safe = new safe_alert();				$safe->push_err(['title' => $res['title'], 'info' => $res['value'], 'content' => $res['value'], 'tag' => defined('YC_TAG') ? YC_TAG : 'movesay_none']);			} else {				db::exec("unlock tables");				return ["没有异常"];			}		}	}	public function chkMysqlKey()	{		$file = APP_PATH . '/runtime/tmp/chk_mysql_key.lock';		if (file_exists($file)) {			return false;		}		@file_put_contents($file, 'lock');	}	public function trade_stat()	{		$mc = mc("queue_trade_stat");		if (!$mc) {			$mc = [0];		}		$res = db::table("trade_market")->where(["status" => 1, "name#not in" => $mc])->find();		if (!$res) {			mc("queue_trade_stat", null);			return ["不存在市场统计 跳出请求"];		} else {			$mc[] = $res["name"];			mc("queue_trade_stat", $mc);		}		if (mc("queue_trade_stat_time" . $res["name"]) == 1) {			$time = time() - 60 * 60 * 24;		} else {			mc("queue_trade_stat_time" . $res["name"], 1);			$time = time() - 60 * 60 * 24 * 30;		}		$time = strtotime(date('Y-m-d 00:00:00', $time));		for ($i = 1; $i < 31; $i++) {			if (($time + ($i - 1) * 60 * 60 * 24) > time()) {				break;			}			$buy_num = db::table("trade")->where(["market" => $res["name"], "type" => 1, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("num");			if ($buy_num) {				$buy_mum = db::table("trade")->where(["market" => $res["name"], "type" => 1, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("mum");				$buy_fee = db::table("trade")->where(["market" => $res["name"], "type" => 1, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("fee");				$buy_deal = db::table("trade")->where(["market" => $res["name"], "type" => 1, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("deal");			} else {				$buy_mum = '';				$buy_fee = '';				$buy_deal = '';			}			$sell_num = db::table("trade")->where(["market" => $res["name"], "type" => 2, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("num");			if ($sell_num) {				$sell_mum = db::table("trade")->where(["market" => $res["name"], "type" => 2, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("mum");				$sell_fee = db::table("trade")->where(["market" => $res["name"], "type" => 2, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("fee");				$sell_deal = db::table("trade")->where(["market" => $res["name"], "type" => 2, "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("deal");			} else {				$sell_mum = '';				$sell_fee = '';				$sell_deal = '';			}			if ($buy_num || $sell_num) {				$data = json_encode([$buy_num, $sell_num, $buy_mum, $sell_mum, $buy_fee, $sell_fee, $buy_deal, $sell_deal]);				$old = db::table("sys_stats")->where(["name" => "market", "type" => $res["name"], "addtime" => ($time + ($i + 1) * 60 * 60 * 24)])->find();				if ($old) {					db::table("sys_stats")->where(["id" => $old['id']])->set(["data" => $data]);					db::exec("commit");				} else {					db::table("sys_stats")->add(["name" => "market", "type" => $res["name"], "addtime" => ($time + ($i + 1) * 60 * 60 * 24), "data" => $data]);					db::exec("commit");				}			}		}		return [$res["name"] . " 计算成功"];	}	public function tendency()	{		$trade_market = mc('queue_tendency_trade_market');		if (!$trade_market) {			$trade_market = db::table('trade_market')->where(['status' => 1])->select();			mc('queue_tendency_trade_market', $trade_market);		}		if ($trade_market) {			foreach ($trade_market as $k => $v) {				$tendency_time = 4;				$t = time();				$tendency_str = $t - 24 * 60 * 60 * 3;				for ($x = 0; $x <= 18; $x++) {					$na = $tendency_str + 60 * 60 * $tendency_time * $x;					$nb = $tendency_str + 60 * 60 * $tendency_time * ($x + 1);					$b = db::table('trade_log')->where(['market' => $v['name'], 'addtime#>=' => $na, 'addtime#<' => $nb])->max('price');					if (!$b) {						$b = 0;					}					$rs[] = [$na, $b];				}				db::table('trade_market')->where(['name' => $v['name']])->save(['tendency' => json_encode($rs)]);				db::exec("commit");				unset($rs);			}			return ['计算成功', 1];		} else {			return ['没有市场'];		}	}	public function money_lixi()	{		$time = strtotime(date("Y-m-d 23:59:59", strtotime("-1 day")));		db::exec("set autocommit=0");		db::exec("lock tables #pre#money_log write ,#pre#money_fee write ,#pre#user_coin write");		$money_log = db::table('money_log')->where(["status" => 0, "endtime#<" => $time])->limit(5)->select();		if (empty($money_log)) {			return ['暂无项目'];		}		$data = '';		foreach ($money_log as $k => $v) {			$lixi = num($v["num"] * ($v["fee"]) / 100, 8);			if ($lixi <= 0) {				continue;			}			$rs[] = db::table("user_coin")->where(["userid" => $v["userid"]])->setInc($v["feecoin"], $lixi);			$rs[] = db::table("money_log")->where(["id" => $v["id"]])->set(["endtime" => time(), "ci#+" => 1]);			if (($v["ci"] + 1) >= $v["tian"]) {				$rs[] = db::table("money_log")->where(["id" => $v["id"]])->set(["status" => 2]);			}			$rs[] = db::table("money_fee")->add(["userid" => $v["userid"], "money_log_id" => $v["id"], "name" => $v["name"], "num" => $v["num"], "coinname" => $v["coinname"], "feecoin" => $v["feecoin"], "ci" => ($v["ci"] + 1), "tian" => $v["tian"], "lixi" => $lixi, "fee" => $v["fee"], "addtime" => time(), "status" => 1]);			if (check_arr($rs)) {				db::exec("commit");				$rs = [];				$data = $data . '编号' . $v['id'] . '成功;';			} else {				db::exec("rollback");				$rs = [];				$data = $data . '编号' . $v['id'] . '失败;';			}		}		db::exec("unlock tables");		return ["计算完成" . $data, 1];	}	public function market_stat()	{		$mc = mc("queue_market_stat");		if (!$mc) {			$mc = [0];		}		$res = db::table("trade_market")->where(["status" => 1, "name#not in" => $mc])->find();		if (!$res) {			mc("queue_market_stat", null);			return ["不存在市场统计 跳出请求"];		} else {			$mc[] = $res["name"];			mc("queue_market_stat", $mc);		}		if (mc("queue_market_stat_time" . $res["name"]) == 1) {			$time = time() - 60 * 60 * 24;		} else {			$time = time() - 60 * 60 * 24 * 30;			mc("queue_market_stat_time" . $res["name"], 1);		}		$time = strtotime(date('Y-m-d 00:00:00', $time));		for ($i = 1; $i < 31; $i++) {			if (($time + ($i - 1) * 60 * 60 * 24) > time()) {				break;			}			$num = db::table("trade_log")->where(["market" => $res["name"], "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("num");			if ($num) {				$mum = db::table("trade_log")->where(["market" => $res["name"], "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("mum");				$fee_buy = db::table("trade_log")->where(["market" => $res["name"], "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("fee_buy");				$fee_sell = db::table("trade_log")->where(["market" => $res["name"], "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("fee_sell");				$data = json_encode([$num, $mum, $fee_buy, $fee_sell]);				$old = db::table("sys_stats")->where(["name" => "trade_log", "type" => $res["name"], "addtime" => ($time + ($i + 1) * 60 * 60 * 24)])->find();				if ($old) {					db::table("sys_stats")->where(["id" => $old['id']])->set(["data" => $data]);					db::exec("commit");				} else {					db::table("sys_stats")->add(["name" => "trade_log", "type" => $res["name"], "addtime" => ($time + ($i + 1) * 60 * 60 * 24), "data" => $data]);					db::exec("commit");				}			}		}		return [$res["name"] . " 计算成功"];	}	public function reg_stats()	{		$mc = mc("queue_reg_stats");		if (!$mc) {			$mc = 0;		}		$res = db::table("user")->where(["id#>" => $mc])->find();		if (!$res) {			return ["跳出循环"];		} else {			mc("queue_reg_stats", $res["id"]);		}		$star_time = strtotime(date("Y-m-d H:00:00", $res["addtime"]));		$end_time = $star_time + 60 * 60;		$data = db::table("user")->where(["addtime#>=" => $star_time, "addtime#<" => $end_time])->count();		if (!$data) {			return ["出现错误"];		}		$fee = db::table("user_invit")->where(["type" => "注册赠送", "addtime#>=" => $star_time, "addtime#<" => $end_time])->sum("fee");		if (!$fee) {			$fee = 0;		}		$old = db::table("sys_stats")->where(["name" => "reg", "addtime" => $end_time])->find();		if ($old) {			db::table("sys_stats")->where(["name" => "reg", "addtime" => $end_time])->save(["data" => $data, "fee" => $fee]);		} else {			db::table("sys_stats")->add(["name" => "reg", "addtime" => $end_time, "data" => $data, "fee" => $fee]);		}		return ["计算成功", 1];	}	public function finan_pay()	{		$mc = mc("queue_finan_pay");		if (!$mc) {			$mc = 0;		}		$res = db::table("finan_pay")->where(["status#in" => [1, 2], "id#>" => $mc])->find();		if (!$res) {			return ["没有新的订单"];		} else {			mc("queue_finan_pay", $res["id"]);		}		$star_time = strtotime(date("Y-m-d H:00:00", $res["addtime"]));		$end_time = $star_time + 60 * 60;		$data = db::table("finan_pay")->where(["status#in" => [1, 2], "addtime#>=" => $star_time, "addtime#<" => $end_time])->sum("num");		if (!$data) {			return ["没有区间数据"];		}		$fee = db::table("finan_pay")->where(["status#in" => [1, 2], "addtime#>=" => $star_time, "addtime#<" => $end_time])->sum("fee");		if (!$fee) {			$fee = 0;		}		$old = db::table("sys_stats")->where(["name" => "pay", "addtime" => $end_time])->find();		if ($old) {			db::table("sys_stats")->where(["name" => "pay", "addtime" => $end_time])->save(["data" => $data, "fee" => $fee]);		} else {			db::table("sys_stats")->add(["name" => "pay", "addtime" => $end_time, "data" => $data, "fee" => $fee]);		}		return ["计算成功", 1];	}	public function finan_out()	{		$mc = mc("queue_finan_out");		if (!$mc) {			$mc = 0;		}		$res = db::table("finan_out")->where(["status" => 1, "id#>" => $mc])->find();		if (!$res) {			mc("queue_finan_out", $mc);			return ["没有数据"];		} else {			mc("queue_finan_out", $res["id"]);		}		$star_time = strtotime(date("Y-m-d H:00:00", $res["addtime"]));		$end_time = $star_time + 60 * 60;		$data = db::table("finan_out")->where(["status" => 1, "addtime#>=" => $star_time, "addtime#<" => $end_time])->sum("num");		if (!$data) {			return ["出现错误"];		}		$fee = db::table("finan_out")->where(["status" => 1, "addtime#>=" => $star_time, "addtime#<" => $end_time])->sum("fee");		if (!$fee) {			$fee = 0;		}		$old = db::table("sys_stats")->where(["name" => "out", "addtime" => $end_time])->find();		if ($old) {			db::table("sys_stats")->where(["name" => "out", "addtime" => $end_time])->save(["data" => $data, "fee" => $fee]);		} else {			db::table("sys_stats")->add(["name" => "out", "addtime" => $end_time, "data" => $data, "fee" => $fee]);		}		return ["计算成功"];	}	public function coin_stats()	{		$star_time = strtotime(date("Y-m-d H:00:00"));		$end_time = $star_time + 60 * 60;		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		if (!$coin_list) {			return ["没有币种"];		}		foreach ($coin_list as $k => $v) {			$sun_user_coin_c = db::table("user_coin")->sum($v["name"]);			$sun_user_coin_d = db::table("user_coin")->sum($v["name"] . "d");			if ($sun_user_coin_c <= 0 && $sun_user_coin_d <= 0) {				continue;			}			$sun_user_coin_z = num(($sun_user_coin_c + $sun_user_coin_d), 8);			$data = json_encode([$sun_user_coin_c, $sun_user_coin_d, $sun_user_coin_z]);			$old = db::table("sys_stats")->where(["name" => "user_coin", "type" => $v["name"], "addtime" => $end_time])->find();			if ($old) {				db::table("sys_stats")->where(["name" => "user_coin", "type" => $v["name"], "addtime" => $end_time])->save(["data" => $data]);			} else {				db::table("sys_stats")->add(["name" => "user_coin", "type" => $v["name"], "addtime" => $end_time, "data" => $data]);			}		}		return ["计算成功", 1];	}	public function pay_eyuyan()	{		$cunzai = db::query("SHOW TABLES LIKE 'move_finan_eyuyan';");		if (isset($cunzai[0])) {			$res_arr = db::table('finan_eyuyan')->where(['status' => 0])->select();			$config = md('sys_config')->lists();			if ($res_arr && is_array($res_arr)) {				$rs = [];				db::exec("set autocommit=0");				db::exec("lock tables #pre#finan_pay write ,#pre#user read ,#pre#user_coin write,#pre#user_invit write,#pre#finan_eyuyan write");				foreach ($res_arr as $k => $v) {					$tardeNo = substr($v['tradeno'], -8);					if ($v['type'] == 'tenpay' && $tardeNo == '') {						$remark = substr($v['remark'], -4);						$dingdan = db::table('finan_pay')->where(['num' => $v['num'], 'type' => $v['type'], 'remark' => $remark])->find();						if ($dingdan) {							if ($dingdan['status'] == 0 || $dingdan['status'] == 3) {								db::table('finan_eyuyan')->where(['id' => $v['id']])->set(['tradeno' => $tardeNo]);								db::exec("commit");							}						}					}					$finan_pay = db::table('finan_pay')->where(['num' => $v['num'], 'type' => $v['type'], 'tradeno' => $tardeNo])->find();					if ($finan_pay) {						if ($finan_pay['status'] == 0 || $finan_pay['status'] == 3) {							$user = db::table("user")->where(["id" => $finan_pay["userid"]])->find();							if (!$user) {								continue;							}							$user_coin = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->find();							if (!$user_coin) {								continue;							}							$invit_fee = 0;							$invit_1 = 0;							$invit_2 = 0;							$invit_3 = 0;							if (isset($config["pay_invit"]) && $config["pay_invit"] && isset($config["pay_coin"]) && $config["pay_coin"]) {								if ($config["pay_invit_1"] > 0) {									$invit_1 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_1"]), 2);								}								if ($config["pay_invit_2"] > 0) {									$invit_2 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_2"]), 2);								}								if ($config["pay_invit_3"] > 0) {									$invit_3 = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_3"]), 2);								}								if ($config["pay_invit_fee"] > 0) {									$invit_fee = num((floor($finan_pay["num"]) / 100 * $config["pay_invit_fee"]), 2);								}							}							$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc("cny", $finan_pay["num"]);							$rs[] = db::table("finan_pay")->where(["id" => $finan_pay["id"]])->save(["status" => 1, "mum" => $finan_pay["num"], "endtime" => time()]);							$rs[] = db::table('finan_eyuyan')->where(['id' => $v['id']])->set(['endtime' => time(), 'status' => 1, 'userid' => $finan_pay["userid"]]);							if (isset($config["pay_coin"]) && $invit_fee > 0 && $config["pay_coin"]) {								$rs[] = db::table("user_coin")->where(["userid" => $finan_pay["userid"]])->setInc($config["pay_coin"], $invit_fee);								$rs[] = db::table("user_invit")->add(["userid" => $finan_pay["userid"], "invit" => 0, "name" => "充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_fee, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);							}							if (isset($config["pay_coin"]) && $invit_1 && $user["invit_1"] && $config["pay_coin"]) {								$rs[] = db::table("user_coin")->where(["userid" => $user["invit_1"]])->setInc($config["pay_coin"], $invit_1);								$rs[] = db::table("user_invit")->add(["userid" => $user["invit_1"], "invit" => $user["id"], "name" => "一代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_1, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);							}							if (isset($config["pay_coin"]) && $invit_2 && $user["invit_2"] && $config["pay_coin"]) {								$rs[] = db::table("user_coin")->where(["userid" => $user["invit_2"]])->setInc($config["pay_coin"], $invit_2);								$rs[] = db::table("user_invit")->add(["userid" => $user["invit_2"], "invit" => $user["id"], "name" => "二代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_2, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);							}							if (isset($config["pay_coin"]) && $invit_3 && $user["invit_3"] && $config["pay_coin"]) {								$rs[] = db::table("user_coin")->where(["userid" => $user["invit_3"]])->setInc($config["pay_coin"], $invit_3);								$rs[] = db::table("user_invit")->add(["userid" => $user["invit_3"], "invit" => $user["id"], "name" => "三代充值赠送", "type" => "充值赠送", "num" => $finan_pay["num"], "fee" => $invit_3, "feecoin" => $config["pay_coin"], "addtime" => time(), "status" => 1]);							}						}					}				}				if (check_arr($rs)) {					db::exec("commit");					db::exec("unlock tables");					return ['存在数据,处理成功.' . implode('|', $rs), 1];				} else {					db::exec("rollback");					db::exec("unlock tables");					return ['存在数据,处理失败'];				}			} else {				return ['没有数据'];			}		} else {			return ['不存在'];		}	}	public function coin_in_gxb()	{		$res = db::table("coin")->where(["status" => 1, "wallet" => "gxb", "zr_jz" => 1])->find();		if (!$res) {			return ['没有币种'];		}		if (!$res["dj_zj"] || !$res["dj_dk"] || !$res['dj_mm']) {			return [" 对接参数错误 " . $res["name"]];		}		$gxb = new \ext\coin\gxb($res['dj_zj'], $res['dj_dk'], $res['dj_yh'], $res['dj_mm']);		if (!$gxb) {			return ["链接钱包失败 " . $res["name"]];		}		$wallet_msg = $gxb->get_id();		if (!isset($wallet_msg['id'])) {			return ["获取钱包id失败，" . $res["name"]];		}		$trade_arr = $gxb->get_trade_history(10);		$log = $res["name"] . "转入";		$trade_log = [];		foreach ($trade_arr as $k => $v) {			if ($v['op']['op'][0] == 0 && isset($v['op']['op'][1]['to']) && $v['op']['op'][1]['to'] == $wallet_msg['id']) {				$money_type = $v['op']['op'][1]['amount']['asset_id'];				if ($money_type != "1.3.1") {					continue;				}				$num = $v['op']['op'][1]['amount']['amount'] / 100000;				$fee = $v['op']['op'][1]['fee']['amount'] / 100000;				$block_msg = $gxb->get_block($v['op']['block_num']);				$trade_id = $block_msg['transaction_ids'][$v['op']['trx_in_block']];				$isFound = db::table('coin_in')->where(['txid' => $trade_id])->find();				if (!$isFound) {					$trade_log[] = 1;					$memo = $v['memo'];					$existUser = db::table('user')->where(['id' => $memo])->find();					$rs = [];					db::exec("set autocommit = 0");					db::exec("lock tables #pre#coin_in write,#pre#user_coin write");					$userid = 0;					if ($existUser) {						$userid = $existUser['id'];						$rs[] = db::table("user_coin")->where(["userid" => $existUser["id"]])->setInc($res["name"], $num);					}					$rs[] = db::table("coin_in")->add(["userid" => $userid, "coinname" => $res["name"], "zhuanchu" => "", "txid" => $trade_id, "desc" => $userid == 0 ? "站外转入,缺少memo,站外账号id为:" . $v['op']['op'][1]['from'] : "", "queren" => 0, "num" => $num, "mum" => $num, "fee" => $fee, "addtime" => time(), "type" => "站外", "status" => 1]);					if (check_arr($rs)) {						db::exec("commit");						db::exec("unlock tables");						$log .= '|成功' . $userid;					} else {						db::exec("rollback");						db::exec("unlock tables");						$log .= '|失败' . $userid;					}				} else {					$trade_log[] = 0;				}			}		}		return [$log . implode(",", $trade_log), 1];	}	public function coin_out_gxb()	{		$res = db::table("coin")->where(["status" => 1, "wallet" => "gxb", "zr_jz" => 1])->find();		if (!$res) {			return ['没有币种'];		}		if (!$res["dj_zj"] || !$res["dj_dk"] || !$res['dj_mm']) {			return [" 对接参数错误 " . $res["name"]];		}		$gxb = new \ext\coin\gxb($res['dj_zj'], $res['dj_dk'], $res['dj_yh'], $res['dj_mm']);		if (!$gxb) {			return ["链接钱包失败 " . $res["name"]];		}		$wallet_msg = $gxb->get_id();		if (!isset($wallet_msg['id'])) {			return ["获取钱包id失败，" . $res["name"]];		}		$mc = mc("queue_coin_out_gxb");		if (!$mc) {			$mc = [0];		}		if (count($mc) > 20) {			mc("queue_coin_out_gxb", null);			return ["超出次数"];		}		$rs = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_out write");		$coin_out_queue = db::table("coin_out")->where(["status#in" => [0, 2], "type" => "站外", "id#not in" => $mc])->find();		if (!$coin_out_queue) {			mc("queue_coin_out_gxb", null);			db::exec("rollback");			db::exec("unlock tables");			return ["不存在订单"];		}		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		$coin = $coin_list[$coin_out_queue["coinname"]];		if (!$coin || $coin["wallet"] != "gxb" || $coin["zc_jz"] != 1 || $coin["status"] != 1) {			db::exec("rollback");			db::exec("unlock tables");			return ["币种类型错误"];		}		if (isset($coin["zc_zd"]) && $coin["zc_zd"]) {			if (isset($coin_out_queue["mum"]) && $coin_out_queue["mum"] > $coin["zc_zd"]) {				if (isset($coin_out_queue["status"]) && $coin_out_queue["status"] != 2) {					$mc[] = $coin_out_queue["id"];					mc("queue_coin_out_eth", $mc);					db::exec("rollback");					db::exec("unlock tables");					return ["币种没有审核"];				}			}		}		$duijie_success = $gxb->check_success();		if (!$duijie_success) {			db::exec("rollback");			db::exec("unlock tables");			return ["账户异常"];		}		$balance = @$gxb->get_balance()[0]['amount'] / 100000;		if (!$balance || $balance < $coin_out_queue['mum']) {			db::exec("rollback");			db::exec("unlock tables");			return ["系统钱包余额不足"];		}		$jg = db::table("coin_out")->where(["id" => $coin_out_queue["id"]])->save(["status" => 1]);		if ($jg) {			db::exec("commit");			db::exec("unlock tables");			if (db::table("coin_out")->where(["id" => $coin_out_queue["id"], "status" => 1])->find()) {				$rs = $gxb->send_coin($coin_out_queue['username'], $coin_out_queue['mum']);				if (!$rs) {					$rs = "自动转出命令返回失败，请去钱包核对是否实际已经发送";				}				$txid = isset($rs[0]) ? $rs[0] : "自动转出命令返回失败，请去钱包核对是否实际已经发送";				db::table("coin_out")->where(["id" => $coin_out_queue["id"]])->save(["txid" => $txid, "status" => 1]);				db::exec("commit");				return ["成功处理  币种 " . $coin_out_queue["coinname"] . "订单号" . $coin_out_queue["id"]];			}		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["状态更新失败"];		}	}	public function coin_zidong()	{		$mc = mc("queue_coin_zidong");		if (!$mc) {			$mc = [0];		}		$res = db::table("coin")->where(["status" => 1, "wallet" => "qbb", "zr_jz" => 1, "id#not in" => $mc])->find();		if (!$res) {			mc("queue_coin_zidong", null);			return ["不存在钱包币" . json_encode($mc)];		}		$mc[] = $res["id"];		mc("queue_coin_zidong", $mc);		if (!$res["dj_yh"] || !$res["dj_mm"] || !$res["dj_zj"] || !$res["dj_dk"]) {			return ["对接参数错误 " . $res["name"]];		}		$client = new client($res["dj_yh"], $res["dj_mm"], $res["dj_zj"], $res["dj_dk"], 10, [], 1);		if (!$client) {			return ["链接钱包失败 " . $res["name"]];		}		$getinfo = @$client->execute("getinfo");		if (!$getinfo) {			return ["获取钱包信息失败 " . $res["name"]];		}		if (!isset($getinfo["version"]) || !$getinfo["version"]) {			return ["获取钱包版本失败 " . $res["name"]];		}		$listtransactions = $client->execute("listtransactions", ["*", 20, 0]);		if (!$listtransactions) {			$listtransactions = $client->execute("listtransactions", ["*", 3, 0]);			if (!$listtransactions) {				return ["获取交易记录失败  " . $res["name"]];			}		}		krsort($listtransactions);		$rs = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_in write,#pre#user_coin write,#pre#user_wallet write,#pre#coin_out write");		$bu_cun_zai = mc(md5($res["name"] . 'bu_cun_zai'));		if (!$bu_cun_zai) {			$bu_cun_zai = [];		}		foreach ($listtransactions as $k => $v) {			if (!$v["account"]) {				continue;			}			if (!$v["address"]) {				continue;			}			$user_wallet = db::table("user_wallet")->where([$res["name"] => $v["address"]])->find();			if (!$user_wallet || !$user_wallet["userid"]) {				$bu_cun_zai[] = $v["address"];				mc(md5($res["name"] . 'bu_cun_zai'), $bu_cun_zai);				continue;			}			if ($v["category"] == "receive") {				if ($v["amount"] <= 0) {					continue;				}				if ($res["zr_dz"] < 1) {					$res["zr_dz"] = 1;				}				$qq = db::table("coin_in")->where(["coinname" => $res["name"], "txid" => $v["txid"]])->find();				if ($qq && $qq["status"] == 1) {					continue;				}				if ($v["confirmations"] < $res["zr_dz"]) {					if ($qq) {						$rs[] = db::table("coin_in")->where(["id" => $qq["id"]])->save(["queren" => $v["confirmations"]]);					} else {						$rs[] = db::table("coin_in")->add(["userid" => $user_wallet["userid"], "coinname" => $res["name"], "zhuanchu" => "", "txid" => $v["txid"], "queren" => $v["confirmations"], "num" => $v["amount"], "mum" => $v["amount"], "fee" => 0, "addtime" => time(), "type" => "站外", "status" => 0]);					}				} else {					$rs[] = db::table("user_coin")->where(["userid" => $user_wallet["userid"]])->setInc($res["name"], $v["amount"]);					if ($qq) {						$rs[] = db::table("coin_in")->where(["id" => $qq["id"]])->save(["queren" => $res["zr_dz"], "status" => 1]);					} else {						$rs[] = db::table("coin_in")->add(["userid" => $user_wallet["userid"], "coinname" => $res["name"], "zhuanchu" => "", "txid" => $v["txid"], "queren" => $res["zr_dz"], "num" => $v["amount"], "mum" => $v["amount"], "fee" => 0, "addtime" => time(), "type" => "站外", "status" => 1]);					}				}			}			if ($v["category"] == "send") {			}		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			return ["成功 查询币种 " . $res["name"], 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["失败 查询币种 " . $res["name"]];		}	}	public static function hangqingtu($name = null)	{		if ($name) {			$market = db::table("trade_market")->where(["name" => $name])->find();		} else {			$mc = mc("queue_hangqingtu");			if (!is_array($mc)) {				$mc = [0];			}			$market = db::table("trade_market")->where(["status" => 1, "name#not in" => $mc])->find();			if (!$market) {				mc("queue_hangqingtu", null);				$market = db::table("trade_market")->where(["status" => 1])->find();			} else {				$mc[] = $market["name"];				mc("queue_hangqingtu", $mc);			}		}		if (!$market) {			return ["没有市场"];		}		$time_arr = [1, 3, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 10080];		foreach ($time_arr as $v) {			$res = db::table("trade_json")->where(["market" => $market["name"], "type" => $v, "data#!=" => ""])->order("id desc")->find();			if ($res) {				$ncc = db::table("trade_json")->where(["market" => $market["name"], "type" => $v, "data" => ""])->find();				if ($ncc && $ncc["addtime"] > $res["addtime"]) {					$res = $ncc;				}			}			if (!$res) {				$res = db::table("trade_log")->where(["market" => $market["name"]])->find();			}			if (!$res) {				continue;			}			if ($v == 1) {				$start_time = strtotime(date("Y-m-d H:i", $res["addtime"]) . ":00");			} else {				$start_time = mktime(date("H", $res["addtime"]), (floor(date("i", $res["addtime"]) / $v) * $v), 0, date("m", $res["addtime"]), date("d", $res["addtime"]), date("Y", $res["addtime"]));			}			for ($x = 0; $x <= 5; $x++) {				$na = $start_time + 60 * $v * $x;				$nb = $start_time + 60 * $v * ($x + 1);				if ($na > time()) {					continue;				}				$num = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $na, "addtime#<" => $nb])->sum("num");				if ($num) {					$sta = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $na, "addtime#<" => $nb])->order("id asc")->find("price");					$max = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $na, "addtime#<" => $nb])->max("price");					$min = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $na, "addtime#<" => $nb])->min("price");					$end = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $na, "addtime#<" => $nb])->order("id desc")->find("price");					$d = [$na, $num, $sta, $max, $min, $end];					$tmp = db::table("trade_json")->where(["market" => $res["market"], "type" => $v, "addtime" => $na])->find();					if ($tmp) {						db::table("trade_json")->where(["id" => $tmp["id"]])->save(["data" => json_encode($d)]);					} else {						db::table("trade_json")->add(["market" => $res["market"], "data" => json_encode($d), "addtime" => $na, "type" => $v]);					}				} else {					$nc = db::table("trade_log")->where(["market" => $res["market"], "addtime#>=" => $nb, "addtime#<=" => time()])->order("id asc")->find();					if ($nc) {						$na = ($nc["addtime"]);					}					$tmp = db::table("trade_json")->where(["market" => $res["market"], "type" => $v, "data" => ""])->find();					if ($tmp) {						db::table("trade_json")->where(["id" => $tmp["id"]])->save(["addtime" => $na]);						db::exec("commit");					} else {						db::table("trade_json")->add(["market" => $res["market"], "addtime" => $na, "data" => "", "type" => $v]);						db::exec("commit");					}				}			}		}		mc('trade_ordinary_json' . $market["name"] . "5", null);		mc('trade_ordinary_json' . $market["name"] . "15", null);		mc('trade_ordinary_json' . $market["name"] . "30", null);		mc('trade_ordinary_json' . $market["name"] . "60", null);		mc('trade_ordinary_json' . $market["name"] . "360", null);		mc('trade_kline_h_kline_json' . $market["name"] . "5", null);		mc('trade_kline_h_kline_json' . $market["name"] . "15", null);		mc('trade_kline_h_kline_json' . $market["name"] . "30", null);		mc('trade_kline_h_kline_json' . $market["name"] . "60", null);		mc('trade_kline_h_kline_json' . $market["name"] . "360", null);		return [$market["name"] . " 计算成功", 1];	}	public static function dongjieyichang()	{		$mc = [];		$mc = mc("queue_dongjieyichang");		if (!$mc) {			$mc = [0];		}		if (count($mc) > 30) {			mc("queue_dongjieyichang", null);			return ["跳出循环"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#trade write,#pre#user_coin write");		$res = [];		$res = db::table("trade")->where(["status" => 0, "id#not in" => $mc])->find();		if (!$res) {			db::exec("unlock tables");			mc("queue_dongjieyichang", null);			return ["没有订单"];		} else {			$mc[] = $res["id"];			mc("queue_dongjieyichang", $mc);		}		$market_arr = [];		$market_arr = explode("_", $res["market"]);		$xnb = $market_arr[0];		$rmb = $market_arr[1];		if ($res["type"] == 1) {			$dongjie_coin = $rmb;			$dongjie_num = num(($res["mum"] - $res["deal"] * $res["price"] - $res["deal"] / $res["num"] * $res["fee"]), 8);			return ["id:" + $res['id'] + ", dongjie_num:" + $dongjie_num];		} elseif ($res["type"] == 2) {			$dongjie_coin = $xnb;			$dongjie_num = num(($res["num"] - $res["deal"]), 8);		} else {			db::exec("unlock tables");			return ["有订单异常"];		}		if (!$dongjie_coin) {			db::exec("unlock tables");			return ["市场币种错误"];		}		$rs = [];		if ($dongjie_num > 0) {			$user_coin = db::table("user_coin")->where(["userid" => $res["userid"]])->find();			if (num($user_coin[$dongjie_coin . "d"], 8) < num($dongjie_num, 8)) {				$rs[] = db::table("sys_err")->add(["name" => "trade", "value" => "检查到冻结资金异常 ，进行  错误撤单处理  订单号" . $res["id"]]);				if ($user_coin[$dongjie_coin . "d"] > 0) {					$zhi = 0;					$rs[] = db::table("user_coin")->where(["userid" => $res["userid"]])->save([$dongjie_coin . "#+" => $user_coin[$dongjie_coin . "d"], $dongjie_coin . "d" => $zhi]);				}				$rs[] = db::table("trade")->where(["id" => $res["id"]])->save(["status" => 2]);			}		} else {			$rs[] = db::table("sys_err")->add(["name" => "trade", "value" => "检查到订单异常 ，更新为已经成交状态 订单号" . $res["id"]]);			$rs[] = db::table("trade")->where(["id" => $res["id"]])->save(["status" => 1]);		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_dongjieyichang", $mc);			return [$res["market"] . "计算成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			db::table("sys_err")->add(["name" => "dongjieyichang", "value" => "用户冻结资金异常" . $res["id"]]);			$mc[] = $res["id"];			mc("queue_dongjieyichang", $mc);			return [$res["market"] . "计算失败"];		}	}	public static function buy_price_sell($name = null)	{		$market = [];		$mc = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#trade write , #pre#trade_log write ,  #pre#trade_market write ");		if ($name) {			$market = db::table("trade_market")->where(["name" => $name])->find();		} else {			$mc = mc("buy_price_sell");			if (!is_array($mc)) {				$mc = [0];			}			$market = db::table("trade_market")->where(["name#not in" => $mc])->find();			if (!$market) {				mc("buy_price_sell", null);				$market = db::table("trade_market")->find();			}		}		if ($market) {			$mc[] = $market["name"];			mc("buy_price_sell", $mc);		} else {			mc("buy_price_sell", null);			db::exec("unlock tables");			return false;		}		$ling = 0;		$new_price = db::table("trade_log")->where(["market" => $market["name"], "status" => 1])->order("id desc")->find("price");		$buy_price = db::table("trade")->where(["type" => 1, "market" => $market["name"], "status" => $ling])->max("price");		$sell_price = db::table("trade")->where(["type" => 2, "market" => $market["name"], "status" => $ling])->min("price");		$min_price = db::table("trade_log")->where(["market" => $market["name"], "addtime#>" => (time() - (60 * 60 * 24))])->min("price");		$max_price = db::table("trade_log")->where(["market" => $market["name"], "addtime#>" => (time() - (60 * 60 * 24))])->max("price");		$volume = db::table("trade_log")->where(["market" => $market["name"], "addtime#>" => (time() - (60 * 60 * 24))])->sum("num");		$kai_price = db::table("trade_log")->where(["market" => $market["name"], "status" => 1, "addtime#>" => strtotime(date("Y-m-d 00:00:00"))])->order("id asc")->find("price");		$shou_price = db::table("trade_log")->where(["market" => $market["name"], "status" => 1, "addtime#<" => (strtotime(date("Y-m-d 00:00:00")))])->order("id desc")->find("price");		$up_Data = [];		if ($market["new_price"] != $new_price) {			$up_Data["new_price"] = $new_price;		}		if ($market["buy_price"] != $buy_price) {			$up_Data["buy_price"] = $buy_price;		}		if ($market["sell_price"] != $sell_price) {			$up_Data["sell_price"] = $sell_price;		}		if ($market["min_price"] != $min_price) {			$up_Data["min_price"] = $min_price;		}		if ($market["max_price"] != $max_price) {			$up_Data["max_price"] = $max_price;		}		if ($market["volume"] != $volume) {			$up_Data["volume"] = $volume;		}		if ($market["kai_price"] != $kai_price) {			$up_Data["kai_price"] = $kai_price;		}		if ($market["shou_price"] != $shou_price) {			$up_Data["shou_price"] = $shou_price;		}		if ($up_Data) {			db::table("trade_market")->where(["name" => $market["name"]])->save($up_Data);			db::exec("commit");			db::exec("unlock tables");		} else {			db::exec("rollback");			db::exec("unlock tables");		}	}	public static function coin_out_zidong()	{		$mc = mc("queue_coin_out_zidong");		if (!$mc) {			$mc = [0];		}		if (count($mc) > 20) {			mc("queue_coin_out_zidong", null);			return ["超出次数"];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_out write");		$res = db::table("coin_out")->where(["status#in" => [0, 2], "type" => "站外", "id#not in" => $mc])->find();		if (!$res) {			db::exec("unlock tables");			mc("queue_coin_out_zidong", null);			return ["不存在订单"];		}		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		$coin = $coin_list[$res["coinname"]];		if (!$coin || $coin["wallet"] != "qbb" || $coin["zc_jz"] != 1 || $coin["status"] != 1) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["币种类型错误"];		}		if (isset($coin["zc_zd"]) && $coin["zc_zd"]) {			if (isset($res["mum"]) && $res["mum"] > $coin["zc_zd"]) {				if (isset($res["status"]) && $res["status"] != 2) {					db::exec("unlock tables");					$mc[] = $res["id"];					mc("queue_coin_out_zidong", $mc);					return ["币种没有审核"];				}			}		}		if (!$coin["dj_yh"] || !$coin["dj_mm"] || !$coin["dj_zj"] || !$coin["dj_dk"]) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["钱包对接参数异常"];		}		$client = new client($coin["dj_yh"], $coin["dj_mm"], $coin["dj_zj"], $coin["dj_dk"], 5, [], 1);		if (!$client) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["钱包对接异常"];		}		$getinfo = [];		$getinfo = $client->execute("getinfo");		if (!$getinfo) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["钱包信息异常"];		}		if (!isset($getinfo["version"]) || !$getinfo["version"]) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["钱包版本异常"];		}		if (!isset($getinfo["balance"]) || $getinfo["balance"] < $res["mum"]) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["钱包余额不足"];		}		$jg = db::table("coin_out")->where(["id" => $res["id"]])->save(["status" => 1]);		if ($jg) {			db::exec("commit");			db::exec("unlock tables");			if (db::table("coin_out")->where(["id" => $res["id"], "status" => 1])->find()) {				if (isset($coin["dj_jm"]) && $coin["dj_jm"]) {					$client->execute("walletpassphrase", [$coin["dj_jm"], 600]);				}				$rs = $client->execute("sendtoaddress", [$res["username"], floatval($res["mum"])]);				if (!$rs) {					$rs = "自动转出命令返回失败，请去钱包核对是否实际已经发送";				}				db::table("coin_out")->where(["id" => $res["id"]])->save(["txid" => $rs, "status" => 1]);				db::exec("commit");				return ["成功处理  币种 " . $res["coinname"] . "订单号" . $res["id"]];			}		} else {			db::exec("rollback");			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_zidong", $mc);			return ["状态更新失败"];		}	}	public static function trade()	{		$time = strtotime(date("Y-m-d H:00:00"));		$market_list = [];		$market_list = db::table("trade_market")->select();		if ($market_list) {			$old = [];			$data = [];			foreach ($market_list as $v) {				$old = db::table("sys_stats")->where(["name" => "market", "addtime#<" => $time])->order("id desc")->find();				if ($old) {					$buy_num = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("num");					$sell_num = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("num");					$buy_mum = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("mum");					$sell_mum = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("mum");					$buy_fee = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("fee");					$sell_fee = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("fee");					$buy_deal = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("deal");					$sell_deal = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("deal");				} else {					$buy_num = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#<" => $time])->sum("num");					$sell_num = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#<" => $time])->sum("num");					$buy_mum = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#<" => $time])->sum("mum");					$sell_mum = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#<" => $time])->sum("mum");					$buy_fee = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#<" => $time])->sum("fee");					$sell_fee = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#<" => $time])->sum("fee");					$buy_deal = db::table("trade")->where(["market" => $v["name"], "type" => 1, "addtime#<" => $time])->sum("deal");					$sell_deal = db::table("trade")->where(["market" => $v["name"], "type" => 2, "addtime#<" => $time])->sum("deal");				}				$data = json_encode([$buy_num, $sell_num, $buy_mum, $sell_mum, $buy_fee, $sell_fee, $buy_deal, $sell_deal]);				if ($buy_num || $sell_num) {					$stats = [];					$stats = db::table("sys_stats")->where(["name" => "market", "type" => $v["name"], "addtime" => $time])->find();					if ($stats) {						db::table("sys_stats")->where(["name" => "market", "type" => $v["name"], "addtime" => $time])->save(["data" => $data]);					} else {						db::table("sys_stats")->add(["name" => "market", "type" => $v["name"], "addtime" => $time, "data" => $data]);					}				}			}			return ["计算成功", 1];		} else {			return ["没有市场"];		}	}	public static function coin_in()	{		$time = strtotime(date("Y-m-d H:00:00"));		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		if ($coin_list) {			foreach ($coin_list as $v) {				$old = db::table("sys_stats")->where(["name" => "coin_in", "type" => $v["name"], "addtime#<" => $time])->order("id desc")->find();				if ($old) {					$data = db::table("coin_in")->where(["status" => 1, "coinname" => $v["name"], "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("num");					$fee = db::table("coin_in")->where(["status" => 1, "coinname" => $v["name"], "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("fee");				} else {					$data = db::table("coin_in")->where(["status" => 1, "coinname" => $v["name"], "addtime#<" => $time])->sum("num");					$fee = db::table("coin_in")->where(["status" => 1, "coinname" => $v["name"], "addtime#<" => $time])->sum("fee");				}				if ($data) {					$stats = db::table("sys_stats")->where(["name" => "coin_in", "type" => $v["name"], "addtime" => $time])->find();					if ($stats) {						db::table("sys_stats")->where(["name" => "coin_in", "type" => $v["name"], "addtime" => $time])->save(["data" => $data, "fee" => $fee]);					} else {						db::table("sys_stats")->add(["name" => "coin_in", "type" => $v["name"], "addtime" => $time, "data" => $data, "fee" => $fee]);					}				}			}			return ["计算成功", 1];		} else {			return ["没有币种"];		}	}	public static function coin_out()	{		$time = strtotime(date("Y-m-d H:00:00"));		$coin_list = [];		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		if ($coin_list) {			foreach ($coin_list as $v) {				$old = [];				$old = db::table("sys_stats")->where(["name" => "coin_out", "type" => $v["name"], "addtime#<" => $time])->order("id desc")->find();				$fee = 0;				if ($old) {					$data = db::table("coin_out")->where(["status" => 1, "coinname" => $v["name"], "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("num");					$fee = db::table("coin_out")->where(["status" => 1, "coinname" => $v["name"], "addtime#>=" => $old["addtime"], "addtime#<" => $time])->sum("fee");				} else {					$data = db::table("coin_out")->where(["status" => 1, "coinname" => $v["name"], "addtime#<" => $time])->sum("num");					$fee = db::table("coin_out")->where(["status" => 1, "coinname" => $v["name"], "addtime#<" => $time])->sum("fee");				}				if ($data) {					$stats = [];					$stats = db::table("sys_stats")->where(["name" => "coin_out", "type" => $v["name"], "addtime" => $time])->find();					if ($stats) {						return db::table("sys_stats")->where(["name" => "coin_out", "type" => $v["name"], "addtime" => $time])->save(["data" => $data, "fee" => $fee]);					} else {						return db::table("sys_stats")->add(["name" => "coin_out", "type" => $v["name"], "addtime" => $time, "data" => $data, "fee" => $fee]);					}				}			}			return ["计算成功", 1];		} else {			return ["没有币种"];		}	}	public static function dongjie()	{	}	public static function dingdan()	{		$res = db::query("SELECT * FROM `move_trade` WHERE `num` < `deal` LIMIT 1;");		if ($res) {			db::table("sys_err")->add(["name" => "trade", "value" => "用户ID(" . $res[0]["userid"] . ")出现已成交量大于委托量,订单号" . $res[0]["id"] . "委托数量" . $res[0]["num"] . "已成交量" . $res[0]["deal"] . "处理了"]);			db::table("trade")->where(["id" => $res[0]["id"]])->save(["deal" => $res[0]["num"]]);			return ["出现异常 已经修复", 1];		} else {			return ["没有异常"];		}	}	public static function coin_jk()	{		$mc = mc("queue_coin_jk");		if (!$mc) {			$mc = [0];		}		if (count($mc) > 50) {			mc("queue_coin_jk", null);			return ["跳出循环"];		}		$res = db::table("coin")->where(["id#not in" => $mc])->find();		$rs = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#user_coin write,#pre#sys_config write,#pre#sys_stats write,#pre#sys_err write,#pre#trade_market write");		if (!$res) {			mc("queue_coin_jk", null);			return ["没有数据"];		} else {			$mc[] = $res["id"];			mc("queue_coin_jk", $mc);		}		$zc_jz = 0;		if ($res["jk_dc"] || $res["jk_js"]) {			$sys_stats = [];			$sys_stats = db::table("sys_stats")->where(["name" => "user_coin", "type" => $res["name"]])->order("id desc")->find();			if ($sys_stats) {				$sun_user_coin_c = db::table("user_coin")->sum($res["name"]);				$sun_user_coin_d = db::table("user_coin")->sum($res["name"] . "d");				$sun_user_coin_z = num(($sun_user_coin_c + $sun_user_coin_d), 8);				if (!$sun_user_coin_z) {					$old_stats = $sun_user_coin_z;				} else {					$old_stats = 0;				}				$sys_stats["data"] = json_decode($sys_stats["data"], true);				if ($res["jk_dc"] && ($sys_stats["data"][2] > $old_stats)) {					if (($sys_stats["data"][2] / 100 * (100 + $res["jk_dc"])) > $old_stats) {						if (!db::table("sys_err")->where(["name" => "sms", "status" => 0, "title" => "jk_dc" . $res["name"]])->find()) {							$rs[] = db::table("sys_err")->add(["name" => "sms", "title" => "jk_dc" . $res["name"], "value" => $res["name"] . "最新统计总计比上一次多", "addtime" => time()]);						}						if ($res["jk_jy"]) {							db::table("trade_market")->where(["trade" => 1])->save(["trade" => 0]);						}						if ($res["jk_gz"]) {							$zc_jz = 1;						}						if ($res["jk_gz"]) {							db::table("sys_config")->where(["name" => "web_close"])->save(["value" => 0]);						}					}				}				if ($res["jk_js"] && $sys_stats["data"][2] < $old_stats) {					if ($old_stats) {						$tmp_old_stats = ($old_stats / 100 * (100 - $res["jk_js"]));					} else {						$tmp_old_stats = 0;					}					if ($sys_stats["data"][2] > $tmp_old_stats) {						if (!db::table("sys_err")->where(["name" => "sms", "title" => "jk_js" . $res["name"], "status" => 0])->find()) {							$rs[] = db::table("sys_err")->add(["name" => "sms", "title" => "jk_js" . $res["name"], "value" => $res["name"] . "最新统计总计比上一次少", "addtime" => time()]);						}						if ($res["jk_jy"]) {							db::table("trade_market")->where(["trade" => 1])->save(["trade" => 0]);						}						if ($res["jk_gz"]) {							$zc_jz = 1;						}						if ($res["jk_gz"]) {							db::table("sys_config")->where(["name" => "web_close"])->save(["value" => 0]);						}					}				}			}		}		if ($res["wallet"] == "qbb") {			if ($res["jk_zy"] || $res["jk_bc"]) {				if ($res["dj_yh"] && $res["dj_mm"] && $res["dj_zj"] && $res["dj_dk"]) {					$client = new client($res["dj_yh"], $res["dj_mm"], $res["dj_zj"], $res["dj_dk"], 5, [], 1);					if ($client) {						$getinfo = [];						$getinfo = $client->execute("getinfo");						if ($getinfo) {							if ($res["jk_zy"]) {								if ($getinfo["balance"] > $res["jk_zy"]) {									if (!db::table("sys_err")->where(["name" => "sms", "title" => "jk_zy" . $res["name"], "status" => 0])->find()) {										$rs[] = db::table("sys_err")->add(["name" => "sms", "title" => "jk_zy" . $res["name"], "value" => $res["name"] . "钱包实际余额达到警戒，为了安全请转移其他地方储存", "addtime" => time()]);									}								}							}							if ($res["jk_bc"] > 0) {								if (num($getinfo["balance"], 8) < num($res["jk_bc"], 8)) {									if (!db::table("sys_err")->where(["name" => "sms", "title" => "jk_bc" . $res["name"], "status" => 0])->find()) {										$rs[] = db::table("sys_err")->add(["name" => "sms", "title" => "jk_bc" . $res["name"], "value" => $res["name"] . "钱包实际余额小于警戒，请补充", "addtime" => time()]);									}								}							}						}					}				}			}		}		if (check_arr($rs)) {			db::exec("commit");			db::exec("unlock tables");			if ($zc_jz == 1) {				db::table("coin")->where(["zc_jz" => 1])->save(["zc_jz" => 0]);			}			return ["计算成功", 1];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ["计算失败"];		}	}	public function jisuan_market()	{		return false;		$all_market = mc('jisuan_market_all_market');		if (!$all_market) {			$all_market = db::table('trade_market')->select();		}		$market_data = array_shift($all_market);		mc('jisuan_market_all_market', $all_market);		if ($market_data && isset($market_data['name'])) {			$market = $market_data['name'];			$buy_num = db::table('trade')->where(['type' => 1, 'market' => $market])->sum('num');			if ($buy_num && is_string($buy_num)) {				mc('jisuan_market_buy_num' . $market, $buy_num);			}			$sell_num = db::table('trade')->where(['type' => 2, 'market' => $market])->sum('num');			if ($sell_num && is_string($sell_num)) {				mc('jisuan_market_sell_num' . $market, $sell_num);			}			$buy_mum = db::table('trade')->where(['type' => 1, 'market' => $market])->sum('mum');			if ($buy_mum && is_string($buy_mum)) {				mc('jisuan_market_sell_mum' . $market, $buy_mum);			}			$sell_mum = db::table('trade')->where(['type' => 2, 'market' => $market])->sum('mum');			if ($sell_mum && is_string($sell_mum)) {				mc('jisuan_market_sell_mum' . $market, $sell_mum);			}			$buy_fee = db::table('trade')->where(['type' => 1, 'market' => $market])->sum('fee');			if ($buy_fee && is_string($buy_fee)) {				mc('jisuan_market_buy_fee' . $market, $buy_fee);			}			$sell_fee = db::table('trade')->where(['type' => 2, 'market' => $market])->sum('fee');			if ($sell_fee && is_string($sell_fee)) {				mc('jisuan_market_sell_fee' . $market, $sell_fee);			}			$buy_deal = db::table('trade')->where(['type' => 1, 'market' => $market])->sum('deal');			if ($buy_deal && is_string($buy_deal)) {				mc('jisuan_market_buy_deal' . $market, $buy_deal);			}			$sell_deal = db::table('trade')->where(['type' => 2, 'market' => $market])->sum('deal');			if ($sell_deal && is_string($sell_deal)) {				mc('jisuan_market_sell_deal' . $market, $sell_deal);			}			$ress = db::table('sys_stats')->where(['name' => 'market', 'type' => $market])->order("addtime asc")->limit(100)->select();			if ($ress && is_string($ress)) {				mc('jisuan_market_ress' . $market, $ress);			}			return ["计算成功" . $market];		}	}	public function xingneng()	{	}	public function moni()	{		if (MS_CODE == "95D3A7E98EE9F913B462B87C73DS" || MS_CODE == "95D3A7E98EE9fdgf3BCDB87C73DB") {			$userid = 1;			$type = rand(1, 2);			$zhangdie = rand(1, 10);			$ztime = rand(0, 23);			$time_data = [0 => [1, 2], 1 => [1, 3], 2 => [1, 2], 3 => [1, 3], 4 => [1, 2], 5 => [1, 2], 6 => [1, 3], 7 => [1, 3], 8 => [3, 8], 9 => [5, 10], 10 => [6, 15], 11 => [5, 12], 12 => [4, 10], 13 => [3, 8], 14 => [4, 12], 15 => [5, 18], 16 => [2, 12], 17 => [1, 10], 18 => [1, 8], 19 => [5, 15], 20 => [8, 20], 21 => [10, 30], 22 => [5, 10], 23 => [1, 5],];			$t = rand(1, 2);			if ($t == 1) {				$market['name'] = 'dsc_cny';			} elseif ($t == 2) {				$market['name'] = 'eth_cny';			} else {				$market['name'] = 'ltc_cny';			}			$market = db::table('trade_market')->where(['name' => $market['name']])->find();			if ($type == 1) {				$price = db::table("trade")->where(["market" => $market['name'], "type" => 2, "status" => 0])->field("price")->order('price asc')->find('price');			} else {				$price = db::table("trade")->where(["market" => $market['name'], "type" => 1, "status" => 0])->field("price")->order('price desc')->find('price');			}			if ($t == 1) {				$fudu = num(rand($time_data[$ztime][0], $time_data[$ztime][1]) / 1000, 3);				if ($zhangdie > 3) {					$price = num($price + $fudu, 3);				} else {					$price = num($price - $fudu, 3);				}				$num = round(abs(rand(10000, 10000000)) / 100000, 5);			} elseif ($t == 2) {				$fudu = num(rand($time_data[$ztime][0], $time_data[$ztime][1]) / 100, 2);				if ($zhangdie > 3) {					$price = num($price + $fudu, 2);				} else {					$price = num($price - $fudu, 2);				}				$num = round(abs(rand(10000, 10000000)) / 100000, 5);			} else {				$fudu = num(rand($time_data[$ztime][0], $time_data[$ztime][1]) / 100, 2);				if ($zhangdie > 3) {					$price = num($price + $fudu, 2);				} else {					$price = num($price - $fudu, 2);				}				$num = round(abs(rand(10000, 10000000)) / 1000000, 6);			}			$res = md('trade')->guadan($userid, $market['name'], $price, $num, $type);			if (isset($res[1])) {				return [$market['name'] . $type . " 交易成功" . $price, 1];			} else {				return [$market['name'] . $type . " 交易失败" . $price];			}		}	}	public function reg_stat()	{		return false;		if (mc("queue_reg_stat_time") == 1) {			$time = time() - 60 * 60 * 24;		} else {			$time = time() - 60 * 60 * 24 * 100;			mc("queue_reg_stat_time", 1);		}		$time = strtotime(date('Y-m-d 00:00:00', $time));		for ($i = 1; $i < 101; $i++) {			if (($time + ($i - 1) * 60 * 60 * 24) > time()) {				break;			}			$reg = db::table("user")->where(["addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->count();			$fee = db::table("user_invit")->where(["type" => "注册赠送", "addtime#>=" => ($time + $i * 60 * 60 * 24), "addtime#<" => ($time + ($i + 1) * 60 * 60 * 24)])->sum("fee");			if ($reg || $reg) {				$data = json_encode([$reg, $fee]);				$old = db::table("sys_stats")->where(["name" => "reg", "type" => 'reg', "addtime" => ($time + ($i + 1) * 60 * 60 * 24)])->find();				if ($old) {					db::table("sys_stats")->where(["id" => $old['id']])->set(["data" => $data]);					db::exec("commit");				} else {					db::table("sys_stats")->add(["name" => "reg", "type" => 'reg', "addtime" => ($time + ($i + 1) * 60 * 60 * 24), "data" => $data]);					db::exec("commit");				}			}		}		return ["注册统计计算成功"];	}	public function queue()	{		$file_path = APP_PATH . '/runtime/debug/queue.json';		$time = time();		$timeArr = [];		if (file_exists($file_path)) {			$timeArr = file_get_contents($file_path);			$timeArr = json_decode($timeArr, true);		}		if (!is_array($timeArr)) {			$timeArr = [];		}		array_unshift($timeArr, $time);		$timeArr = array_slice($timeArr, 0, 3);		if (file_put_contents($file_path, json_encode($timeArr))) {			return ['更新成功', 1];		} else {			return ['更新失败'];		}	}	public function trade_che()	{		$trade_che = mc('move_queue_trade_che');		if (!$trade_che) {			$trade_che = db::table('trade_che')->where(['status' => 1])->select();			mc('move_queue_trade_che', $trade_che ? $trade_che : true);		}		if (!is_array($trade_che)) {			return ['没有数据'];		}		$res = [];		foreach ($trade_che as $k => $v) {			if ($v['maxtime'] > 0 && $v['buy'] == 1 && $v['sell'] == 1) {				$res = db::table('trade')->where(['addtime#<' => time() - $v['maxtime'] * 60 * 60, 'status' => 0, 'market' => $v['market']])->limit(10)->select();				if ($res) {					break;				}			}			if ($v['maxtime'] > 0 && $v['buy'] == 1 && $v['sell'] == 0) {				$res = db::table('trade')->where(['addtime#<' => time() - $v['maxtime'] * 60 * 60, 'status' => 0, 'type' => 1, 'market' => $v['market']])->limit(10)->select();				if ($res) {					break;				}			}			if ($v['maxtime'] > 0 && $v['buy'] == 0 && $v['sell'] == 1) {				$res = db::table('trade')->where(['addtime#<' => time() - $v['maxtime'] * 60 * 60, 'status' => 0, 'type' => 2, 'market' => $v['market']])->limit(10)->select();				if ($res) {					break;				}			}		}		if (!$res) {			return ['没有要撤销的'];		}		foreach ($res as $k => $v) {			md('trade')->chexiao($v['id']);		}		return ['有数据计算完成', 1];	}	public function coin_in_eth_new()	{		$mc = mc("queue_eth_in");		if (!$mc) {			$mc = [0];		}		$coin = db::table("coin")->where(["status" => 1, "wallet#in" => ['eth', 'deth'], "zr_jz" => 1, "id#not in" => $mc])->find();		if (!$coin) {			mc("queue_eth_in", null);			return ["不存在钱包币" . json_encode($mc)];		}		$mc[] = $coin["id"];		mc("queue_eth_in", $mc);		$host = $coin['dj_zj'];		$port = $coin["dj_dk"];		$password = $coin['dj_jm'];		$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=billin';		$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);		if (isset($qianbao['status']) && $qianbao['status'] == 1 && isset($qianbao['msg']['data']) && $qianbao['msg']['data']) {			$data = $qianbao['msg']['data'][0];			$user_wallet = db::table("user_wallet")->where(['eth' => $data["account"]])->find();			if (empty($user_wallet)) {				$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=billinConfirm&txid=' . $data['txid'] . '&status=2';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '没有对应的用户钱包'];			}			$coin_in = db::table('coin_in')->where(['txid' => $data['txid']])->find();			if (is_array($coin_in) && $coin_in) {				$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=billinConfirm&txid=' . $data['txid'] . '&status=2';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '该订单已处理'];			}			db::exec("set autocommit = 0");			db::exec("lock tables #pre#coin_in write,#pre#user_coin write");			$rs[] = db::table('coin_in')->add(["userid" => $user_wallet["userid"], "coinname" => $coin["name"], "zhuanchu" => "", "txid" => $data["txid"], "queren" => '12', "num" => $data['value'], "mum" => $data['value'], "fee" => 0, "addtime" => time(), "type" => "站外", 'status' => 1]);			$rs[] = db::table('user_coin')->where(['userid' => $user_wallet['userid']])->set([$coin["name"] . "#+" => $data['value']]);			if (check_arr($rs)) {				db::exec("commit");				db::exec("unlock tables");				$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=billinConfirm&txid=' . $data['txid'] . '&status=1';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '自动到账成功'];			} else {				db::exec("rollback");				db::exec("unlock tables");				return ['自动到账失败'];			}		} else {			return [$coin['title'] . '没有转入信息'];		}	}	public function coin_out_eth_new()	{		$mc = mc("queue_eth_out");		if (!$mc) {			$mc = [0];		}		$coin = db::table("coin")->where(["status" => 1, "wallet#in" => ['eth', 'deth'], "zr_jz" => 1, "id#not in" => $mc])->find();		if (!$coin) {			mc("queue_eth_out", null);			return ["不存在钱包币" . json_encode($mc)];		}		$mc[] = $coin["id"];		mc("queue_eth_out", $mc);		$mcc = mc("queue_eth_out_coin");		if (!$mcc) {			$mcc = [0];		}		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_out write");		$coin_out = db::table('coin_out')->where(['coinname' => $coin['name'], 'status#in' => [0, 2], "type" => "站外", "id#not in" => $mcc])->find();		if (empty($coin_out)) {			db::exec("rollback");			db::exec("unlock tables");			mc("queue_eth_out_coin", null);			return [$coin['name'] . '没有转出订单'];		}		if (isset($coin["zc_zd"]) && $coin["zc_zd"]) {			if (isset($coin_out["mum"]) && $coin_out["mum"] > $coin["zc_zd"]) {				if (isset($coin_out["status"]) && $coin_out["status"] != 2) {					db::exec("unlock tables");					$mcc[] = $coin_out["id"];					mc("queue_eth_out_coin", $mcc);					return ["订单没有审核"];				}			}		}		$host = $coin['dj_zj'];		$port = $coin["dj_dk"];		$password = $coin['dj_jm'];		$pararm1 = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=version';		$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm1);		if (isset($qianbao['status']) && $qianbao['status'] == 1) {			if (isset($qianbao['msg']) && isset($qianbao['msg']['total']) && $qianbao['msg']['total'] < $coin_out["mum"]) {				db::exec("unlock tables");				$mcc[] = $coin_out["id"];				mc("queue_eth_out_coin", $mcc);				return ["币种余额不足"];			}		} else {			$mc[] = $coin["id"];			mc("queue_eth_out", $mc);			db::exec("unlock tables");			return ["币种对接异常"];		}		$change_status = db::table('coin_out')->where(['id' => $coin_out['id']])->save(['status' => 1]);		if (!$change_status) {			db::exec("rollback");			db::exec("unlock tables");			$mcc[] = $coin_out["id"];			mc("queue_eth_out_coin", $mcc);			return [$coin_out['id'] . '转出失败,状态未改变'];		}		db::exec("commit");		$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=sendMoney&target=' . $coin_out['username'] . '&value=' . $coin_out['mum'];		$info = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);		if (empty($info) || $info['status'] != 1) {			if (isset($info['msg']) == false) {				$info['msg'] = '自动转出命令返回失败，请去钱包核对是否实际已经发送';			}		}		db::table('coin_out')->where(['id' => $coin_out['id']])->save(['status' => 1, "txid" => $info['msg']]);		db::exec("commit");		db::exec("unlock tables");		$mcc[] = $coin_out["id"];		mc("queue_eth_out_coin", $mcc);		return [$coin_out['id'] . '转出成功'];	}	public function coin_in_wkc()	{		$coin = db::table("coin")->where(["status" => 1, "wallet" => 'wkc', "zr_jz" => 1])->find();		if (empty($coin)) {			return ['没有玩客币'];		}		$host = $coin['dj_zj'];		$port = $coin["dj_dk"];		$password = $coin['dj_jm'];		$pararm = 'coin=wkc&action=billin';		$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);		if (isset($qianbao['status']) && $qianbao['status'] == 1 && isset($qianbao['msg']['data']) && $qianbao['msg']['data']) {			$data = $qianbao['msg']['data'][0];			$user_wallet = db::table("user_wallet")->where([$coin['name'] => $data["account"]])->find();			if (empty($user_wallet)) {				$pararm = 'coin=wkc&action=billinConfirm&txid=' . $data['txid'] . '&status=2';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '没有对应的用户钱包'];			}			$coin_in = db::table('coin_in')->where(['txid' => $data['txid']])->find();			if (is_array($coin_in) && $coin_in) {				$pararm = 'coin=wkc&action=billinConfirm&txid=' . $data['txid'] . '&status=2';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '该订单已处理'];			}			db::exec("set autocommit = 0");			db::exec("lock tables #pre#coin_in write,#pre#user_coin write");			$rs[] = db::table('coin_in')->add(["userid" => $user_wallet["userid"], "coinname" => $coin["name"], "zhuanchu" => "", "txid" => $data["txid"], "queren" => '0', "num" => $data['value'], "mum" => $data['value'], "fee" => 0, "addtime" => time(), "type" => "站外", 'status' => 1]);			$rs[] = db::table('user_coin')->where(['userid' => $user_wallet['userid']])->set([$coin["name"] . "#+" => $data['value']]);			if (check_arr($rs)) {				db::exec("commit");				db::exec("unlock tables");				$pararm = 'coin=' . $coin['wallet'] . '&name=' . $coin['name'] . '&action=billinConfirm&txid=' . $data['txid'] . '&status=1';				$qianbao = \ext\coin\mscoin::mycurl($host, $port, $password, $pararm);				return [$data['txid'] . '自动到账成功'];			} else {				db::exec("rollback");				db::exec("unlock tables");				return ['自动到账失败'];			}		} else {			return [$coin['title'] . '没有转入信息'];		}	}	public function coin_in_cxc()	{		$res = db::table("coin")->where(["status" => 1, "zr_jz" => 1, "name" => "cxc"])->find();		if (!$res) {			return ['后台配置cxc禁止转入'];		}		$userIndex = mc('coin_in_cxc_userIndex');		if (!$userIndex) {			$userIndex = 0;		}		$user_wallet = db::table('user_wallet')->where(['cxc#!=' => ''])->limit($userIndex, 1)->select();		if (!$user_wallet) {			mc('coin_in_cxc_userIndex', null);			return ['未查找到用户'];		} else {			mc('coin_in_cxc_userIndex', ++$userIndex);		}		$user_wallet = $user_wallet[0];		$client = \ext\coin\cxc::getTransLog($user_wallet['cxc'], 0, 50);		$client = json_decode($client, true);		if (!$client) {			return [$res["name"] . "没有新的入账信息,userid=" . $user_wallet['userid']];		}		$successIDArray = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_in write,#pre#user_coin write,#pre#user read, #pre#user_wallet");		foreach ($client as $k => $v) {			$rs = [];			$username = null;			$txid = null;			$zhuanchu = null;			$mum = null;			$num = null;			$fee = null;			$senderId = $user_wallet['userid'];			$username = $senderId;			$txid = $v["id"];			$zhuanchu = $v['senderId'];			$mum = $v['amount'] / 100000000;			$num = $v['amount'] / 100000000;			$fee = $v['fee'] / 100000000;			$check_user["id"] = $username;			$check_coinin = db::table('coin_in')->where(['txid' => $txid])->find();			if ($check_coinin) {				continue;			}			$rs[] = db::table('coin_in')->add(["userid" => $check_user["id"], "coinname" => $res["name"], "zhuanchu" => $zhuanchu, "username" => $username, "txid" => $txid, "queren" => '6', "num" => $num, "mum" => $mum, "fee" => $fee, "addtime" => time(), "type" => "站外", 'status' => 1]);			$rs[] = db::table('user_coin')->where(['userid' => $check_user['id']])->set([$res["name"] . "#+" => $num]);			if (check_arr($rs)) {				db::exec("commit");				continue;			} else {				db::exec("rollback");				continue;			}		}		db::exec("unlock tables");		return [$res['name'] . '处理成功, 成功用户id=' . $user_wallet['userid']];	}	public function coin_in_wyc()	{		$mc = mc("queue_coin_wyc");		if (!$mc) {			$mc = [0];		}		$res = db::table("coin")->where(["status" => 1, "wallet#in" => ["wyc", "asch"], "zr_jz" => 1, "id#not in" => $mc])->find();		if (!$res) {			mc("queue_coin_wyc", null);			return ["不存在钱包币" . json_encode($mc)];		}		$mc[] = $res["id"];		mc("queue_coin_wyc", $mc);		if (!$res["dj_mm"] || !$res["tsb_addr"]) {			return ["对接参数错误 " . $res["name"]];		}		$client = '';		if ($res['name'] == 'wcg') {			$client = \ext\coin\wcg::getTransLog($res['tsb_addr'], $res['dj_mm']);		} else if ($res['name'] == 'xas') {			$client = \ext\coin\asch::getTransLog($res['tsb_addr'], 100);		} else if ($res['wallet'] == 'asch') {			if (!$res['dj_yh']) {				return [$res['name'] . ':币种模块参数配置错误'];			}			$client = \ext\coin\asch_ex::getTransLog($res['tsb_addr'], 100, $res['dj_yh']);		} else {			return ['此类型的网页币暂不支持以普通的网页币的方式转入'];		}		$client = json_decode($client, true);		if (!$client) {			return [$res["name"] . "没有新的入账信息"];		}		$successIDArray = [];		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_in write,#pre#user_coin write,#pre#user read, #pre#user_wallet");		foreach ($client as $k => $v) {			$rs = [];			$username = null;			$txid = null;			$zhuanchu = null;			$mum = null;			$num = null;			$fee = null;			if ($res['name'] == 'wcg') {				if ($v["type"] != 0) {					continue;				}				if (!$v["decode"]) {					continue;				}				if (!$v["transaction"]) {					continue;				}				$username = $v["decode"];				$txid = $v["transaction"];				$zhuanchu = $v['senderRS'];				$mum = $v['num'];				$num = $v['num'];				$fee = $v['fee'];			} else if ($res['name'] == 'xas') {				if ($res['tsb_addr'] != $v['recipientId']) {					continue;				}				$username = $v["message"];				$txid = $v["id"];				$zhuanchu = $v['senderId'];				$mum = $v['amount'] / 100000000;				$num = $v['amount'] / 100000000;				$fee = $v['fee'] / 100000000;			} else if ($res['wallet'] == 'asch') {				if ($res['tsb_addr'] != $v['recipientId']) {					continue;				}				$username = $v["message"];				$txid = $v["id"];				$zhuanchu = $v['senderId'];				if (!isset($v['asset']['uiaTransfer']['amount'])) {					continue;				}				$mum = $v['asset']['uiaTransfer']['amount'] / 100000000;				$num = $mum;				$fee = $v['fee'] / 100000000;			} else if ($res['name'] == 'cxc') {				$sender = db::table('user_wallet')->where([$res['name'] => $v['recipientId']])->find();				if (!$sender) {					continue;				}				$senderId = $sender['userid'];				$username = $senderId;				$txid = $v["id"];				$zhuanchu = $v['senderId'];				$mum = $v['amount'] / 100000000;				$num = $v['amount'] / 100000000;				$fee = $v['fee'] / 100000000;			}			if ($res['name'] == 'cxc') {				$check_user["id"] = $username;			} else {				$check_user = db::table('user')->where(['moble' => '+86|' . $username])->find();				if (empty($check_user)) {					$check_user = db::table('user')->where(['email' => $username])->find();				}				if (empty($check_user)) {					continue;				}			}			$check_coinin = db::table('coin_in')->where(['txid' => $txid])->find();			if ($check_coinin) {				continue;			}			$rs[] = db::table('coin_in')->add(["userid" => $check_user["id"], "coinname" => $res["name"], "zhuanchu" => $zhuanchu, "username" => $username, "txid" => $txid, "queren" => '6', "num" => $num, "mum" => $mum, "fee" => $fee, "addtime" => time(), "type" => "站外", 'status' => 1]);			$rs[] = db::table('user_coin')->where(['userid' => $check_user['id']])->set([$res["name"] . "#+" => $num]);			if (check_arr($rs)) {				$successIDArray[] = $check_user["id"];				db::exec("commit");				continue;			} else {				db::exec("rollback");				continue;			}		}		db::exec("unlock tables");		return [$res['name'] . '处理成功, 成功用户id=' . implode(',', $successIDArray)];	}	public static function cxc_gather()	{		$deal_index = mc("cxc_gather_index");		if (!$deal_index) {			$deal_index = 0;			mc("cxc_gather_index", null);		}		$mymc_coin = new \mymc\coin();		$coin_list = $mymc_coin->select();		$coin = $coin_list['cxc'];		if (!$coin) {			return ['不存在cxc'];		}		$user_wallet = db::table('user_wallet')->where(['cxc#!=' => ''])->order('id asc')->limit($deal_index, 1)->select();		if (!$user_wallet) {			mc("cxc_gather_index", null);			return ['cxc汇总结束一轮'];		} else {			mc("cxc_gather_index", ++$deal_index);		}		$user_wallet = $user_wallet[0];		$accountString = $user_wallet['cxc_account'];		$accountData = json_decode($accountString, true);		$account = \ext\coin\cxc::getBalance($accountData['addr']);		if (!isset($account['success']) || !$account['success']) {			return ['获取id为' . $user_wallet['userid'] . '的用户的余额 失败'];		}		$balance = $account['balance'] / 100000000;		$amount = floor($balance * 0.999 * 100000000) / 100000000;		if ($amount < 0.001) {			return ['用户id为' . $user_wallet['userid'] . '金额小于0.001,不需要转到主账户'];		}		$rs = \ext\coin\cxc::sendTrans(floatval($amount), $coin['tsb_addr'], $accountData['secret'], $accountData['publicKey']);		if (!$rs || !isset($rs['success']) || !$rs['success']) {			if (isset($rs['res'])) {				return ["自动归结返回失败,userid=" . $user_wallet['userid'] . '|' . json_encode($rs['transaction'])];			}			return ["自动归结返回失败,userid=" . $user_wallet['userid']];		} else {			return ['cxc归结成功，用户id=' . $user_wallet['userid']];		}	}	public static function coin_out_wyc()	{		$mc = mc("queue_coin_out_wyc");		if (!$mc) {			$mc = [0];		}		if (count($mc) > 20) {			mc("queue_coin_out_wyc", null);			return ["超出次数"];		}		$mymc_coin = new \mymc\coin();		db::exec("set autocommit = 0");		db::exec("lock tables #pre#coin_out write");		$res = db::table("coin_out")->where(["status#in" => [0, 2], "type" => "站外", "id#not in" => $mc])->find();		if (!$res) {			db::exec("unlock tables");			mc("queue_coin_out_wyc", null);			return ["不存在订单"];		}		$coin_list = $mymc_coin->select();		$coin = $coin_list[$res["coinname"]];		$msg = 0;		if (!$coin) $msg = '币种不能存在';		if (($coin["wallet"] != "wyc") && ($coin['wallet'] != 'asch')) $msg = '币种类型非网页币或其代币';		if ($coin["zc_jz"] != 1) $msg = '币种禁止转出';		if ($coin["status"] != 1) $msg = '币种被禁用';		if ($msg) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_wyc", $mc);			return ['coin_out_id:' . $res['id'] . ',' . $coin['name'] . ':' . $msg];		}		if (isset($coin["zc_zd"]) && $coin["zc_zd"]) {			if (isset($res["mum"]) && $res["mum"] > $coin["zc_zd"]) {				if (isset($res["status"]) && $res["status"] != 2) {					db::exec("unlock tables");					$mc[] = $res["id"];					mc("queue_coin_out_wyc", $mc);					return ["币种没有审核"];				}			}		}		if (!$coin["dj_yh"] || !$coin["dj_mm"]) {			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_wyc", $mc);			return ["币种配置异常"];		}		$jg = db::table("coin_out")->where(["id" => $res["id"]])->save(["status" => 1]);		if ($jg) {			db::exec("commit");			db::exec("unlock tables");			$coin_out_log = db::table("coin_out")->where(["id" => $res["id"], "status" => 1])->find();			if ($coin_out_log) {				if ($coin_out_log['coinname'] == 'cxc') {					$rs = \ext\coin\cxc::sendTrans(floatval($res["mum"]), $res['username'], $coin['dj_mm'], $coin['dj_yh']);				} elseif ($coin_out_log['coinname'] == 'xas') {					$rs = \ext\coin\asch::sendTrans(floatval($res["mum"]), $res['username'], $coin['dj_mm'], $coin['dj_jm']);				} else if ($coin_out_log['coinname'] == 'wcg') {					$rs = \ext\coin\wcg::sendTrans($coin['dj_mm'], $coin['dj_yh'], $res['username'], floatval($res["mum"]));				} else if ($coin['wallet'] == 'asch') {					$rs = \ext\coin\asch_ex::sendTrans(floatval($res["mum"]), $res['username'], $coin['dj_mm'], $coin['dj_jm'], $coin['dj_yh']);				}				if (!$rs || ((isset($rs['transaction']) == false) && (isset($rs['transactionId']) == false))) {					$rs = "自动转出命令返回失败，请去钱包核对是否实际已经发送";				}				db::table("coin_out")->where(["id" => $res["id"]])->save(["txid" => $rs['transaction'], "status" => 1]);				db::exec("commit");				return ["成功处理  币种 " . $res["coinname"] . "订单号" . $res["id"]];			}		} else {			db::exec("rollback");			db::exec("unlock tables");			$mc[] = $res["id"];			mc("queue_coin_out_wyc", $mc);			return ["状态更新失败"];		}	}	public function c2c_hangqing()	{		db::exec("set autocommit = 0");		db::exec("lock tables #pre#c2c_log write , #pre#c2c_hangqing write , #pre#c2c_qu write");		$c2c_hangqing = db::table('c2c_hangqing')->order('id desc')->find();		if ($c2c_hangqing) {			$c2cLog = db::table('c2c_log')->where(["id#>" => $c2c_hangqing['log_id'], "status" => 4])->order('id asc')->select();			if (!$c2cLog) {				return ['暂无新的交易生成'];			}		} else {			$c2cLog = db::table('c2c_log')->where(["status" => 4])->order('addtime asc')->select();		}		$res = [];		foreach ($c2cLog as $k => $v) {			$res[$k] = db::table('c2c_hangqing')->add(['price' => $v['price'], 'addtime' => $v['addtime'], 'log_id' => $v['id'], 'coin' => $v['coin']]);		}		$c2c_qu = db::table('c2c_qu')->where(['status' => 1])->select();		foreach ($c2c_qu as $k => $v) {			if (mc('c2c_hangqing' . $v['coin'])) {				mc('c2c_hangqing' . $v['coin'], null);			}		}		if (check_arr($res)) {			db::exec("commit");			db::exec("unlock tables");			return ['C2C行情图,更新成功'];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ['C2C行情图,更新失败'];		}	}	public function topPrice()	{		$beginToday = mktime(0, 0, 0, date('m'), date('d'), date('Y'));		db::exec("set autocommit = 0");		db::exec("lock tables #pre#c2c_log write , #pre#c2c_trade write,#pre#c2c_qu write");		$coin = db::table('c2c_qu')->where(['status' => 1])->field('coin')->select();		$res = [];		$newlist = '';		foreach ($coin as $key => $val) {			$list = db::table('c2c_log')->where(['status' => 4, 'addtime#>' => $beginToday, 'coin' => $val['coin']])->select();			if (empty($list)) {				$newlist .= $val['coin'] . '数据为空,';			} else {				$count = count($list) - 1;				$priceArr = [];				$priceArr['num'] = 0;				foreach ($list as $k => $v) {					$priceArr['buy'][$k] = 0;					$priceArr['sell'][$k] = 0;					if ($v['type'] == 1) {						$priceArr['buy'][$k] = $v['price'];					} else {						$priceArr['sell'][$k] = $v['price'];					}					$priceArr['max_price'][$k] = $v['price'];					$priceArr['min_price'][$k] = $v['price'];					$priceArr['num'] += $v['num'];				}				$priceArr['range'] = ($list[$count]['price'] - $list[0]['price']) / $list[0]['price'] * 100;				$priceArr['new_price'] = $list[$count]['price'];				$priceArr['max_price'] = max($priceArr['max_price']);				$priceArr['min_price'] = min($priceArr['min_price']);				$priceArr['buy'] = array_pop($priceArr['buy']);				$priceArr['sell'] = array_pop($priceArr['sell']);				$priceArr['coin'] = $val['coin'];				$priceArr['addtime'] = time();				$priceArr['status'] = 1;				$res[] = db::table('c2c_trade')->add($priceArr);			}			mc('c2c_topPrice' . $val['coin'], null);		}		if (check_arr($res)) {			db::exec("commit");			db::exec("unlock tables");			return ['头部价格,更新成功,' . $newlist];		} else {			db::exec("rollback");			db::exec("unlock tables");			return ['头部价格,更新失败'];		}	}	public static function coinin_gift()	{		$coinin_gift = db::table('gift_config')->where(['status' => 1,])->select();		if (!$coinin_gift) {			return ['暂无有效的转入赠送配置'];		}		$msg = '';		foreach ($coinin_gift as $gift_config) {			$msg .= '  ' . $gift_config['in_coinname'] . ':';			$mymc_coin = new \mymc\coin();			$coinin_name = $mymc_coin->find($gift_config['in_coinname']);			if (!$coinin_name) {				$msg .= '转入币种' . $gift_config['in_coinname'] . '不存在或被禁用; ';				continue;			}			$gift_coinname = $mymc_coin->find($gift_config['gift_coinname']);			if (!$gift_coinname) {				$msg .= '赠送币种' . $gift_config['gift_coinname'] . '不存在或被禁用; ';				continue;			}			$coin_in_log = db::table('coin_in')->where(['coinname' => $coinin_name['name'], 'status' => 1, 'addtime#>' => $gift_config['start_time'], 'addtime#<' => $gift_config['end_time'], 'id#>=' => $gift_config['deal_id']])->order('id asc')->limit(5)->select();			if (!$coin_in_log) {				$msg .= $gift_config['in_coinname'] . '暂无最新转入记录';				db::table('gift_config')->where(['id' => $gift_config['id']])->set(['deal_id' => 0]);				continue;			} else {				$id = $gift_config['deal_id'];				db::exec("set autocommit = 0");				db::exec("lock tables #pre#gift write, #pre#user_coin write, #pre#gift_config write");				foreach ($coin_in_log as $coin_in) {					$id = $coin_in['id'] > $id ? $coin_in['id'] : $id;					$is_give_coin = db::table('gift')->where(['coin_in_id' => $coin_in['id']])->find();					if ($is_give_coin) {						continue;					}					$give_num = $coin_in['mum'] * $gift_config['bili'] / 100;					$give_num = floor($give_num * 100000000) / 100000000;					$rs = [];					$rs[] = db::table('gift')->add(['coin_in_id' => $coin_in['id'], 'coinname' => $coin_in['coinname'], 'coinnum' => $coin_in['mum'], 'userid' => $coin_in['userid'], 'giftcoin' => $gift_config['gift_coinname'], 'giftnum' => $give_num, 'addtime' => time(), 'status' => 1]);					$rs[] = db::table('user_coin')->where(['userid' => $coin_in['userid']])->set([$gift_config['gift_coinname'] . '#+' => $give_num]);					if (check_arr($rs)) {						$msg .= '赠送成功';						db::exec("commit");						continue;					} else {						$msg .= '赠送失败,转入记录id：' . $coin_in['id'];						db::exec("rollback");						continue;					}				}				$res = db::table('gift_config')->where(['id' => $gift_config['id']])->set(['deal_id' => $id + 1]);				db::exec("unlock tables");			}		}		return [$msg];	}}